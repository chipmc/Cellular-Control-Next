
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Control-Next/target/2.3.0/electron/Cellular-Control-Next.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004914  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000018  40024000  08084930  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000000  08084948  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000654  20000088  20000088  00040088  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080849cc  080849cc  000349cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080849f4  080849f4  000349f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00140979  00000000  00000000  000349f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001707d  00000000  00000000  00175371  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002728  00000000  00000000  0018c3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00006338  00000000  00000000  0018eb16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029e10  00000000  00000000  00194e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00034414  00000000  00000000  001bec5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b71cc  00000000  00000000  001f3072  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006938  00000000  00000000  002aa240  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001f6e3  00000000  00000000  002b0b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 808001c:	b508      	push	{r3, lr}
 808001e:	4b02      	ldr	r3, [pc, #8]	; (8080028 <link_dynalib_end+0xc>)
 8080020:	681b      	ldr	r3, [r3, #0]
 8080022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080024:	9301      	str	r3, [sp, #4]
 8080026:	bd08      	pop	{r3, pc}
 8080028:	0806002c 	.word	0x0806002c

0808002c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808002c:	4809      	ldr	r0, [pc, #36]	; (8080054 <module_user_pre_init+0x28>)
 808002e:	490a      	ldr	r1, [pc, #40]	; (8080058 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080030:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080032:	4288      	cmp	r0, r1
 8080034:	d005      	beq.n	8080042 <module_user_pre_init+0x16>
 8080036:	4a09      	ldr	r2, [pc, #36]	; (808005c <module_user_pre_init+0x30>)
 8080038:	4282      	cmp	r2, r0
 808003a:	d002      	beq.n	8080042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f004 f804 	bl	808404a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080042:	4807      	ldr	r0, [pc, #28]	; (8080060 <module_user_pre_init+0x34>)
 8080044:	4a07      	ldr	r2, [pc, #28]	; (8080064 <module_user_pre_init+0x38>)
 8080046:	2100      	movs	r1, #0
 8080048:	1a12      	subs	r2, r2, r0
 808004a:	f004 f80c 	bl	8084066 <memset>
    return &link_heap_start;
}
 808004e:	4806      	ldr	r0, [pc, #24]	; (8080068 <module_user_pre_init+0x3c>)
 8080050:	bd08      	pop	{r3, pc}
 8080052:	bf00      	nop
 8080054:	20000000 	.word	0x20000000
 8080058:	08084948 	.word	0x08084948
 808005c:	20000084 	.word	0x20000084
 8080060:	20000088 	.word	0x20000088
 8080064:	200006d9 	.word	0x200006d9
 8080068:	200006d9 	.word	0x200006d9

0808006c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808006c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808006e:	f002 fedf 	bl	8082e30 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080072:	2500      	movs	r5, #0
 8080074:	4e05      	ldr	r6, [pc, #20]	; (808008c <module_user_init+0x20>)
 8080076:	4c06      	ldr	r4, [pc, #24]	; (8080090 <module_user_init+0x24>)
 8080078:	1ba4      	subs	r4, r4, r6
 808007a:	08a4      	lsrs	r4, r4, #2
 808007c:	42a5      	cmp	r5, r4
 808007e:	d100      	bne.n	8080082 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080082:	f856 3b04 	ldr.w	r3, [r6], #4
 8080086:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080088:	3501      	adds	r5, #1
 808008a:	e7f7      	b.n	808007c <module_user_init+0x10>
 808008c:	08084904 	.word	0x08084904
 8080090:	08084924 	.word	0x08084924

08080094 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080094:	f000 bcae 	b.w	80809f4 <setup>

08080098 <module_user_loop>:
}

void module_user_loop() {
 8080098:	b508      	push	{r3, lr}
    loop();
 808009a:	f000 ffa5 	bl	8080fe8 <loop>
    _post_loop();
}
 808009e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800a2:	f002 be7d 	b.w	8082da0 <_post_loop>

080800a6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800a6:	f001 bba3 	b.w	80817f0 <malloc>

080800aa <_Znaj>:
 80800aa:	f001 bba1 	b.w	80817f0 <malloc>

080800ae <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800ae:	f001 bba7 	b.w	8081800 <free>

080800b2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800b2:	7800      	ldrb	r0, [r0, #0]
 80800b4:	fab0 f080 	clz	r0, r0
 80800b8:	0940      	lsrs	r0, r0, #5
 80800ba:	4770      	bx	lr

080800bc <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800bc:	2301      	movs	r3, #1
 80800be:	7003      	strb	r3, [r0, #0]
 80800c0:	4770      	bx	lr

080800c2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800c2:	6803      	ldr	r3, [r0, #0]
 80800c4:	b2c9      	uxtb	r1, r1
 80800c6:	689b      	ldr	r3, [r3, #8]
 80800c8:	4718      	bx	r3

080800ca <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800ca:	2200      	movs	r2, #0
 80800cc:	7042      	strb	r2, [r0, #1]
}
 80800ce:	4770      	bx	lr

080800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800d0:	b570      	push	{r4, r5, r6, lr}
 80800d2:	4606      	mov	r6, r0
 80800d4:	460c      	mov	r4, r1
 80800d6:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800d8:	f002 ff8e 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 80800dc:	7831      	ldrb	r1, [r6, #0]
 80800de:	f002 f925 	bl	808232c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800e2:	f002 ff89 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 80800e6:	0a21      	lsrs	r1, r4, #8
 80800e8:	f7ff ffeb 	bl	80800c2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 80800ec:	f002 ff84 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 80800f0:	b2e1      	uxtb	r1, r4
 80800f2:	f7ff ffe6 	bl	80800c2 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 80800f6:	f002 ff7f 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 80800fa:	6803      	ldr	r3, [r0, #0]
 80800fc:	4629      	mov	r1, r5
 80800fe:	689b      	ldr	r3, [r3, #8]
 8080100:	4798      	blx	r3
  Wire.endTransmission();
 8080102:	f002 ff79 	bl	8082ff8 <_Z19__fetch_global_Wirev>
}
 8080106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 808010a:	f002 b932 	b.w	8082372 <_ZN7TwoWire15endTransmissionEv>

0808010e <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 808010e:	b538      	push	{r3, r4, r5, lr}
 8080110:	4604      	mov	r4, r0
 8080112:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 8080114:	f002 ff70 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 8080118:	7821      	ldrb	r1, [r4, #0]
 808011a:	f002 f907 	bl	808232c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 808011e:	f002 ff6b 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 8080122:	0a29      	lsrs	r1, r5, #8
 8080124:	f7ff ffcd 	bl	80800c2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 8080128:	f002 ff66 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 808012c:	b2e9      	uxtb	r1, r5
 808012e:	f7ff ffc8 	bl	80800c2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080132:	f002 ff61 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 8080136:	f002 f91c 	bl	8082372 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 808013a:	f002 ff5d 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 808013e:	2201      	movs	r2, #1
 8080140:	7821      	ldrb	r1, [r4, #0]
 8080142:	f002 f8f0 	bl	8082326 <_ZN7TwoWire11requestFromEhj>

  return Wire.read();
 8080146:	f002 ff57 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 808014a:	6803      	ldr	r3, [r0, #0]
 808014c:	695b      	ldr	r3, [r3, #20]
 808014e:	4798      	blx	r3
}
 8080150:	b2c0      	uxtb	r0, r0
 8080152:	bd38      	pop	{r3, r4, r5, pc}

08080154 <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>:
                  Product ID fields (bytes 7..0). Should be 0x510 for
                  the MB85RC256V.
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::getDeviceID(uint16_t *manufacturerID, uint16_t *productID)
{
 8080154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080156:	4604      	mov	r4, r0
 8080158:	4616      	mov	r6, r2
 808015a:	460f      	mov	r7, r1
  uint8_t a[3] = { 0, 0, 0 };
  uint8_t results;

  Wire.beginTransmission(MB85RC_SLAVE_ID >> 1);
 808015c:	f002 ff4c 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 8080160:	217c      	movs	r1, #124	; 0x7c
 8080162:	f002 f8e7 	bl	8082334 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(i2c_addr << 1);
 8080166:	f002 ff47 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 808016a:	7821      	ldrb	r1, [r4, #0]
 808016c:	0049      	lsls	r1, r1, #1
 808016e:	f7ff ffa8 	bl	80800c2 <_ZN7TwoWire5writeEi>
  results = Wire.endTransmission(false);
 8080172:	f002 ff41 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 8080176:	2100      	movs	r1, #0
 8080178:	f002 f8f7 	bl	808236a <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MB85RC_SLAVE_ID >> 1, 3);
 808017c:	f002 ff3c 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 8080180:	2203      	movs	r2, #3
 8080182:	217c      	movs	r1, #124	; 0x7c
 8080184:	f002 f8cf 	bl	8082326 <_ZN7TwoWire11requestFromEhj>
  a[0] = Wire.read();
 8080188:	f002 ff36 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 808018c:	6803      	ldr	r3, [r0, #0]
 808018e:	695b      	ldr	r3, [r3, #20]
 8080190:	4798      	blx	r3
 8080192:	4605      	mov	r5, r0
  a[1] = Wire.read();
 8080194:	f002 ff30 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 8080198:	6803      	ldr	r3, [r0, #0]
  a[2] = Wire.read();

  /* Shift values to separate manuf and prod IDs */
  /* See p.10 of http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RC256V-DS501-00017-3v0-E.pdf */
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 808019a:	b2ed      	uxtb	r5, r5
  a[1] = Wire.read();
 808019c:	695b      	ldr	r3, [r3, #20]
 808019e:	4798      	blx	r3
 80801a0:	4604      	mov	r4, r0
  a[2] = Wire.read();
 80801a2:	f002 ff29 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 80801a6:	6803      	ldr	r3, [r0, #0]
 80801a8:	695b      	ldr	r3, [r3, #20]
 80801aa:	4798      	blx	r3
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801ac:	f3c4 1303 	ubfx	r3, r4, #4, #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801b0:	0224      	lsls	r4, r4, #8
 80801b2:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80801b6:	b2c0      	uxtb	r0, r0
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801b8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801bc:	4404      	add	r4, r0
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801be:	803d      	strh	r5, [r7, #0]
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801c0:	8034      	strh	r4, [r6, #0]
}
 80801c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080801c4 <_ZN17Adafruit_FRAM_I2C5beginEh>:
{
 80801c4:	b513      	push	{r0, r1, r4, lr}
 80801c6:	4604      	mov	r4, r0
  i2c_addr = addr;
 80801c8:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80801ca:	f002 ff15 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 80801ce:	f002 f87b 	bl	80822c8 <_ZN7TwoWire5beginEv>
  getDeviceID(&manufID, &prodID);
 80801d2:	4620      	mov	r0, r4
 80801d4:	f10d 0206 	add.w	r2, sp, #6
 80801d8:	a901      	add	r1, sp, #4
 80801da:	f7ff ffbb 	bl	8080154 <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>
  if (manufID != 0x00A)
 80801de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80801e2:	2b0a      	cmp	r3, #10
 80801e4:	d108      	bne.n	80801f8 <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  if (prodID != 0x510)
 80801e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80801ea:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 80801ee:	d103      	bne.n	80801f8 <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  _framInitialised = true;
 80801f0:	2001      	movs	r0, #1
 80801f2:	7060      	strb	r0, [r4, #1]
}
 80801f4:	b002      	add	sp, #8
 80801f6:	bd10      	pop	{r4, pc}
    return false;
 80801f8:	2000      	movs	r0, #0
 80801fa:	e7fb      	b.n	80801f4 <_ZN17Adafruit_FRAM_I2C5beginEh+0x30>

080801fc <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
 80801fc:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80801fe:	4904      	ldr	r1, [pc, #16]	; (8080210 <_Z7sendNow6String+0x14>)
 8080200:	f002 fab2 	bl	8082768 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080204:	b118      	cbz	r0, 808020e <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 8080206:	2205      	movs	r2, #5
    return 1;
 8080208:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 808020a:	4b02      	ldr	r3, [pc, #8]	; (8080214 <_Z7sendNow6String+0x18>)
 808020c:	701a      	strb	r2, [r3, #0]
  }
  else return 0;
}
 808020e:	bd08      	pop	{r3, pc}
 8080210:	08084390 	.word	0x08084390
 8080214:	200000e0 	.word	0x200000e0

08080218 <_Z11watchdogISRv>:
{
 8080218:	b508      	push	{r3, lr}
  if (pettingEnabled) {
 808021a:	4b07      	ldr	r3, [pc, #28]	; (8080238 <_Z11watchdogISRv+0x20>)
 808021c:	781b      	ldrb	r3, [r3, #0]
 808021e:	b14b      	cbz	r3, 8080234 <_Z11watchdogISRv+0x1c>
    digitalWrite(donePin, HIGH);                              // Pet the watchdog
 8080220:	2101      	movs	r1, #1
 8080222:	2006      	movs	r0, #6
 8080224:	f002 fe91 	bl	8082f4a <digitalWrite>
}
 8080228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(donePin, LOW);
 808022c:	2100      	movs	r1, #0
 808022e:	2006      	movs	r0, #6
 8080230:	f002 be8b 	b.w	8082f4a <digitalWrite>
}
 8080234:	bd08      	pop	{r3, pc}
 8080236:	bf00      	nop
 8080238:	20000004 	.word	0x20000004

0808023c <_Z11pumpControl6String>:
{
 808023c:	b508      	push	{r3, lr}
 808023e:	490d      	ldr	r1, [pc, #52]	; (8080274 <_Z11pumpControl6String+0x38>)
 8080240:	f002 fa92 	bl	8082768 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080244:	b1a0      	cbz	r0, 8080270 <_Z11pumpControl6String+0x34>
    digitalWrite(control0,HIGH);
 8080246:	2101      	movs	r1, #1
 8080248:	2000      	movs	r0, #0
 808024a:	f002 fe7e 	bl	8082f4a <digitalWrite>
    digitalWrite(blueLED,HIGH);
 808024e:	2101      	movs	r1, #1
 8080250:	2007      	movs	r0, #7
 8080252:	f002 fe7a 	bl	8082f4a <digitalWrite>
    delay(10000);
 8080256:	f242 7010 	movw	r0, #10000	; 0x2710
 808025a:	f001 fb15 	bl	8081888 <delay>
    digitalWrite(control0,LOW);
 808025e:	2100      	movs	r1, #0
 8080260:	4608      	mov	r0, r1
 8080262:	f002 fe72 	bl	8082f4a <digitalWrite>
    digitalWrite(blueLED,LOW);
 8080266:	2007      	movs	r0, #7
 8080268:	2100      	movs	r1, #0
 808026a:	f002 fe6e 	bl	8082f4a <digitalWrite>
 808026e:	2001      	movs	r0, #1
}
 8080270:	bd08      	pop	{r3, pc}
 8080272:	bf00      	nop
 8080274:	08084390 	.word	0x08084390

08080278 <_Z12hardResetNow6String>:
{
 8080278:	b508      	push	{r3, lr}
 808027a:	4905      	ldr	r1, [pc, #20]	; (8080290 <_Z12hardResetNow6String+0x18>)
 808027c:	f002 fa74 	bl	8082768 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080280:	b120      	cbz	r0, 808028c <_Z12hardResetNow6String+0x14>
    digitalWrite(powerCycle,HIGH);          // This will cut all power to the Electron AND the carrir board
 8080282:	200f      	movs	r0, #15
 8080284:	2101      	movs	r1, #1
 8080286:	f002 fe60 	bl	8082f4a <digitalWrite>
 808028a:	2001      	movs	r0, #1
}
 808028c:	bd08      	pop	{r3, pc}
 808028e:	bf00      	nop
 8080290:	08084390 	.word	0x08084390

08080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 8080294:	b513      	push	{r0, r1, r4, lr}
 8080296:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8080298:	4b04      	ldr	r3, [pc, #16]	; (80802ac <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 808029a:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808029c:	f88d 3000 	strb.w	r3, [sp]
 80802a0:	233c      	movs	r3, #60	; 0x3c
 80802a2:	f001 fdd9 	bl	8081e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80802a6:	4620      	mov	r0, r4
 80802a8:	b002      	add	sp, #8
 80802aa:	bd10      	pop	{r4, pc}
 80802ac:	200000a0 	.word	0x200000a0

080802b0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80802b0:	2200      	movs	r2, #0
 80802b2:	6840      	ldr	r0, [r0, #4]
 80802b4:	4611      	mov	r1, r2
 80802b6:	f001 ba53 	b.w	8081760 <network_ready>
	...

080802bc <_Z9FRAMread8j>:

// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    result = fram.read8(address);
 80802bc:	b281      	uxth	r1, r0
 80802be:	4801      	ldr	r0, [pc, #4]	; (80802c4 <_Z9FRAMread8j+0x8>)
 80802c0:	f7ff bf25 	b.w	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
 80802c4:	200000b9 	.word	0x200000b9

080802c8 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
 80802c8:	460a      	mov	r2, r1
    fram.write8(address,value);
 80802ca:	b281      	uxth	r1, r0
 80802cc:	4801      	ldr	r0, [pc, #4]	; (80802d4 <_Z10FRAMwrite8jh+0xc>)
 80802ce:	f7ff beff 	b.w	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80802d2:	bf00      	nop
 80802d4:	200000b9 	.word	0x200000b9

080802d8 <_Z10FRAMread16j>:
}

int FRAMread16(unsigned int address)
{
 80802d8:	b570      	push	{r4, r5, r6, lr}
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
 80802da:	4e07      	ldr	r6, [pc, #28]	; (80802f8 <_Z10FRAMread16j+0x20>)
 80802dc:	b284      	uxth	r4, r0
 80802de:	4621      	mov	r1, r4
 80802e0:	4630      	mov	r0, r6
 80802e2:	f7ff ff14 	bl	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 1);
 80802e6:	1c61      	adds	r1, r4, #1
    two = fram.read8(address);
 80802e8:	4605      	mov	r5, r0
    one = fram.read8(address + 1);
 80802ea:	b289      	uxth	r1, r1
 80802ec:	4630      	mov	r0, r6
 80802ee:	f7ff ff0e 	bl	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((two << 0) & 0xFF) + ((one << 8) & 0xFFFF);
}
 80802f2:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 80802f6:	bd70      	pop	{r4, r5, r6, pc}
 80802f8:	200000b9 	.word	0x200000b9

080802fc <_Z11FRAMwrite16ji>:

void FRAMwrite16(unsigned int address, int value)   // Write 16 bits to FRAM
{
 80802fc:	b570      	push	{r4, r5, r6, lr}
 80802fe:	460d      	mov	r5, r1
    //Decomposition from a long to 2 bytes by using bitshift.
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
 8080300:	4e07      	ldr	r6, [pc, #28]	; (8080320 <_Z11FRAMwrite16ji+0x24>)
 8080302:	b284      	uxth	r4, r0
 8080304:	b2ca      	uxtb	r2, r1
 8080306:	4630      	mov	r0, r6
 8080308:	4621      	mov	r1, r4
    fram.write8(address + 1, one);
 808030a:	3401      	adds	r4, #1
    fram.write8(address, two);
 808030c:	f7ff fee0 	bl	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, one);
 8080310:	4630      	mov	r0, r6
 8080312:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8080316:	b2a1      	uxth	r1, r4
}
 8080318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fram.write8(address + 1, one);
 808031c:	f7ff bed8 	b.w	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 8080320:	200000b9 	.word	0x200000b9

08080324 <_Z11resetCounts6String>:
{
 8080324:	b508      	push	{r3, lr}
 8080326:	490a      	ldr	r1, [pc, #40]	; (8080350 <_Z11resetCounts6String+0x2c>)
 8080328:	f002 fa1e 	bl	8082768 <_ZNK6String6equalsEPKc>
  if (command == "1")
 808032c:	b170      	cbz	r0, 808034c <_Z11resetCounts6String+0x28>
    FRAMwrite8(FRAM::resetCountAddr,0);          // If so, store incremented number - watchdog must have done This
 808032e:	2100      	movs	r1, #0
 8080330:	2003      	movs	r0, #3
 8080332:	f7ff ffc9 	bl	80802c8 <_Z10FRAMwrite8jh>
    resetCount = 0;
 8080336:	2100      	movs	r1, #0
 8080338:	4b06      	ldr	r3, [pc, #24]	; (8080354 <_Z11resetCounts6String+0x30>)
    FRAMwrite16(FRAM::dailyPumpMinutesAddr,0);
 808033a:	200a      	movs	r0, #10
    resetCount = 0;
 808033c:	6019      	str	r1, [r3, #0]
    dataInFlight = false;
 808033e:	4b06      	ldr	r3, [pc, #24]	; (8080358 <_Z11resetCounts6String+0x34>)
 8080340:	7019      	strb	r1, [r3, #0]
    dailyPumpingMins = 0;
 8080342:	4b06      	ldr	r3, [pc, #24]	; (808035c <_Z11resetCounts6String+0x38>)
 8080344:	6019      	str	r1, [r3, #0]
    FRAMwrite16(FRAM::dailyPumpMinutesAddr,0);
 8080346:	f7ff ffd9 	bl	80802fc <_Z11FRAMwrite16ji>
 808034a:	2001      	movs	r0, #1
}
 808034c:	bd08      	pop	{r3, pc}
 808034e:	bf00      	nop
 8080350:	08084390 	.word	0x08084390
 8080354:	200000d8 	.word	0x200000d8
 8080358:	200000b8 	.word	0x200000b8
 808035c:	200000b4 	.word	0x200000b4

08080360 <_Z10FRAMread32m>:

unsigned long FRAMread32(unsigned long address)
{
 8080360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
 8080364:	4e0f      	ldr	r6, [pc, #60]	; (80803a4 <_Z10FRAMread32m+0x44>)
 8080366:	b284      	uxth	r4, r0
 8080368:	4621      	mov	r1, r4
 808036a:	4630      	mov	r0, r6
 808036c:	f7ff fecf 	bl	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
    three = fram.read8(address + 1);
 8080370:	1c61      	adds	r1, r4, #1
    four = fram.read8(address);
 8080372:	4605      	mov	r5, r0
    three = fram.read8(address + 1);
 8080374:	b289      	uxth	r1, r1
 8080376:	4630      	mov	r0, r6
 8080378:	f7ff fec9 	bl	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
    two = fram.read8(address + 2);
 808037c:	1ca1      	adds	r1, r4, #2
    three = fram.read8(address + 1);
 808037e:	4680      	mov	r8, r0
    two = fram.read8(address + 2);
 8080380:	b289      	uxth	r1, r1
 8080382:	4630      	mov	r0, r6
 8080384:	f7ff fec3 	bl	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 3);
 8080388:	1ce1      	adds	r1, r4, #3
    two = fram.read8(address + 2);
 808038a:	4607      	mov	r7, r0
    one = fram.read8(address + 3);
 808038c:	b289      	uxth	r1, r1
 808038e:	4630      	mov	r0, r6
 8080390:	f7ff febd 	bl	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
 8080394:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8080398:	eb05 4507 	add.w	r5, r5, r7, lsl #16
}
 808039c:	eb05 6000 	add.w	r0, r5, r0, lsl #24
 80803a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80803a4:	200000b9 	.word	0x200000b9

080803a8 <_Z11FRAMwrite32im>:

void FRAMwrite32(int address, unsigned long value)  // Write 32 bits to FRAM
{
 80803a8:	b570      	push	{r4, r5, r6, lr}
 80803aa:	460d      	mov	r5, r1
    uint8_t four = (value & 0xFF);
    uint8_t three = ((value >> 8) & 0xFF);
    uint8_t two = ((value >> 16) & 0xFF);
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
 80803ac:	4e0e      	ldr	r6, [pc, #56]	; (80803e8 <_Z11FRAMwrite32im+0x40>)
 80803ae:	b284      	uxth	r4, r0
 80803b0:	b2ca      	uxtb	r2, r1
 80803b2:	4630      	mov	r0, r6
 80803b4:	4621      	mov	r1, r4
 80803b6:	f7ff fe8b 	bl	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, three);
 80803ba:	1c61      	adds	r1, r4, #1
 80803bc:	4630      	mov	r0, r6
 80803be:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80803c2:	b289      	uxth	r1, r1
 80803c4:	f7ff fe84 	bl	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 2, two);
 80803c8:	1ca1      	adds	r1, r4, #2
 80803ca:	4630      	mov	r0, r6
 80803cc:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80803d0:	b289      	uxth	r1, r1
    fram.write8(address + 3, one);
 80803d2:	3403      	adds	r4, #3
    fram.write8(address + 2, two);
 80803d4:	f7ff fe7c 	bl	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 3, one);
 80803d8:	4630      	mov	r0, r6
 80803da:	0e2a      	lsrs	r2, r5, #24
 80803dc:	b2a1      	uxth	r1, r4
}
 80803de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fram.write8(address + 3, one);
 80803e2:	f7ff be75 	b.w	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80803e6:	bf00      	nop
 80803e8:	200000b9 	.word	0x200000b9

080803ec <_Z17getSignalStrengthv>:
void getSignalStrength() {
 80803ec:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 80803ee:	4d17      	ldr	r5, [pc, #92]	; (808044c <_Z17getSignalStrengthv+0x60>)
void getSignalStrength() {
 80803f0:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 80803f2:	ac04      	add	r4, sp, #16
 80803f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80803f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80803f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80803fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80803fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8080400:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
 8080404:	4912      	ldr	r1, [pc, #72]	; (8080450 <_Z17getSignalStrengthv+0x64>)
 8080406:	a80e      	add	r0, sp, #56	; 0x38
 8080408:	f001 faa2 	bl	8081950 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
 808040c:	a80e      	add	r0, sp, #56	; 0x38
 808040e:	f001 faf2 	bl	80819f6 <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080412:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
 8080414:	a80e      	add	r0, sp, #56	; 0x38
 8080416:	f001 fb0d 	bl	8081a34 <_ZNK14CellularSignal11getStrengthEv>
 808041a:	4605      	mov	r5, r0
  float qualityPercentage = sig.getQuality();
 808041c:	a80e      	add	r0, sp, #56	; 0x38
 808041e:	f001 fb33 	bl	8081a88 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080422:	ab18      	add	r3, sp, #96	; 0x60
 8080424:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8080428:	f002 ffa8 	bl	808337c <__aeabi_f2d>
 808042c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080430:	4628      	mov	r0, r5
 8080432:	f002 ffa3 	bl	808337c <__aeabi_f2d>
 8080436:	e9cd 0100 	strd	r0, r1, [sp]
 808043a:	4a06      	ldr	r2, [pc, #24]	; (8080454 <_Z17getSignalStrengthv+0x68>)
 808043c:	2111      	movs	r1, #17
 808043e:	f854 3c50 	ldr.w	r3, [r4, #-80]
 8080442:	4805      	ldr	r0, [pc, #20]	; (8080458 <_Z17getSignalStrengthv+0x6c>)
 8080444:	f001 f9f4 	bl	8081830 <snprintf>
}
 8080448:	b019      	add	sp, #100	; 0x64
 808044a:	bd30      	pop	{r4, r5, pc}
 808044c:	080845ec 	.word	0x080845ec
 8080450:	200000f8 	.word	0x200000f8
 8080454:	080843b2 	.word	0x080843b2
 8080458:	40024000 	.word	0x40024000

0808045c <_Z17connectToParticlev>:
{
 808045c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!Cellular.ready())
 8080460:	4d2f      	ldr	r5, [pc, #188]	; (8080520 <_Z17connectToParticlev+0xc4>)
 8080462:	4628      	mov	r0, r5
 8080464:	f7ff ff24 	bl	80802b0 <_ZN5spark13CellularClass5readyEv>
 8080468:	4604      	mov	r4, r0
 808046a:	b308      	cbz	r0, 80804b0 <_Z17connectToParticlev+0x54>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808046c:	f000 ff48 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080470:	4d2c      	ldr	r5, [pc, #176]	; (8080524 <_Z17connectToParticlev+0xc8>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080472:	f04f 0a00 	mov.w	sl, #0
 8080476:	6028      	str	r0, [r5, #0]
    		spark_process();
 8080478:	f001 f90a 	bl	8081690 <spark_process>
        spark_cloud_flag_connect();
 808047c:	f001 f910 	bl	80816a0 <spark_cloud_flag_connect>
 8080480:	2000      	movs	r0, #0
 8080482:	f000 ff4d 	bl	8081320 <hal_timer_millis>
        while (_while() && !_condition()) {
 8080486:	f247 582f 	movw	r8, #29999	; 0x752f
        return hal_timer_millis(nullptr);
 808048a:	4604      	mov	r4, r0
        while (_while() && !_condition()) {
 808048c:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 8080490:	2000      	movs	r0, #0
 8080492:	f000 ff45 	bl	8081320 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080496:	1b06      	subs	r6, r0, r4
 8080498:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
 808049c:	45b9      	cmp	r9, r7
 808049e:	bf08      	it	eq
 80804a0:	45b0      	cmpeq	r8, r6
 80804a2:	d332      	bcc.n	808050a <_Z17connectToParticlev+0xae>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80804a4:	f001 f904 	bl	80816b0 <spark_cloud_flag_connected>
 80804a8:	bb78      	cbnz	r0, 808050a <_Z17connectToParticlev+0xae>
            spark_process();
 80804aa:	f001 f8f1 	bl	8081690 <spark_process>
        while (_while() && !_condition()) {
 80804ae:	e7ef      	b.n	8080490 <_Z17connectToParticlev+0x34>
        network_on(*this, 0, 0, NULL);
 80804b0:	4603      	mov	r3, r0
 80804b2:	4602      	mov	r2, r0
 80804b4:	4601      	mov	r1, r0
 80804b6:	6868      	ldr	r0, [r5, #4]
 80804b8:	f001 f95a 	bl	8081770 <network_on>
        network_connect(*this, flags, 0, NULL);
 80804bc:	4623      	mov	r3, r4
 80804be:	4622      	mov	r2, r4
 80804c0:	4621      	mov	r1, r4
 80804c2:	6868      	ldr	r0, [r5, #4]
 80804c4:	f001 f934 	bl	8081730 <network_connect>
        return hal_timer_millis(nullptr);
 80804c8:	4620      	mov	r0, r4
 80804ca:	f000 ff29 	bl	8081320 <hal_timer_millis>
 80804ce:	4682      	mov	sl, r0
 80804d0:	2000      	movs	r0, #0
 80804d2:	f000 ff25 	bl	8081320 <hal_timer_millis>
        while (_while() && !_condition()) {
 80804d6:	2300      	movs	r3, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80804d8:	ebb0 080a 	subs.w	r8, r0, sl
        while (_while() && !_condition()) {
 80804dc:	4a12      	ldr	r2, [pc, #72]	; (8080528 <_Z17connectToParticlev+0xcc>)
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80804de:	eb61 0904 	sbc.w	r9, r1, r4
        while (_while() && !_condition()) {
 80804e2:	454b      	cmp	r3, r9
 80804e4:	bf08      	it	eq
 80804e6:	4542      	cmpeq	r2, r8
 80804e8:	d306      	bcc.n	80804f8 <_Z17connectToParticlev+0x9c>
    if(!waitFor(Cellular.ready,90000)) return false;         // Connect to cellular - give it 90 seconds
 80804ea:	4628      	mov	r0, r5
 80804ec:	f7ff fee0 	bl	80802b0 <_ZN5spark13CellularClass5readyEv>
 80804f0:	b910      	cbnz	r0, 80804f8 <_Z17connectToParticlev+0x9c>
            spark_process();
 80804f2:	f001 f8cd 	bl	8081690 <spark_process>
        while (_while() && !_condition()) {
 80804f6:	e7eb      	b.n	80804d0 <_Z17connectToParticlev+0x74>
 80804f8:	4809      	ldr	r0, [pc, #36]	; (8080520 <_Z17connectToParticlev+0xc4>)
 80804fa:	f7ff fed9 	bl	80802b0 <_ZN5spark13CellularClass5readyEv>
 80804fe:	2800      	cmp	r0, #0
 8080500:	d1b4      	bne.n	808046c <_Z17connectToParticlev+0x10>
 8080502:	2400      	movs	r4, #0
}
 8080504:	4620      	mov	r0, r4
 8080506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808050a:	f001 f8d1 	bl	80816b0 <spark_cloud_flag_connected>
  if(!waitFor(Particle.connected,30000)) return false;     // Connect to Particle - give it 30 seconds
 808050e:	4604      	mov	r4, r0
 8080510:	2800      	cmp	r0, #0
 8080512:	d0f6      	beq.n	8080502 <_Z17connectToParticlev+0xa6>
		return HAL_Timer_Get_Milli_Seconds();
 8080514:	f000 fef4 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8080518:	6028      	str	r0, [r5, #0]
    		spark_process();
 808051a:	f001 f8b9 	bl	8081690 <spark_process>
    }
 808051e:	e7f1      	b.n	8080504 <_Z17connectToParticlev+0xa8>
 8080520:	200000f8 	.word	0x200000f8
 8080524:	20000604 	.word	0x20000604
 8080528:	00015f8f 	.word	0x00015f8f

0808052c <_Z12notConnectedv>:
bool notConnected() {
 808052c:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808052e:	f001 f8bf 	bl	80816b0 <spark_cloud_flag_connected>
  return !Particle.connected();                             // This is a requirement to use waitFor
 8080532:	f080 0001 	eor.w	r0, r0, #1
}
 8080536:	b2c0      	uxtb	r0, r0
 8080538:	bd08      	pop	{r3, pc}
	...

0808053c <_Z22disconnectFromParticlev>:
{
 808053c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        clearSession_(clearSession) {
 8080540:	2400      	movs	r4, #0
 8080542:	b085      	sub	sp, #20
  Particle.disconnect();                                   // Disconnect from Particle in prep for sleep
 8080544:	a801      	add	r0, sp, #4
 8080546:	e9cd 4401 	strd	r4, r4, [sp, #4]
 808054a:	f8ad 400c 	strh.w	r4, [sp, #12]
 808054e:	f001 fb6f 	bl	8081c30 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
 8080552:	4620      	mov	r0, r4
 8080554:	f000 fee4 	bl	8081320 <hal_timer_millis>
        while (_while() && !_condition()) {
 8080558:	f242 780f 	movw	r8, #9999	; 0x270f
        return hal_timer_millis(nullptr);
 808055c:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
 808055e:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 8080562:	2000      	movs	r0, #0
 8080564:	f000 fedc 	bl	8081320 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080568:	1b46      	subs	r6, r0, r5
 808056a:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
 808056e:	45b9      	cmp	r9, r7
 8080570:	bf08      	it	eq
 8080572:	45b0      	cmpeq	r8, r6
 8080574:	d305      	bcc.n	8080582 <_Z22disconnectFromParticlev+0x46>
  waitFor(notConnected,10000);
 8080576:	f7ff ffd9 	bl	808052c <_Z12notConnectedv>
 808057a:	b910      	cbnz	r0, 8080582 <_Z22disconnectFromParticlev+0x46>
            spark_process();
 808057c:	f001 f888 	bl	8081690 <spark_process>
        while (_while() && !_condition()) {
 8080580:	e7ef      	b.n	8080562 <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080582:	4c0b      	ldr	r4, [pc, #44]	; (80805b0 <_Z22disconnectFromParticlev+0x74>)
 8080584:	f7ff ffd2 	bl	808052c <_Z12notConnectedv>
 8080588:	2200      	movs	r2, #0
 808058a:	2102      	movs	r1, #2
 808058c:	6860      	ldr	r0, [r4, #4]
 808058e:	f001 f8df 	bl	8081750 <network_disconnect>
  delay(3000);
 8080592:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8080596:	f001 f977 	bl	8081888 <delay>
        network_off(*this, 0, 0, NULL);
 808059a:	2300      	movs	r3, #0
 808059c:	6860      	ldr	r0, [r4, #4]
 808059e:	461a      	mov	r2, r3
 80805a0:	4619      	mov	r1, r3
 80805a2:	f001 f8ed 	bl	8081780 <network_off>
}
 80805a6:	2001      	movs	r0, #1
 80805a8:	b005      	add	sp, #20
 80805aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80805ae:	bf00      	nop
 80805b0:	200000f8 	.word	0x200000f8

080805b4 <_Z12getLostPowerv>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 80805b4:	2200      	movs	r2, #0
  Particle.publish("Time",Time.timeStr(t));
  lastPublish = millis();
  return 1;
}

bool getLostPower() {
 80805b6:	b510      	push	{r4, lr}
 80805b8:	b086      	sub	sp, #24
    const int ret = diag_get_source(id, &src, nullptr);
 80805ba:	2018      	movs	r0, #24
 80805bc:	a902      	add	r1, sp, #8
    const diag_source* src = nullptr;
 80805be:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
 80805c0:	f000 ffee 	bl	80815a0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 80805c4:	b9b8      	cbnz	r0, 80805f6 <_Z12getLostPowerv+0x42>
        return ret;
    }
    return get(src, val);
 80805c6:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
 80805c8:	b10c      	cbz	r4, 80805ce <_Z12getLostPowerv+0x1a>
 80805ca:	6923      	ldr	r3, [r4, #16]
 80805cc:	b923      	cbnz	r3, 80805d8 <_Z12getLostPowerv+0x24>
 80805ce:	2100      	movs	r1, #0
 80805d0:	200a      	movs	r0, #10
 80805d2:	4a0e      	ldr	r2, [pc, #56]	; (808060c <_Z12getLostPowerv+0x58>)
 80805d4:	f000 ffdc 	bl	8081590 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 80805d8:	2300      	movs	r3, #0
 80805da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80805de:	230c      	movs	r3, #12
 80805e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80805e4:	ab01      	add	r3, sp, #4
 80805e6:	9304      	str	r3, [sp, #16]
 80805e8:	2304      	movs	r3, #4
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 80805ea:	2101      	movs	r1, #1
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 80805ec:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 80805ee:	4620      	mov	r0, r4
 80805f0:	6923      	ldr	r3, [r4, #16]
 80805f2:	aa03      	add	r2, sp, #12
 80805f4:	4798      	blx	r3
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val);
        if (r < 0) {
 80805f6:	2800      	cmp	r0, #0
 80805f8:	db05      	blt.n	8080606 <_Z12getLostPowerv+0x52>
      POWER_SOURCE_BATTERY = 5
  } power_source_t;

  int powerSource = System.powerSource();

  if (powerSource == POWER_SOURCE_VIN) return 0;        // Return false if power is good
 80805fa:	9801      	ldr	r0, [sp, #4]
 80805fc:	3801      	subs	r0, #1
 80805fe:	bf18      	it	ne
 8080600:	2001      	movne	r0, #1
  else return 1;                                        // Return true otherwise 
}
 8080602:	b006      	add	sp, #24
 8080604:	bd10      	pop	{r4, pc}
  else return 1;                                        // Return true otherwise 
 8080606:	2001      	movs	r0, #1
 8080608:	e7fb      	b.n	8080602 <_Z12getLostPowerv+0x4e>
 808060a:	bf00      	nop
 808060c:	080812f1 	.word	0x080812f1

08080610 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
 8080610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
 8080614:	4d85      	ldr	r5, [pc, #532]	; (808082c <_Z16takeMeasurementsv+0x21c>)
  controlRegister = FRAMread8(FRAM::controlRegisterAddr);                                 // Check the control register
 8080616:	2007      	movs	r0, #7
 8080618:	f7ff fe50 	bl	80802bc <_Z9FRAMread8j>
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
 808061c:	f895 9000 	ldrb.w	r9, [r5]
  alertValueInt = int(alertValue);                                              // For reporting
 8080620:	4b83      	ldr	r3, [pc, #524]	; (8080830 <_Z16takeMeasurementsv+0x220>)
  controlRegister = FRAMread8(FRAM::controlRegisterAddr);                                 // Check the control register
 8080622:	4f84      	ldr	r7, [pc, #528]	; (8080834 <_Z16takeMeasurementsv+0x224>)
  alertValueInt = int(alertValue);                                              // For reporting
 8080624:	f8c3 9000 	str.w	r9, [r3]
  alertValue = 0b00000000;                                                      // Reset for each run through
 8080628:	2300      	movs	r3, #0
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
 808062a:	4e83      	ldr	r6, [pc, #524]	; (8080838 <_Z16takeMeasurementsv+0x228>)
  controlRegister = FRAMread8(FRAM::controlRegisterAddr);                                 // Check the control register
 808062c:	7038      	strb	r0, [r7, #0]
  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 808062e:	4883      	ldr	r0, [pc, #524]	; (808083c <_Z16takeMeasurementsv+0x22c>)
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
 8080630:	6834      	ldr	r4, [r6, #0]
  alertValue = 0b00000000;                                                      // Reset for each run through
 8080632:	702b      	strb	r3, [r5, #0]
  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080634:	f7ff fe3c 	bl	80802b0 <_ZN5spark13CellularClass5readyEv>
 8080638:	46b0      	mov	r8, r6
 808063a:	b108      	cbz	r0, 8080640 <_Z16takeMeasurementsv+0x30>
 808063c:	f7ff fed6 	bl	80803ec <_Z17getSignalStrengthv>
  stateOfCharge = int(batteryMonitor.getSoC());                                 // Percentage of full charge
 8080640:	487f      	ldr	r0, [pc, #508]	; (8080840 <_Z16takeMeasurementsv+0x230>)
 8080642:	f001 fdd9 	bl	80821f8 <_ZN9FuelGauge6getSoCEv>
 8080646:	f003 fc6f 	bl	8083f28 <__aeabi_f2iz>
 808064a:	4b7e      	ldr	r3, [pc, #504]	; (8080844 <_Z16takeMeasurementsv+0x234>)
 808064c:	4e7e      	ldr	r6, [pc, #504]	; (8080848 <_Z16takeMeasurementsv+0x238>)
 808064e:	6018      	str	r0, [r3, #0]
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080650:	4b7e      	ldr	r3, [pc, #504]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 8080652:	781a      	ldrb	r2, [r3, #0]
 8080654:	469a      	mov	sl, r3
 8080656:	f012 0f01 	tst.w	r2, #1
 808065a:	f3bf 8f5b 	dmb	ish
 808065e:	d109      	bne.n	8080674 <_Z16takeMeasurementsv+0x64>
 8080660:	4618      	mov	r0, r3
 8080662:	f7ff fd26 	bl	80800b2 <__cxa_guard_acquire>
 8080666:	b128      	cbz	r0, 8080674 <_Z16takeMeasurementsv+0x64>
 8080668:	f000 fe6a 	bl	8081340 <HAL_Pin_Map>
 808066c:	6030      	str	r0, [r6, #0]
 808066e:	4650      	mov	r0, sl
 8080670:	f7ff fd24 	bl	80800bc <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080674:	6833      	ldr	r3, [r6, #0]
 8080676:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 808067a:	f8d3 b010 	ldr.w	fp, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808067e:	f89a 3000 	ldrb.w	r3, [sl]
 8080682:	f3bf 8f5b 	dmb	ish
 8080686:	07da      	lsls	r2, r3, #31
 8080688:	d409      	bmi.n	808069e <_Z16takeMeasurementsv+0x8e>
 808068a:	4870      	ldr	r0, [pc, #448]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 808068c:	f7ff fd11 	bl	80800b2 <__cxa_guard_acquire>
 8080690:	b128      	cbz	r0, 808069e <_Z16takeMeasurementsv+0x8e>
 8080692:	f000 fe55 	bl	8081340 <HAL_Pin_Map>
 8080696:	6030      	str	r0, [r6, #0]
 8080698:	486c      	ldr	r0, [pc, #432]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 808069a:	f7ff fd0f 	bl	80800bc <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 808069e:	6833      	ldr	r3, [r6, #0]
 80806a0:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
  if (!pinReadFast(senseAC0)) alertValue = alertValue | 0b00000001;       // Set the value for alertValue - This is opposite - power is good
 80806a4:	ea13 0f0b 	tst.w	r3, fp
 80806a8:	bf02      	ittt	eq
 80806aa:	782b      	ldrbeq	r3, [r5, #0]
 80806ac:	f043 0301 	orreq.w	r3, r3, #1
 80806b0:	702b      	strbeq	r3, [r5, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80806b2:	f89a 3000 	ldrb.w	r3, [sl]
 80806b6:	f3bf 8f5b 	dmb	ish
 80806ba:	07db      	lsls	r3, r3, #31
 80806bc:	d409      	bmi.n	80806d2 <_Z16takeMeasurementsv+0xc2>
 80806be:	4863      	ldr	r0, [pc, #396]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 80806c0:	f7ff fcf7 	bl	80800b2 <__cxa_guard_acquire>
 80806c4:	b128      	cbz	r0, 80806d2 <_Z16takeMeasurementsv+0xc2>
 80806c6:	f000 fe3b 	bl	8081340 <HAL_Pin_Map>
 80806ca:	6030      	str	r0, [r6, #0]
 80806cc:	485f      	ldr	r0, [pc, #380]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 80806ce:	f7ff fcf5 	bl	80800bc <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80806d2:	6833      	ldr	r3, [r6, #0]
 80806d4:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 80806d8:	f8d3 b010 	ldr.w	fp, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80806dc:	f89a 3000 	ldrb.w	r3, [sl]
 80806e0:	f3bf 8f5b 	dmb	ish
 80806e4:	07d8      	lsls	r0, r3, #31
 80806e6:	d409      	bmi.n	80806fc <_Z16takeMeasurementsv+0xec>
 80806e8:	4858      	ldr	r0, [pc, #352]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 80806ea:	f7ff fce2 	bl	80800b2 <__cxa_guard_acquire>
 80806ee:	b128      	cbz	r0, 80806fc <_Z16takeMeasurementsv+0xec>
 80806f0:	f000 fe26 	bl	8081340 <HAL_Pin_Map>
 80806f4:	6030      	str	r0, [r6, #0]
 80806f6:	4855      	ldr	r0, [pc, #340]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 80806f8:	f7ff fce0 	bl	80800bc <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80806fc:	6833      	ldr	r3, [r6, #0]
 80806fe:	f8b3 33bc 	ldrh.w	r3, [r3, #956]	; 0x3bc
  if (!pinReadFast(senseAC1)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
 8080702:	ea13 0f0b 	tst.w	r3, fp
 8080706:	bf02      	ittt	eq
 8080708:	782b      	ldrbeq	r3, [r5, #0]
 808070a:	f043 0302 	orreq.w	r3, r3, #2
 808070e:	702b      	strbeq	r3, [r5, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080710:	f89a 3000 	ldrb.w	r3, [sl]
 8080714:	f3bf 8f5b 	dmb	ish
 8080718:	07d9      	lsls	r1, r3, #31
 808071a:	d409      	bmi.n	8080730 <_Z16takeMeasurementsv+0x120>
 808071c:	484b      	ldr	r0, [pc, #300]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 808071e:	f7ff fcc8 	bl	80800b2 <__cxa_guard_acquire>
 8080722:	b128      	cbz	r0, 8080730 <_Z16takeMeasurementsv+0x120>
 8080724:	f000 fe0c 	bl	8081340 <HAL_Pin_Map>
 8080728:	6030      	str	r0, [r6, #0]
 808072a:	4848      	ldr	r0, [pc, #288]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 808072c:	f7ff fcc6 	bl	80800bc <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080730:	6833      	ldr	r3, [r6, #0]
 8080732:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
 8080736:	f8d3 b010 	ldr.w	fp, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808073a:	f89a 3000 	ldrb.w	r3, [sl]
 808073e:	f3bf 8f5b 	dmb	ish
 8080742:	07da      	lsls	r2, r3, #31
 8080744:	d409      	bmi.n	808075a <_Z16takeMeasurementsv+0x14a>
 8080746:	4841      	ldr	r0, [pc, #260]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 8080748:	f7ff fcb3 	bl	80800b2 <__cxa_guard_acquire>
 808074c:	b128      	cbz	r0, 808075a <_Z16takeMeasurementsv+0x14a>
 808074e:	f000 fdf7 	bl	8081340 <HAL_Pin_Map>
 8080752:	6030      	str	r0, [r6, #0]
 8080754:	483d      	ldr	r0, [pc, #244]	; (808084c <_Z16takeMeasurementsv+0x23c>)
 8080756:	f7ff fcb1 	bl	80800bc <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 808075a:	6833      	ldr	r3, [r6, #0]
 808075c:	f8b3 33a0 	ldrh.w	r3, [r3, #928]	; 0x3a0
  if (!pinReadFast(senseAC2))                                                  // If the pump is on, we need to sample the current
 8080760:	ea13 0b0b 	ands.w	fp, r3, fp
 8080764:	d13f      	bne.n	80807e6 <_Z16takeMeasurementsv+0x1d6>
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
 8080766:	782b      	ldrb	r3, [r5, #0]
    pumpCurrentRaw = analogRead(currentSns1);                                // Current sensor is fairly linear from 1 to 32 Amps
 8080768:	200b      	movs	r0, #11
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
 808076a:	f043 0304 	orr.w	r3, r3, #4
 808076e:	702b      	strb	r3, [r5, #0]
    pumpCurrentRaw = analogRead(currentSns1);                                // Current sensor is fairly linear from 1 to 32 Amps
 8080770:	f002 fc04 	bl	8082f7c <analogRead>
 8080774:	4b36      	ldr	r3, [pc, #216]	; (8080850 <_Z16takeMeasurementsv+0x240>)
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 8080776:	f640 72ff 	movw	r2, #4095	; 0xfff
    pumpCurrentRaw = analogRead(currentSns1);                                // Current sensor is fairly linear from 1 to 32 Amps
 808077a:	6018      	str	r0, [r3, #0]
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 808077c:	2320      	movs	r3, #32
 808077e:	4659      	mov	r1, fp
 8080780:	9300      	str	r3, [sp, #0]
 8080782:	465b      	mov	r3, fp
 8080784:	f001 f874 	bl	8081870 <_Z3mapiiiii>
    if (pumpAmps >= lastPumpAmps + 2 || pumpAmps <= lastPumpAmps - 2) pumpAmpsSignificantChange = true;
 8080788:	1c63      	adds	r3, r4, #1
 808078a:	4298      	cmp	r0, r3
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 808078c:	f8c8 0000 	str.w	r0, [r8]
    if (pumpAmps >= lastPumpAmps + 2 || pumpAmps <= lastPumpAmps - 2) pumpAmpsSignificantChange = true;
 8080790:	dc27      	bgt.n	80807e2 <_Z16takeMeasurementsv+0x1d2>
 8080792:	3c01      	subs	r4, #1
 8080794:	42a0      	cmp	r0, r4
 8080796:	bfac      	ite	ge
 8080798:	2400      	movge	r4, #0
 808079a:	2401      	movlt	r4, #1
    if (!(controlRegister & 0b00000010)) {                                      // This is a new pumping session
 808079c:	783b      	ldrb	r3, [r7, #0]
 808079e:	079b      	lsls	r3, r3, #30
 80807a0:	d410      	bmi.n	80807c4 <_Z16takeMeasurementsv+0x1b4>
      pumpingStart = Time.now();
 80807a2:	f002 f94c 	bl	8082a3e <_ZN9TimeClass3nowEv>
 80807a6:	4602      	mov	r2, r0
 80807a8:	4601      	mov	r1, r0
 80807aa:	17c3      	asrs	r3, r0, #31
 80807ac:	4829      	ldr	r0, [pc, #164]	; (8080854 <_Z16takeMeasurementsv+0x244>)
 80807ae:	e9c0 2300 	strd	r2, r3, [r0]
      FRAMwrite32(FRAM::currentCountsTimeAddr,pumpingStart);                              // Write to FRAM in case of a reset
 80807b2:	200e      	movs	r0, #14
 80807b4:	f7ff fdf8 	bl	80803a8 <_Z11FRAMwrite32im>
      FRAMwrite8(FRAM::controlRegisterAddr,controlRegister | 0b00000010);                 // Turn on the pumping bit
 80807b8:	7839      	ldrb	r1, [r7, #0]
 80807ba:	2007      	movs	r0, #7
 80807bc:	f041 0102 	orr.w	r1, r1, #2
 80807c0:	f7ff fd82 	bl	80802c8 <_Z10FRAMwrite8jh>
  if (getLostPower()) alertValue = alertValue | 0b10000000;                      // Set the value for alertValue
 80807c4:	f7ff fef6 	bl	80805b4 <_Z12getLostPowerv>
 80807c8:	b118      	cbz	r0, 80807d2 <_Z16takeMeasurementsv+0x1c2>
 80807ca:	782b      	ldrb	r3, [r5, #0]
 80807cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80807d0:	702b      	strb	r3, [r5, #0]
  if (alertValue != lastAlertValue || pumpAmpsSignificantChange) return 1;
 80807d2:	7828      	ldrb	r0, [r5, #0]
}
 80807d4:	4548      	cmp	r0, r9
 80807d6:	bf0c      	ite	eq
 80807d8:	4620      	moveq	r0, r4
 80807da:	2001      	movne	r0, #1
 80807dc:	b003      	add	sp, #12
 80807de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pumpAmps >= lastPumpAmps + 2 || pumpAmps <= lastPumpAmps - 2) pumpAmpsSignificantChange = true;
 80807e2:	2401      	movs	r4, #1
 80807e4:	e7da      	b.n	808079c <_Z16takeMeasurementsv+0x18c>
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
 80807e6:	7839      	ldrb	r1, [r7, #0]
 80807e8:	f011 0402 	ands.w	r4, r1, #2
 80807ec:	d01b      	beq.n	8080826 <_Z16takeMeasurementsv+0x216>
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegister ^ 0b00000010);                   // It is on and I want to turn the pumping bit off with an xor
 80807ee:	f081 0102 	eor.w	r1, r1, #2
 80807f2:	2007      	movs	r0, #7
 80807f4:	f7ff fd68 	bl	80802c8 <_Z10FRAMwrite8jh>
    time_t pumpingStop = Time.now();
 80807f8:	f002 f921 	bl	8082a3e <_ZN9TimeClass3nowEv>
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);                 // Add to the total for the day
 80807fc:	4b15      	ldr	r3, [pc, #84]	; (8080854 <_Z16takeMeasurementsv+0x244>)
 80807fe:	17c1      	asrs	r1, r0, #31
 8080800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080804:	f003 fc1a 	bl	808403c <difftime>
 8080808:	2200      	movs	r2, #0
 808080a:	4b13      	ldr	r3, [pc, #76]	; (8080858 <_Z16takeMeasurementsv+0x248>)
 808080c:	f002 ff38 	bl	8083680 <__aeabi_ddiv>
 8080810:	f003 f81e 	bl	8083850 <__aeabi_d2iz>
 8080814:	4b11      	ldr	r3, [pc, #68]	; (808085c <_Z16takeMeasurementsv+0x24c>)
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
 8080816:	2400      	movs	r4, #0
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);                 // Add to the total for the day
 8080818:	6819      	ldr	r1, [r3, #0]
 808081a:	4401      	add	r1, r0
    FRAMwrite16(FRAM::dailyPumpMinutesAddr,dailyPumpingMins);                             // Store it in FRAM in case of a reset
 808081c:	200a      	movs	r0, #10
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);                 // Add to the total for the day
 808081e:	6019      	str	r1, [r3, #0]
    FRAMwrite16(FRAM::dailyPumpMinutesAddr,dailyPumpingMins);                             // Store it in FRAM in case of a reset
 8080820:	f7ff fd6c 	bl	80802fc <_Z11FRAMwrite16ji>
 8080824:	e7ce      	b.n	80807c4 <_Z16takeMeasurementsv+0x1b4>
  else pumpAmps = 0;
 8080826:	f8c8 4000 	str.w	r4, [r8]
 808082a:	e7cb      	b.n	80807c4 <_Z16takeMeasurementsv+0x1b4>
 808082c:	200000a2 	.word	0x200000a2
 8080830:	200000a4 	.word	0x200000a4
 8080834:	200000b0 	.word	0x200000b0
 8080838:	200000c8 	.word	0x200000c8
 808083c:	200000f8 	.word	0x200000f8
 8080840:	200000a8 	.word	0x200000a8
 8080844:	200000e4 	.word	0x200000e4
 8080848:	2000008c 	.word	0x2000008c
 808084c:	20000088 	.word	0x20000088
 8080850:	200000cc 	.word	0x200000cc
 8080854:	200000d0 	.word	0x200000d0
 8080858:	404e0000 	.word	0x404e0000
 808085c:	200000b4 	.word	0x200000b4

08080860 <_Z20meterParticlePublishv>:

bool meterParticlePublish(void)
{
 8080860:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080862:	f000 fd4d 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 8080866:	4b05      	ldr	r3, [pc, #20]	; (808087c <_Z20meterParticlePublishv+0x1c>)
 8080868:	681b      	ldr	r3, [r3, #0]
 808086a:	1ac0      	subs	r0, r0, r3
 808086c:	4b04      	ldr	r3, [pc, #16]	; (8080880 <_Z20meterParticlePublishv+0x20>)
 808086e:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 8080870:	4298      	cmp	r0, r3
 8080872:	bf34      	ite	cc
 8080874:	2000      	movcc	r0, #0
 8080876:	2001      	movcs	r0, #1
 8080878:	bd08      	pop	{r3, pc}
 808087a:	bf00      	nop
 808087c:	200000bc 	.word	0x200000bc
 8080880:	20000008 	.word	0x20000008

08080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
 8080884:	b508      	push	{r3, lr}
    waitUntil(meterParticlePublish);
 8080886:	f7ff ffeb 	bl	8080860 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
 808088a:	b910      	cbnz	r0, 8080892 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0xe>
            spark_process();
 808088c:	f000 ff00 	bl	8081690 <spark_process>
        while (_while() && !_condition()) {
 8080890:	e7f9      	b.n	8080886 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0x2>
    }
 8080892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080896:	f7ff bfe3 	b.w	8080860 <_Z20meterParticlePublishv>
	...

0808089c <_Z15meterSampleRatev>:

bool meterSampleRate(void)
{
 808089c:	b508      	push	{r3, lr}
 808089e:	f000 fd2f 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastSample >= sampleFrequency) return 1;
 80808a2:	4b05      	ldr	r3, [pc, #20]	; (80808b8 <_Z15meterSampleRatev+0x1c>)
 80808a4:	681b      	ldr	r3, [r3, #0]
 80808a6:	1ac0      	subs	r0, r0, r3
 80808a8:	4b04      	ldr	r3, [pc, #16]	; (80808bc <_Z15meterSampleRatev+0x20>)
 80808aa:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 80808ac:	4298      	cmp	r0, r3
 80808ae:	bf34      	ite	cc
 80808b0:	2000      	movcc	r0, #0
 80808b2:	2001      	movcs	r0, #1
 80808b4:	bd08      	pop	{r3, pc}
 80808b6:	bf00      	nop
 80808b8:	200000c0 	.word	0x200000c0
 80808bc:	20000010 	.word	0x20000010

080808c0 <_Z14fullModemResetv>:
 80808c0:	2300      	movs	r3, #0

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 80808c2:	b530      	push	{r4, r5, lr}
 80808c4:	b085      	sub	sp, #20

	Particle.disconnect(); 	                                         // Disconnect from the cloud
 80808c6:	a801      	add	r0, sp, #4
 80808c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80808cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80808d0:	f001 f9ae 	bl	8081c30 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 80808d4:	f000 fd14 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80808d8:	f643 2597 	movw	r5, #14999	; 0x3a97
 80808dc:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80808de:	f000 fee7 	bl	80816b0 <spark_cloud_flag_connected>
 80808e2:	b140      	cbz	r0, 80808f6 <_Z14fullModemResetv+0x36>
 80808e4:	f000 fd0c 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
 80808e8:	1b00      	subs	r0, r0, r4
 80808ea:	42a8      	cmp	r0, r5
 80808ec:	d803      	bhi.n	80808f6 <_Z14fullModemResetv+0x36>
		delay(100);
 80808ee:	2064      	movs	r0, #100	; 0x64
 80808f0:	f000 ffca 	bl	8081888 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 80808f4:	e7f3      	b.n	80808de <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 80808f6:	2100      	movs	r1, #0
 80808f8:	f247 5230 	movw	r2, #30000	; 0x7530
 80808fc:	4608      	mov	r0, r1
 80808fe:	4b08      	ldr	r3, [pc, #32]	; (8080920 <_Z14fullModemResetv+0x60>)
 8080900:	f000 fcc6 	bl	8081290 <cellular_command>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080908:	f000 ffbe 	bl	8081888 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808090c:	4b05      	ldr	r3, [pc, #20]	; (8080924 <_Z14fullModemResetv+0x64>)
 808090e:	220a      	movs	r2, #10
 8080910:	2101      	movs	r1, #1
 8080912:	681b      	ldr	r3, [r3, #0]
 8080914:	a801      	add	r0, sp, #4
 8080916:	f001 ffa3 	bl	8082860 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 808091a:	b005      	add	sp, #20
 808091c:	bd30      	pop	{r4, r5, pc}
 808091e:	bf00      	nop
 8080920:	080843cb 	.word	0x080843cb
 8080924:	2000009c 	.word	0x2000009c

08080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080928:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808092a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 808092c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808092e:	b17c      	cbz	r4, 8080950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080930:	6863      	ldr	r3, [r4, #4]
 8080932:	3b01      	subs	r3, #1
 8080934:	6063      	str	r3, [r4, #4]
 8080936:	b95b      	cbnz	r3, 8080950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080938:	6823      	ldr	r3, [r4, #0]
 808093a:	4620      	mov	r0, r4
 808093c:	689b      	ldr	r3, [r3, #8]
 808093e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080940:	68a3      	ldr	r3, [r4, #8]
 8080942:	3b01      	subs	r3, #1
 8080944:	60a3      	str	r3, [r4, #8]
 8080946:	b91b      	cbnz	r3, 8080950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080948:	6823      	ldr	r3, [r4, #0]
 808094a:	4620      	mov	r0, r4
 808094c:	68db      	ldr	r3, [r3, #12]
 808094e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080950:	4628      	mov	r0, r5
 8080952:	bd38      	pop	{r3, r4, r5, pc}

08080954 <_Z9ResetFRAMv>:


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 8080954:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
 8080958:	2007      	movs	r0, #7
 808095a:	f7ff fcaf 	bl	80802bc <_Z9FRAMread8j>
    Particle.publish("FRAM","Resetting in progress");
 808095e:	4a1f      	ldr	r2, [pc, #124]	; (80809dc <_Z9ResetFRAMv+0x88>)
 8080960:	491f      	ldr	r1, [pc, #124]	; (80809e0 <_Z9ResetFRAMv+0x8c>)
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
 8080962:	4605      	mov	r5, r0
    Particle.publish("FRAM","Resetting in progress");
 8080964:	4668      	mov	r0, sp
 8080966:	f7ff fc95 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808096a:	a801      	add	r0, sp, #4
 808096c:	f7ff ffdc 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080970:	2408      	movs	r4, #8
        FRAMwrite8(i,0x0);
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
 8080972:	4e1c      	ldr	r6, [pc, #112]	; (80809e4 <_Z9ResetFRAMv+0x90>)
        if (i==(24576)) Serial.println(F("75% done"));
 8080974:	4f1c      	ldr	r7, [pc, #112]	; (80809e8 <_Z9ResetFRAMv+0x94>)
        if (i==16384) Serial.println(F("50% done"));
 8080976:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80809f0 <_Z9ResetFRAMv+0x9c>
        FRAMwrite8(i,0x0);
 808097a:	2100      	movs	r1, #0
 808097c:	4620      	mov	r0, r4
 808097e:	f7ff fca3 	bl	80802c8 <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 8080982:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8080986:	d113      	bne.n	80809b0 <_Z9ResetFRAMv+0x5c>
 8080988:	f002 f96a 	bl	8082c60 <_Z16_fetch_usbserialv>
 808098c:	4917      	ldr	r1, [pc, #92]	; (80809ec <_Z9ResetFRAMv+0x98>)
        if (i==32767) Serial.println(F("Done"));
 808098e:	f001 fe37 	bl	8082600 <_ZN5Print7printlnEPKc>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080992:	3401      	adds	r4, #1
 8080994:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8080998:	d1ef      	bne.n	808097a <_Z9ResetFRAMv+0x26>
    }
    FRAMwrite8(FRAM::controlRegisterAddr,tempControlReg);   // Preserce the control register values
 808099a:	4629      	mov	r1, r5
 808099c:	2007      	movs	r0, #7
 808099e:	f7ff fc93 	bl	80802c8 <_Z10FRAMwrite8jh>
    FRAMwrite8(FRAM::versionAddr,versionNumber);  // Reset version to match #define value for sketch
 80809a2:	2109      	movs	r1, #9
 80809a4:	2000      	movs	r0, #0
 80809a6:	f7ff fc8f 	bl	80802c8 <_Z10FRAMwrite8jh>
}
 80809aa:	b002      	add	sp, #8
 80809ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (i==16384) Serial.println(F("50% done"));
 80809b0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80809b4:	d103      	bne.n	80809be <_Z9ResetFRAMv+0x6a>
 80809b6:	f002 f953 	bl	8082c60 <_Z16_fetch_usbserialv>
 80809ba:	4641      	mov	r1, r8
 80809bc:	e7e7      	b.n	808098e <_Z9ResetFRAMv+0x3a>
        if (i==(24576)) Serial.println(F("75% done"));
 80809be:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 80809c2:	d103      	bne.n	80809cc <_Z9ResetFRAMv+0x78>
 80809c4:	f002 f94c 	bl	8082c60 <_Z16_fetch_usbserialv>
 80809c8:	4639      	mov	r1, r7
 80809ca:	e7e0      	b.n	808098e <_Z9ResetFRAMv+0x3a>
        if (i==32767) Serial.println(F("Done"));
 80809cc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80809d0:	429c      	cmp	r4, r3
 80809d2:	d1de      	bne.n	8080992 <_Z9ResetFRAMv+0x3e>
 80809d4:	f002 f944 	bl	8082c60 <_Z16_fetch_usbserialv>
 80809d8:	4631      	mov	r1, r6
 80809da:	e7d8      	b.n	808098e <_Z9ResetFRAMv+0x3a>
 80809dc:	080843d8 	.word	0x080843d8
 80809e0:	08084455 	.word	0x08084455
 80809e4:	08084409 	.word	0x08084409
 80809e8:	08084400 	.word	0x08084400
 80809ec:	080843ee 	.word	0x080843ee
 80809f0:	080843f7 	.word	0x080843f7

080809f4 <setup>:
{
 80809f4:	b530      	push	{r4, r5, lr}
  pinMode(analogIn,INPUT);
 80809f6:	2100      	movs	r1, #0
{
 80809f8:	b0a9      	sub	sp, #164	; 0xa4
  pinMode(analogIn,INPUT);
 80809fa:	200a      	movs	r0, #10
 80809fc:	f002 fa94 	bl	8082f28 <pinMode>
  pinMode(analogOut,OUTPUT);
 8080a00:	2101      	movs	r1, #1
 8080a02:	2010      	movs	r0, #16
 8080a04:	f002 fa90 	bl	8082f28 <pinMode>
  pinMode(currentSns1,INPUT);                                // Senses the pump current
 8080a08:	2100      	movs	r1, #0
 8080a0a:	200b      	movs	r0, #11
 8080a0c:	f002 fa8c 	bl	8082f28 <pinMode>
  pinMode(currentSns2,INPUT);                                // Senses the pump current
 8080a10:	2100      	movs	r1, #0
 8080a12:	200c      	movs	r0, #12
 8080a14:	f002 fa88 	bl	8082f28 <pinMode>
  pinMode(control0,OUTPUT);                               // Turns on the pump
 8080a18:	2101      	movs	r1, #1
 8080a1a:	2000      	movs	r0, #0
 8080a1c:	f002 fa84 	bl	8082f28 <pinMode>
  pinMode(control1,OUTPUT);                               // Turns on the pump
 8080a20:	2101      	movs	r1, #1
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 8080a22:	2400      	movs	r4, #0
 8080a24:	4608      	mov	r0, r1
 8080a26:	f002 fa7f 	bl	8082f28 <pinMode>
  pinMode(senseAC0,INPUT);                               // Voltage Sensor Interrupt pin
 8080a2a:	2100      	movs	r1, #0
 8080a2c:	2023      	movs	r0, #35	; 0x23
 8080a2e:	f002 fa7b 	bl	8082f28 <pinMode>
  pinMode(senseAC1,INPUT);                                     // Voltage Sensor Interrupt pin
 8080a32:	2100      	movs	r1, #0
 8080a34:	2022      	movs	r0, #34	; 0x22
 8080a36:	f002 fa77 	bl	8082f28 <pinMode>
  pinMode(senseAC2,INPUT);                                   // Voltage Sensor Interrupt pin
 8080a3a:	2100      	movs	r1, #0
 8080a3c:	2021      	movs	r0, #33	; 0x21
 8080a3e:	f002 fa73 	bl	8082f28 <pinMode>
  pinMode(senseAC3,INPUT);                               // Voltage Sensor Interrupt pin
 8080a42:	2100      	movs	r1, #0
 8080a44:	2020      	movs	r0, #32
 8080a46:	f002 fa6f 	bl	8082f28 <pinMode>
  pinMode(senseAC4,INPUT);                                     // Voltage Sensor Interrupt pin
 8080a4a:	2100      	movs	r1, #0
 8080a4c:	201f      	movs	r0, #31
 8080a4e:	f002 fa6b 	bl	8082f28 <pinMode>
  pinMode(senseAC5,INPUT);                                   // Voltage Sensor Interrupt pin
 8080a52:	2100      	movs	r1, #0
 8080a54:	201e      	movs	r0, #30
 8080a56:	f002 fa67 	bl	8082f28 <pinMode>
  pinMode(powerCycle,OUTPUT);
 8080a5a:	2101      	movs	r1, #1
 8080a5c:	200f      	movs	r0, #15
 8080a5e:	f002 fa63 	bl	8082f28 <pinMode>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
 8080a62:	2101      	movs	r1, #1
 8080a64:	2006      	movs	r0, #6
 8080a66:	f002 fa5f 	bl	8082f28 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080a6a:	2100      	movs	r1, #0
 8080a6c:	2011      	movs	r0, #17
 8080a6e:	f002 fa5b 	bl	8082f28 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080a72:	2101      	movs	r1, #1
 8080a74:	2007      	movs	r0, #7
 8080a76:	f002 fa57 	bl	8082f28 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080a7a:	2100      	movs	r1, #0
 8080a7c:	2005      	movs	r0, #5
 8080a7e:	f002 fa53 	bl	8082f28 <pinMode>
  pinMode(anyOn,INPUT);
 8080a82:	2100      	movs	r1, #0
 8080a84:	2004      	movs	r0, #4
 8080a86:	f002 fa4f 	bl	8082f28 <pinMode>
  watchdogISR();                                                  // Pet the watchdog
 8080a8a:	f7ff fbc5 	bl	8080218 <_Z11watchdogISRv>
    static String deviceID(void) { return spark_deviceID(); }
 8080a8e:	a804      	add	r0, sp, #16
 8080a90:	f000 fe16 	bl	80816c0 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080a94:	2300      	movs	r3, #0
 8080a96:	227d      	movs	r2, #125	; 0x7d
 8080a98:	a908      	add	r1, sp, #32
 8080a9a:	a804      	add	r0, sp, #16
 8080a9c:	f001 fe76 	bl	808278c <_ZNK6String8getBytesEPhjj>
 8080aa0:	4623      	mov	r3, r4
 8080aa2:	4622      	mov	r2, r4
 8080aa4:	496a      	ldr	r1, [pc, #424]	; (8080c50 <setup+0x25c>)
 8080aa6:	e9cd 4400 	strd	r4, r4, [sp]
 8080aaa:	a808      	add	r0, sp, #32
 8080aac:	f000 fe18 	bl	80816e0 <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080ab0:	4623      	mov	r3, r4
 8080ab2:	2202      	movs	r2, #2
 8080ab4:	4967      	ldr	r1, [pc, #412]	; (8080c54 <setup+0x260>)
 8080ab6:	4868      	ldr	r0, [pc, #416]	; (8080c58 <setup+0x264>)
 8080ab8:	f000 fdda 	bl	8081670 <spark_variable>
 8080abc:	4623      	mov	r3, r4
 8080abe:	2204      	movs	r2, #4
 8080ac0:	4966      	ldr	r1, [pc, #408]	; (8080c5c <setup+0x268>)
 8080ac2:	4867      	ldr	r0, [pc, #412]	; (8080c60 <setup+0x26c>)
 8080ac4:	f000 fdd4 	bl	8081670 <spark_variable>
 8080ac8:	4623      	mov	r3, r4
 8080aca:	2202      	movs	r2, #2
 8080acc:	4965      	ldr	r1, [pc, #404]	; (8080c64 <setup+0x270>)
 8080ace:	4866      	ldr	r0, [pc, #408]	; (8080c68 <setup+0x274>)
 8080ad0:	f000 fdce 	bl	8081670 <spark_variable>
 8080ad4:	4623      	mov	r3, r4
 8080ad6:	2204      	movs	r2, #4
 8080ad8:	4964      	ldr	r1, [pc, #400]	; (8080c6c <setup+0x278>)
 8080ada:	4865      	ldr	r0, [pc, #404]	; (8080c70 <setup+0x27c>)
 8080adc:	f000 fdc8 	bl	8081670 <spark_variable>
 8080ae0:	4623      	mov	r3, r4
 8080ae2:	2202      	movs	r2, #2
 8080ae4:	4963      	ldr	r1, [pc, #396]	; (8080c74 <setup+0x280>)
 8080ae6:	4864      	ldr	r0, [pc, #400]	; (8080c78 <setup+0x284>)
 8080ae8:	f000 fdc2 	bl	8081670 <spark_variable>
 8080aec:	4623      	mov	r3, r4
 8080aee:	2202      	movs	r2, #2
 8080af0:	4962      	ldr	r1, [pc, #392]	; (8080c7c <setup+0x288>)
 8080af2:	4863      	ldr	r0, [pc, #396]	; (8080c80 <setup+0x28c>)
 8080af4:	f000 fdbc 	bl	8081670 <spark_variable>
 8080af8:	4623      	mov	r3, r4
 8080afa:	2202      	movs	r2, #2
 8080afc:	4961      	ldr	r1, [pc, #388]	; (8080c84 <setup+0x290>)
 8080afe:	4862      	ldr	r0, [pc, #392]	; (8080c88 <setup+0x294>)
 8080b00:	f000 fdb6 	bl	8081670 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080b04:	4a61      	ldr	r2, [pc, #388]	; (8080c8c <setup+0x298>)
 8080b06:	4962      	ldr	r1, [pc, #392]	; (8080c90 <setup+0x29c>)
 8080b08:	4862      	ldr	r0, [pc, #392]	; (8080c94 <setup+0x2a0>)
 8080b0a:	f001 f880 	bl	8081c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080b0e:	4a62      	ldr	r2, [pc, #392]	; (8080c98 <setup+0x2a4>)
 8080b10:	4962      	ldr	r1, [pc, #392]	; (8080c9c <setup+0x2a8>)
 8080b12:	4860      	ldr	r0, [pc, #384]	; (8080c94 <setup+0x2a0>)
 8080b14:	f001 f87b 	bl	8081c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080b18:	4a61      	ldr	r2, [pc, #388]	; (8080ca0 <setup+0x2ac>)
 8080b1a:	4962      	ldr	r1, [pc, #392]	; (8080ca4 <setup+0x2b0>)
 8080b1c:	485d      	ldr	r0, [pc, #372]	; (8080c94 <setup+0x2a0>)
 8080b1e:	f001 f876 	bl	8081c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080b22:	4a61      	ldr	r2, [pc, #388]	; (8080ca8 <setup+0x2b4>)
 8080b24:	4961      	ldr	r1, [pc, #388]	; (8080cac <setup+0x2b8>)
 8080b26:	485b      	ldr	r0, [pc, #364]	; (8080c94 <setup+0x2a0>)
 8080b28:	f001 f871 	bl	8081c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080b2c:	4a60      	ldr	r2, [pc, #384]	; (8080cb0 <setup+0x2bc>)
 8080b2e:	4961      	ldr	r1, [pc, #388]	; (8080cb4 <setup+0x2c0>)
 8080b30:	4858      	ldr	r0, [pc, #352]	; (8080c94 <setup+0x2a0>)
 8080b32:	f001 f86c 	bl	8081c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080b36:	4a60      	ldr	r2, [pc, #384]	; (8080cb8 <setup+0x2c4>)
 8080b38:	4960      	ldr	r1, [pc, #384]	; (8080cbc <setup+0x2c8>)
 8080b3a:	4856      	ldr	r0, [pc, #344]	; (8080c94 <setup+0x2a0>)
 8080b3c:	f001 f867 	bl	8081c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080b40:	4a5f      	ldr	r2, [pc, #380]	; (8080cc0 <setup+0x2cc>)
 8080b42:	4960      	ldr	r1, [pc, #384]	; (8080cc4 <setup+0x2d0>)
 8080b44:	4853      	ldr	r0, [pc, #332]	; (8080c94 <setup+0x2a0>)
 8080b46:	f001 f862 	bl	8081c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (!fram.begin()) {                                                  // You can stick the new i2c addr in here, e.g. begin(0x51);
 8080b4a:	2150      	movs	r1, #80	; 0x50
 8080b4c:	485e      	ldr	r0, [pc, #376]	; (8080cc8 <setup+0x2d4>)
 8080b4e:	f7ff fb39 	bl	80801c4 <_ZN17Adafruit_FRAM_I2C5beginEh>
 8080b52:	4d5e      	ldr	r5, [pc, #376]	; (8080ccc <setup+0x2d8>)
 8080b54:	2800      	cmp	r0, #0
 8080b56:	d168      	bne.n	8080c2a <setup+0x236>
 8080b58:	f000 fbd2 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080b5c:	4b5c      	ldr	r3, [pc, #368]	; (8080cd0 <setup+0x2dc>)
 8080b5e:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;   // Resetting did not fix the issue
 8080b60:	2301      	movs	r3, #1
 8080b62:	702b      	strb	r3, [r5, #0]
  resetCount = FRAMread8(FRAM::resetCountAddr);                                   // Retrive system recount data from FRAM
 8080b64:	2003      	movs	r0, #3
 8080b66:	f7ff fba9 	bl	80802bc <_Z9FRAMread8j>
        int reason = RESET_REASON_NONE;
 8080b6a:	2200      	movs	r2, #0
 8080b6c:	4c3d      	ldr	r4, [pc, #244]	; (8080c64 <setup+0x270>)
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080b6e:	4611      	mov	r1, r2
 8080b70:	6020      	str	r0, [r4, #0]
 8080b72:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 8080b74:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080b76:	f000 fbab 	bl	80812d0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080b7a:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080b7c:	2b14      	cmp	r3, #20
 8080b7e:	d106      	bne.n	8080b8e <setup+0x19a>
    resetCount++;
 8080b80:	6821      	ldr	r1, [r4, #0]
    FRAMwrite8(FRAM::resetCountAddr,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8080b82:	2003      	movs	r0, #3
    resetCount++;
 8080b84:	3101      	adds	r1, #1
 8080b86:	6021      	str	r1, [r4, #0]
    FRAMwrite8(FRAM::resetCountAddr,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8080b88:	b2c9      	uxtb	r1, r1
 8080b8a:	f7ff fb9d 	bl	80802c8 <_Z10FRAMwrite8jh>
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080b8e:	6823      	ldr	r3, [r4, #0]
 8080b90:	2b05      	cmp	r3, #5
 8080b92:	dd05      	ble.n	8080ba0 <setup+0x1ac>
    FRAMwrite8(FRAM::resetCountAddr,4);                                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080b94:	2104      	movs	r1, #4
 8080b96:	2003      	movs	r0, #3
 8080b98:	f7ff fb96 	bl	80802c8 <_Z10FRAMwrite8jh>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080b9c:	f7ff fe90 	bl	80808c0 <_Z14fullModemResetv>
  int8_t tempTimeZoneOffset = FRAMread8(FRAM::timeZoneAddr);                  // Load Time zone data from FRAM
 8080ba0:	2004      	movs	r0, #4
 8080ba2:	f7ff fb8b 	bl	80802bc <_Z9FRAMread8j>
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
 8080ba6:	f100 030b 	add.w	r3, r0, #11
 8080baa:	b2db      	uxtb	r3, r3
 8080bac:	2b16      	cmp	r3, #22
 8080bae:	d84d      	bhi.n	8080c4c <setup+0x258>
 8080bb0:	b240      	sxtb	r0, r0
 8080bb2:	f002 ff9f 	bl	8083af4 <__aeabi_i2f>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 8080bb6:	f001 fecf 	bl	8082958 <_ZN9TimeClass4zoneEf>
  controlRegister = FRAMread8(FRAM::controlRegisterAddr);                         // Read the Control Register for system modes so they stick even after reset
 8080bba:	2007      	movs	r0, #7
 8080bbc:	f7ff fb7e 	bl	80802bc <_Z9FRAMread8j>
 8080bc0:	4c44      	ldr	r4, [pc, #272]	; (8080cd4 <setup+0x2e0>)
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8080bc2:	4b45      	ldr	r3, [pc, #276]	; (8080cd8 <setup+0x2e4>)
  controlRegister = FRAMread8(FRAM::controlRegisterAddr);                         // Read the Control Register for system modes so they stick even after reset
 8080bc4:	7020      	strb	r0, [r4, #0]
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8080bc6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8080bca:	7018      	strb	r0, [r3, #0]
  dailyPumpingMins = FRAMread16(FRAM::dailyPumpMinutesAddr);                      // Reload so we don't loose track
 8080bcc:	200a      	movs	r0, #10
 8080bce:	f7ff fb83 	bl	80802d8 <_Z10FRAMread16j>
 8080bd2:	4b2c      	ldr	r3, [pc, #176]	; (8080c84 <setup+0x290>)
 8080bd4:	6018      	str	r0, [r3, #0]
  if (controlRegister & 0b00000010) {                                   // This means we reset while pumpting
 8080bd6:	7823      	ldrb	r3, [r4, #0]
 8080bd8:	079b      	lsls	r3, r3, #30
 8080bda:	d506      	bpl.n	8080bea <setup+0x1f6>
    pumpingStart = FRAMread32(FRAM::currentCountsTimeAddr);                       // Reload the pumping start time
 8080bdc:	200e      	movs	r0, #14
 8080bde:	f7ff fbbf 	bl	8080360 <_Z10FRAMread32m>
 8080be2:	2200      	movs	r2, #0
 8080be4:	4b3d      	ldr	r3, [pc, #244]	; (8080cdc <setup+0x2e8>)
 8080be6:	6018      	str	r0, [r3, #0]
 8080be8:	605a      	str	r2, [r3, #4]
  stateOfCharge = int(batteryMonitor.getSoC());                         // Percentage of full charge
 8080bea:	483d      	ldr	r0, [pc, #244]	; (8080ce0 <setup+0x2ec>)
 8080bec:	f001 fb04 	bl	80821f8 <_ZN9FuelGauge6getSoCEv>
 8080bf0:	f003 f99a 	bl	8083f28 <__aeabi_f2iz>
 8080bf4:	4b1f      	ldr	r3, [pc, #124]	; (8080c74 <setup+0x280>)
 8080bf6:	6018      	str	r0, [r3, #0]
  if (stateOfCharge > lowBattLimit) connectToParticle();                // If not low battery, we can connect
 8080bf8:	4b3a      	ldr	r3, [pc, #232]	; (8080ce4 <setup+0x2f0>)
 8080bfa:	681b      	ldr	r3, [r3, #0]
 8080bfc:	4298      	cmp	r0, r3
 8080bfe:	dd01      	ble.n	8080c04 <setup+0x210>
 8080c00:	f7ff fc2c 	bl	808045c <_Z17connectToParticlev>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to respond
 8080c04:	2300      	movs	r3, #0
 8080c06:	2201      	movs	r2, #1
 8080c08:	4937      	ldr	r1, [pc, #220]	; (8080ce8 <setup+0x2f4>)
 8080c0a:	9300      	str	r3, [sp, #0]
 8080c0c:	2011      	movs	r0, #17
 8080c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080c12:	f001 fbc5 	bl	80823a0 <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080c16:	782b      	ldrb	r3, [r5, #0]
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 8080c18:	a804      	add	r0, sp, #16
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080c1a:	2b01      	cmp	r3, #1
 8080c1c:	bf1c      	itt	ne
 8080c1e:	2302      	movne	r3, #2
 8080c20:	702b      	strbne	r3, [r5, #0]
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 8080c22:	f001 fd2a 	bl	808267a <_ZN6StringD1Ev>
}
 8080c26:	b029      	add	sp, #164	; 0xa4
 8080c28:	bd30      	pop	{r4, r5, pc}
  else if (FRAMread8(FRAM::versionAddr) != versionNumber) {                   // Check to see if the memory map in the sketch matches the data on the chip
 8080c2a:	4620      	mov	r0, r4
 8080c2c:	f7ff fb46 	bl	80802bc <_Z9FRAMread8j>
 8080c30:	2809      	cmp	r0, #9
 8080c32:	d097      	beq.n	8080b64 <setup+0x170>
    ResetFRAM();                                                        // Reset the FRAM to correct the issue
 8080c34:	f7ff fe8e 	bl	8080954 <_Z9ResetFRAMv>
    if (FRAMread8(FRAM::versionAddr) != versionNumber) {
 8080c38:	4620      	mov	r0, r4
 8080c3a:	f7ff fb3f 	bl	80802bc <_Z9FRAMread8j>
 8080c3e:	2809      	cmp	r0, #9
 8080c40:	d18a      	bne.n	8080b58 <setup+0x164>
      FRAMwrite8(FRAM::controlRegisterAddr,0);                                    // Need to reset so not in low power or low battery mode
 8080c42:	4621      	mov	r1, r4
 8080c44:	2007      	movs	r0, #7
 8080c46:	f7ff fb3f 	bl	80802c8 <_Z10FRAMwrite8jh>
 8080c4a:	e78b      	b.n	8080b64 <setup+0x170>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 8080c4c:	4827      	ldr	r0, [pc, #156]	; (8080cec <setup+0x2f8>)
 8080c4e:	e7b2      	b.n	8080bb6 <setup+0x1c2>
 8080c50:	08080d09 	.word	0x08080d09
 8080c54:	200000a4 	.word	0x200000a4
 8080c58:	0808440e 	.word	0x0808440e
 8080c5c:	40024000 	.word	0x40024000
 8080c60:	08084415 	.word	0x08084415
 8080c64:	200000d8 	.word	0x200000d8
 8080c68:	0808441c 	.word	0x0808441c
 8080c6c:	08084614 	.word	0x08084614
 8080c70:	08084427 	.word	0x08084427
 8080c74:	200000e4 	.word	0x200000e4
 8080c78:	0808442f 	.word	0x0808442f
 8080c7c:	200000c8 	.word	0x200000c8
 8080c80:	0808443a 	.word	0x0808443a
 8080c84:	200000b4 	.word	0x200000b4
 8080c88:	08084443 	.word	0x08084443
 8080c8c:	0808444f 	.word	0x0808444f
 8080c90:	08080cf1 	.word	0x08080cf1
 8080c94:	08081be3 	.word	0x08081be3
 8080c98:	0808445a 	.word	0x0808445a
 8080c9c:	0808023d 	.word	0x0808023d
 8080ca0:	08084466 	.word	0x08084466
 8080ca4:	08080325 	.word	0x08080325
 8080ca8:	08084473 	.word	0x08084473
 8080cac:	08080279 	.word	0x08080279
 8080cb0:	0808447e 	.word	0x0808447e
 8080cb4:	080801fd 	.word	0x080801fd
 8080cb8:	08084487 	.word	0x08084487
 8080cbc:	08080d95 	.word	0x08080d95
 8080cc0:	08084494 	.word	0x08084494
 8080cc4:	08080e31 	.word	0x08080e31
 8080cc8:	200000b9 	.word	0x200000b9
 8080ccc:	200000e0 	.word	0x200000e0
 8080cd0:	200000dc 	.word	0x200000dc
 8080cd4:	200000b0 	.word	0x200000b0
 8080cd8:	200000f0 	.word	0x200000f0
 8080cdc:	200000d0 	.word	0x200000d0
 8080ce0:	200000a8 	.word	0x200000a8
 8080ce4:	20000000 	.word	0x20000000
 8080ce8:	08080219 	.word	0x08080219
 8080cec:	c0a00000 	.word	0xc0a00000

08080cf0 <_Z9resetFRAM6String>:
{
 8080cf0:	b508      	push	{r3, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080cf2:	4904      	ldr	r1, [pc, #16]	; (8080d04 <_Z9resetFRAM6String+0x14>)
 8080cf4:	f001 fd38 	bl	8082768 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080cf8:	b110      	cbz	r0, 8080d00 <_Z9resetFRAM6String+0x10>
    ResetFRAM();
 8080cfa:	f7ff fe2b 	bl	8080954 <_Z9ResetFRAMv>
    return 1;
 8080cfe:	2001      	movs	r0, #1
}
 8080d00:	bd08      	pop	{r3, pc}
 8080d02:	bf00      	nop
 8080d04:	08084390 	.word	0x08084390

08080d08 <_Z14UbidotsHandlerPKcS0_>:
{
 8080d08:	b513      	push	{r0, r1, r4, lr}
  if (!data) {                                            // First check to see if there is any data
 8080d0a:	460c      	mov	r4, r1
 8080d0c:	b979      	cbnz	r1, 8080d2e <_Z14UbidotsHandlerPKcS0_+0x26>
        return waitConditionWhile(_condition, []{ return true; });
 8080d0e:	f7ff fdb9 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Ubidots Hook", "No Data");
 8080d12:	4a19      	ldr	r2, [pc, #100]	; (8080d78 <_Z14UbidotsHandlerPKcS0_+0x70>)
 8080d14:	4919      	ldr	r1, [pc, #100]	; (8080d7c <_Z14UbidotsHandlerPKcS0_+0x74>)
 8080d16:	4668      	mov	r0, sp
 8080d18:	f7ff fabc 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8080d1c:	a801      	add	r0, sp, #4
 8080d1e:	f7ff fe03 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080d22:	f000 faed 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080d26:	4b16      	ldr	r3, [pc, #88]	; (8080d80 <_Z14UbidotsHandlerPKcS0_+0x78>)
 8080d28:	6018      	str	r0, [r3, #0]
}
 8080d2a:	b002      	add	sp, #8
 8080d2c:	bd10      	pop	{r4, pc}
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 8080d2e:	4608      	mov	r0, r1
 8080d30:	f003 f980 	bl	8084034 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8080d34:	38c8      	subs	r0, #200	; 0xc8
 8080d36:	2801      	cmp	r0, #1
 8080d38:	d814      	bhi.n	8080d64 <_Z14UbidotsHandlerPKcS0_+0x5c>
 8080d3a:	f7ff fda3 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    if(verboseMode) Particle.publish("State","Response Received");
 8080d3e:	4b11      	ldr	r3, [pc, #68]	; (8080d84 <_Z14UbidotsHandlerPKcS0_+0x7c>)
 8080d40:	781b      	ldrb	r3, [r3, #0]
 8080d42:	b13b      	cbz	r3, 8080d54 <_Z14UbidotsHandlerPKcS0_+0x4c>
 8080d44:	4668      	mov	r0, sp
 8080d46:	4a10      	ldr	r2, [pc, #64]	; (8080d88 <_Z14UbidotsHandlerPKcS0_+0x80>)
 8080d48:	4910      	ldr	r1, [pc, #64]	; (8080d8c <_Z14UbidotsHandlerPKcS0_+0x84>)
 8080d4a:	f7ff faa3 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8080d4e:	a801      	add	r0, sp, #4
 8080d50:	f7ff fdea 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080d54:	f000 fad4 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
    dataInFlight = false;                                 // Data has been received
 8080d58:	2200      	movs	r2, #0
    lastPublish = millis();
 8080d5a:	4b09      	ldr	r3, [pc, #36]	; (8080d80 <_Z14UbidotsHandlerPKcS0_+0x78>)
 8080d5c:	6018      	str	r0, [r3, #0]
    dataInFlight = false;                                 // Data has been received
 8080d5e:	4b0c      	ldr	r3, [pc, #48]	; (8080d90 <_Z14UbidotsHandlerPKcS0_+0x88>)
 8080d60:	701a      	strb	r2, [r3, #0]
 8080d62:	e7e2      	b.n	8080d2a <_Z14UbidotsHandlerPKcS0_+0x22>
  else Particle.publish("Ubidots Hook", data);             // Publish the response code
 8080d64:	4668      	mov	r0, sp
 8080d66:	4622      	mov	r2, r4
 8080d68:	4904      	ldr	r1, [pc, #16]	; (8080d7c <_Z14UbidotsHandlerPKcS0_+0x74>)
 8080d6a:	f7ff fa93 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8080d6e:	a801      	add	r0, sp, #4
 8080d70:	f7ff fdda 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080d74:	e7d9      	b.n	8080d2a <_Z14UbidotsHandlerPKcS0_+0x22>
 8080d76:	bf00      	nop
 8080d78:	080844a1 	.word	0x080844a1
 8080d7c:	080844a9 	.word	0x080844a9
 8080d80:	200000bc 	.word	0x200000bc
 8080d84:	200000f0 	.word	0x200000f0
 8080d88:	080844b6 	.word	0x080844b6
 8080d8c:	080844c8 	.word	0x080844c8
 8080d90:	200000b8 	.word	0x200000b8

08080d94 <_Z14setVerboseMode6String>:
{
 8080d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080d96:	491e      	ldr	r1, [pc, #120]	; (8080e10 <_Z14setVerboseMode6String+0x7c>)
 8080d98:	4605      	mov	r5, r0
 8080d9a:	f001 fce5 	bl	8082768 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080d9e:	4604      	mov	r4, r0
 8080da0:	b1f0      	cbz	r0, 8080de0 <_Z14setVerboseMode6String+0x4c>
    verboseMode = true;
 8080da2:	2401      	movs	r4, #1
 8080da4:	4b1b      	ldr	r3, [pc, #108]	; (8080e14 <_Z14setVerboseMode6String+0x80>)
    FRAMread8(FRAM::controlRegisterAddr);
 8080da6:	2007      	movs	r0, #7
    verboseMode = true;
 8080da8:	701c      	strb	r4, [r3, #0]
    FRAMread8(FRAM::controlRegisterAddr);
 8080daa:	f7ff fa87 	bl	80802bc <_Z9FRAMread8j>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080dae:	4b1a      	ldr	r3, [pc, #104]	; (8080e18 <_Z14setVerboseMode6String+0x84>)
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegister);                        // Write it to the register
 8080db0:	2007      	movs	r0, #7
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080db2:	7819      	ldrb	r1, [r3, #0]
 8080db4:	f041 0108 	orr.w	r1, r1, #8
 8080db8:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegister);                        // Write it to the register
 8080dba:	f7ff fa85 	bl	80802c8 <_Z10FRAMwrite8jh>
 8080dbe:	f7ff fd61 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Set Verbose Mode");
 8080dc2:	4a16      	ldr	r2, [pc, #88]	; (8080e1c <_Z14setVerboseMode6String+0x88>)
    Particle.publish("Mode","Cleared Verbose Mode");
 8080dc4:	4916      	ldr	r1, [pc, #88]	; (8080e20 <_Z14setVerboseMode6String+0x8c>)
 8080dc6:	4668      	mov	r0, sp
 8080dc8:	f7ff fa64 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8080dcc:	a801      	add	r0, sp, #4
 8080dce:	f7ff fdab 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080dd2:	f000 fa95 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080dd6:	4b13      	ldr	r3, [pc, #76]	; (8080e24 <_Z14setVerboseMode6String+0x90>)
 8080dd8:	6018      	str	r0, [r3, #0]
 8080dda:	2001      	movs	r0, #1
}
 8080ddc:	b003      	add	sp, #12
 8080dde:	bd30      	pop	{r4, r5, pc}
 8080de0:	4628      	mov	r0, r5
 8080de2:	4911      	ldr	r1, [pc, #68]	; (8080e28 <_Z14setVerboseMode6String+0x94>)
 8080de4:	f001 fcc0 	bl	8082768 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 8080de8:	2800      	cmp	r0, #0
 8080dea:	d0f7      	beq.n	8080ddc <_Z14setVerboseMode6String+0x48>
    verboseMode = false;
 8080dec:	4b09      	ldr	r3, [pc, #36]	; (8080e14 <_Z14setVerboseMode6String+0x80>)
    FRAMread8(FRAM::controlRegisterAddr);
 8080dee:	2007      	movs	r0, #7
    verboseMode = false;
 8080df0:	701c      	strb	r4, [r3, #0]
    FRAMread8(FRAM::controlRegisterAddr);
 8080df2:	f7ff fa63 	bl	80802bc <_Z9FRAMread8j>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080df6:	4b08      	ldr	r3, [pc, #32]	; (8080e18 <_Z14setVerboseMode6String+0x84>)
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegister);                        // Write it to the register
 8080df8:	2007      	movs	r0, #7
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080dfa:	7819      	ldrb	r1, [r3, #0]
 8080dfc:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8080e00:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegister);                        // Write it to the register
 8080e02:	f7ff fa61 	bl	80802c8 <_Z10FRAMwrite8jh>
 8080e06:	f7ff fd3d 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Cleared Verbose Mode");
 8080e0a:	4a08      	ldr	r2, [pc, #32]	; (8080e2c <_Z14setVerboseMode6String+0x98>)
 8080e0c:	e7da      	b.n	8080dc4 <_Z14setVerboseMode6String+0x30>
 8080e0e:	bf00      	nop
 8080e10:	08084390 	.word	0x08084390
 8080e14:	200000f0 	.word	0x200000f0
 8080e18:	200000b0 	.word	0x200000b0
 8080e1c:	080844ce 	.word	0x080844ce
 8080e20:	080844f1 	.word	0x080844f1
 8080e24:	200000bc 	.word	0x200000bc
 8080e28:	080844df 	.word	0x080844df
 8080e2c:	080844e1 	.word	0x080844e1

08080e30 <_Z11setTimeZone6String>:
{
 8080e30:	b530      	push	{r4, r5, lr}
 8080e32:	b0c9      	sub	sp, #292	; 0x124
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080e34:	220a      	movs	r2, #10
 8080e36:	6800      	ldr	r0, [r0, #0]
 8080e38:	a901      	add	r1, sp, #4
 8080e3a:	f003 fa0b 	bl	8084254 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080e3e:	b2c5      	uxtb	r5, r0
 8080e40:	f105 030c 	add.w	r3, r5, #12
 8080e44:	b2db      	uxtb	r3, r3
 8080e46:	2b18      	cmp	r3, #24
 8080e48:	d83c      	bhi.n	8080ec4 <_Z11setTimeZone6String+0x94>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080e4a:	b244      	sxtb	r4, r0
  Time.zone((float)tempTimeZoneOffset);
 8080e4c:	4620      	mov	r0, r4
 8080e4e:	f002 fe51 	bl	8083af4 <__aeabi_i2f>
 8080e52:	f001 fd81 	bl	8082958 <_ZN9TimeClass4zoneEf>
  FRAMwrite8(FRAM::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8080e56:	4629      	mov	r1, r5
 8080e58:	2004      	movs	r0, #4
 8080e5a:	f7ff fa35 	bl	80802c8 <_Z10FRAMwrite8jh>
  t = Time.now();
 8080e5e:	f001 fdee 	bl	8082a3e <_ZN9TimeClass3nowEv>
 8080e62:	4d19      	ldr	r5, [pc, #100]	; (8080ec8 <_Z11setTimeZone6String+0x98>)
 8080e64:	17c1      	asrs	r1, r0, #31
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080e66:	4623      	mov	r3, r4
  t = Time.now();
 8080e68:	e9c5 0100 	strd	r0, r1, [r5]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080e6c:	4a17      	ldr	r2, [pc, #92]	; (8080ecc <_Z11setTimeZone6String+0x9c>)
 8080e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080e72:	a808      	add	r0, sp, #32
 8080e74:	f000 fcdc 	bl	8081830 <snprintf>
 8080e78:	f7ff fd04 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  Particle.publish("Time",data);
 8080e7c:	4914      	ldr	r1, [pc, #80]	; (8080ed0 <_Z11setTimeZone6String+0xa0>)
 8080e7e:	aa08      	add	r2, sp, #32
 8080e80:	a804      	add	r0, sp, #16
 8080e82:	f7ff fa07 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8080e86:	a805      	add	r0, sp, #20
 8080e88:	f7ff fd4e 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e8c:	f000 fa38 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080e90:	4c10      	ldr	r4, [pc, #64]	; (8080ed4 <_Z11setTimeZone6String+0xa4>)
 8080e92:	6020      	str	r0, [r4, #0]
 8080e94:	f7ff fcf6 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  Particle.publish("Time",Time.timeStr(t));
 8080e98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8080e9c:	a804      	add	r0, sp, #16
 8080e9e:	f001 fd79 	bl	8082994 <_ZN9TimeClass7timeStrEx>
 8080ea2:	9a04      	ldr	r2, [sp, #16]
 8080ea4:	490a      	ldr	r1, [pc, #40]	; (8080ed0 <_Z11setTimeZone6String+0xa0>)
 8080ea6:	a802      	add	r0, sp, #8
 8080ea8:	f7ff f9f4 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8080eac:	a803      	add	r0, sp, #12
 8080eae:	f7ff fd3b 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080eb2:	a804      	add	r0, sp, #16
 8080eb4:	f001 fbe1 	bl	808267a <_ZN6StringD1Ev>
 8080eb8:	f000 fa22 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080ebc:	6020      	str	r0, [r4, #0]
  return 1;
 8080ebe:	2001      	movs	r0, #1
}
 8080ec0:	b049      	add	sp, #292	; 0x124
 8080ec2:	bd30      	pop	{r4, r5, pc}
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080ec4:	2000      	movs	r0, #0
 8080ec6:	e7fb      	b.n	8080ec0 <_Z11setTimeZone6String+0x90>
 8080ec8:	200000e8 	.word	0x200000e8
 8080ecc:	080844f6 	.word	0x080844f6
 8080ed0:	0808450a 	.word	0x0808450a
 8080ed4:	200000bc 	.word	0x200000bc

08080ed8 <_Z12resolveAlertv>:
  char data[128] = "";
 8080ed8:	2100      	movs	r1, #0
{
 8080eda:	b510      	push	{r4, lr}
 8080edc:	b0a4      	sub	sp, #144	; 0x90
  char data[128] = "";
 8080ede:	227c      	movs	r2, #124	; 0x7c
 8080ee0:	a805      	add	r0, sp, #20
 8080ee2:	9104      	str	r1, [sp, #16]
 8080ee4:	f003 f8bf 	bl	8084066 <memset>
  if (alertValue & 0b00000001) strcat(data,"Control Power - ");
 8080ee8:	4b18      	ldr	r3, [pc, #96]	; (8080f4c <_Z12resolveAlertv+0x74>)
 8080eea:	781c      	ldrb	r4, [r3, #0]
 8080eec:	07e0      	lsls	r0, r4, #31
 8080eee:	d503      	bpl.n	8080ef8 <_Z12resolveAlertv+0x20>
 8080ef0:	4917      	ldr	r1, [pc, #92]	; (8080f50 <_Z12resolveAlertv+0x78>)
 8080ef2:	a804      	add	r0, sp, #16
 8080ef4:	f003 f8e4 	bl	80840c0 <strcat>
  if (alertValue & 0b00000010) strcat(data,"Low Level - ");
 8080ef8:	07a1      	lsls	r1, r4, #30
 8080efa:	d503      	bpl.n	8080f04 <_Z12resolveAlertv+0x2c>
 8080efc:	4915      	ldr	r1, [pc, #84]	; (8080f54 <_Z12resolveAlertv+0x7c>)
 8080efe:	a804      	add	r0, sp, #16
 8080f00:	f003 f8de 	bl	80840c0 <strcat>
  if (alertValue & 0b00000100) strcat(data,"Pump On - ");
 8080f04:	0762      	lsls	r2, r4, #29
 8080f06:	d503      	bpl.n	8080f10 <_Z12resolveAlertv+0x38>
 8080f08:	4913      	ldr	r1, [pc, #76]	; (8080f58 <_Z12resolveAlertv+0x80>)
 8080f0a:	a804      	add	r0, sp, #16
 8080f0c:	f003 f8d8 	bl	80840c0 <strcat>
  if (alertValue & 0b10000000) strcat(data,"Particle Power");
 8080f10:	0623      	lsls	r3, r4, #24
 8080f12:	d503      	bpl.n	8080f1c <_Z12resolveAlertv+0x44>
 8080f14:	4911      	ldr	r1, [pc, #68]	; (8080f5c <_Z12resolveAlertv+0x84>)
 8080f16:	a804      	add	r0, sp, #16
 8080f18:	f003 f8d2 	bl	80840c0 <strcat>
 8080f1c:	f7ff fcb2 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  if(verboseMode) Particle.publish("Alerts",data,PRIVATE);
 8080f20:	4b0f      	ldr	r3, [pc, #60]	; (8080f60 <_Z12resolveAlertv+0x88>)
 8080f22:	781b      	ldrb	r3, [r3, #0]
 8080f24:	b163      	cbz	r3, 8080f40 <_Z12resolveAlertv+0x68>
 8080f26:	4b0f      	ldr	r3, [pc, #60]	; (8080f64 <_Z12resolveAlertv+0x8c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080f28:	a802      	add	r0, sp, #8
 8080f2a:	781b      	ldrb	r3, [r3, #0]
 8080f2c:	490e      	ldr	r1, [pc, #56]	; (8080f68 <_Z12resolveAlertv+0x90>)
 8080f2e:	f88d 3000 	strb.w	r3, [sp]
 8080f32:	aa04      	add	r2, sp, #16
 8080f34:	233c      	movs	r3, #60	; 0x3c
 8080f36:	f000 ff8f 	bl	8081e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080f3a:	a803      	add	r0, sp, #12
 8080f3c:	f7ff fcf4 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080f40:	f000 f9de 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080f44:	4b09      	ldr	r3, [pc, #36]	; (8080f6c <_Z12resolveAlertv+0x94>)
 8080f46:	6018      	str	r0, [r3, #0]
}
 8080f48:	b024      	add	sp, #144	; 0x90
 8080f4a:	bd10      	pop	{r4, pc}
 8080f4c:	200000a2 	.word	0x200000a2
 8080f50:	0808450f 	.word	0x0808450f
 8080f54:	08084520 	.word	0x08084520
 8080f58:	0808452d 	.word	0x0808452d
 8080f5c:	08084538 	.word	0x08084538
 8080f60:	200000f0 	.word	0x200000f0
 8080f64:	200000a1 	.word	0x200000a1
 8080f68:	0808440e 	.word	0x0808440e
 8080f6c:	200000bc 	.word	0x200000bc

08080f70 <_Z9sendEventv>:
{
 8080f70:	b500      	push	{lr}
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpAmps\":%i, \"pumpMins\":%i, \"battery\":%i, \"resets\":%i}",alertValue, pumpAmps, dailyPumpingMins, stateOfCharge,resetCount);
 8080f72:	4b14      	ldr	r3, [pc, #80]	; (8080fc4 <_Z9sendEventv+0x54>)
{
 8080f74:	b0c7      	sub	sp, #284	; 0x11c
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpAmps\":%i, \"pumpMins\":%i, \"battery\":%i, \"resets\":%i}",alertValue, pumpAmps, dailyPumpingMins, stateOfCharge,resetCount);
 8080f76:	681b      	ldr	r3, [r3, #0]
 8080f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080f7c:	9303      	str	r3, [sp, #12]
 8080f7e:	4b12      	ldr	r3, [pc, #72]	; (8080fc8 <_Z9sendEventv+0x58>)
 8080f80:	4a12      	ldr	r2, [pc, #72]	; (8080fcc <_Z9sendEventv+0x5c>)
 8080f82:	681b      	ldr	r3, [r3, #0]
 8080f84:	a806      	add	r0, sp, #24
 8080f86:	9302      	str	r3, [sp, #8]
 8080f88:	4b11      	ldr	r3, [pc, #68]	; (8080fd0 <_Z9sendEventv+0x60>)
 8080f8a:	681b      	ldr	r3, [r3, #0]
 8080f8c:	9301      	str	r3, [sp, #4]
 8080f8e:	4b11      	ldr	r3, [pc, #68]	; (8080fd4 <_Z9sendEventv+0x64>)
 8080f90:	681b      	ldr	r3, [r3, #0]
 8080f92:	9300      	str	r3, [sp, #0]
 8080f94:	4b10      	ldr	r3, [pc, #64]	; (8080fd8 <_Z9sendEventv+0x68>)
 8080f96:	781b      	ldrb	r3, [r3, #0]
 8080f98:	f000 fc4a 	bl	8081830 <snprintf>
 8080f9c:	4b0f      	ldr	r3, [pc, #60]	; (8080fdc <_Z9sendEventv+0x6c>)
 8080f9e:	aa06      	add	r2, sp, #24
 8080fa0:	781b      	ldrb	r3, [r3, #0]
 8080fa2:	490f      	ldr	r1, [pc, #60]	; (8080fe0 <_Z9sendEventv+0x70>)
 8080fa4:	f88d 3000 	strb.w	r3, [sp]
 8080fa8:	a804      	add	r0, sp, #16
 8080faa:	233c      	movs	r3, #60	; 0x3c
 8080fac:	f000 ff54 	bl	8081e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080fb0:	a805      	add	r0, sp, #20
 8080fb2:	f7ff fcb9 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true; // set the data inflight flag
 8080fb6:	2201      	movs	r2, #1
 8080fb8:	4b0a      	ldr	r3, [pc, #40]	; (8080fe4 <_Z9sendEventv+0x74>)
 8080fba:	701a      	strb	r2, [r3, #0]
}
 8080fbc:	b047      	add	sp, #284	; 0x11c
 8080fbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8080fc2:	bf00      	nop
 8080fc4:	200000d8 	.word	0x200000d8
 8080fc8:	200000e4 	.word	0x200000e4
 8080fcc:	08084547 	.word	0x08084547
 8080fd0:	200000b4 	.word	0x200000b4
 8080fd4:	200000c8 	.word	0x200000c8
 8080fd8:	200000a2 	.word	0x200000a2
 8080fdc:	200000a1 	.word	0x200000a1
 8080fe0:	08084592 	.word	0x08084592
 8080fe4:	200000b8 	.word	0x200000b8

08080fe8 <loop>:
{
 8080fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch(state) {
 8080fea:	4c6e      	ldr	r4, [pc, #440]	; (80811a4 <loop+0x1bc>)
 8080fec:	7823      	ldrb	r3, [r4, #0]
 8080fee:	3b01      	subs	r3, #1
 8080ff0:	2b05      	cmp	r3, #5
 8080ff2:	d84f      	bhi.n	8081094 <loop+0xac>
 8080ff4:	e8df f003 	tbb	[pc, r3]
 8080ff8:	354e03af 	.word	0x354e03af
 8080ffc:	8550      	.short	0x8550
    waitUntil(meterSampleRate);
 8080ffe:	f7ff fc4d 	bl	808089c <_Z15meterSampleRatev>
        while (_while() && !_condition()) {
 8081002:	b910      	cbnz	r0, 808100a <loop+0x22>
            spark_process();
 8081004:	f000 fb44 	bl	8081690 <spark_process>
        while (_while() && !_condition()) {
 8081008:	e7f9      	b.n	8080ffe <loop+0x16>
 808100a:	f7ff fc47 	bl	808089c <_Z15meterSampleRatev>
    if(takeMeasurements()) state = REPORTING_STATE;
 808100e:	f7ff faff 	bl	8080610 <_Z16takeMeasurementsv>
 8081012:	b108      	cbz	r0, 8081018 <loop+0x30>
 8081014:	2305      	movs	r3, #5
 8081016:	7023      	strb	r3, [r4, #0]
 8081018:	f000 f972 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
    lastSample = millis();
 808101c:	4b62      	ldr	r3, [pc, #392]	; (80811a8 <loop+0x1c0>)
 808101e:	6018      	str	r0, [r3, #0]
    if (Time.hour() != currentHourlyPeriod) {
 8081020:	f001 fd1e 	bl	8082a60 <_ZN9TimeClass4hourEv>
 8081024:	4b61      	ldr	r3, [pc, #388]	; (80811ac <loop+0x1c4>)
 8081026:	781b      	ldrb	r3, [r3, #0]
 8081028:	4298      	cmp	r0, r3
 808102a:	d011      	beq.n	8081050 <loop+0x68>
      state = REPORTING_STATE;                                    // We want to report on the hour
 808102c:	2305      	movs	r3, #5
 808102e:	7023      	strb	r3, [r4, #0]
      if (Time.hour() == 0) {                                     // Check to see if it is midnight
 8081030:	f001 fd16 	bl	8082a60 <_ZN9TimeClass4hourEv>
 8081034:	4605      	mov	r5, r0
 8081036:	b958      	cbnz	r0, 8081050 <loop+0x68>
        dailyPumpingMins = 0;                                     // Reset each day.
 8081038:	4b5d      	ldr	r3, [pc, #372]	; (80811b0 <loop+0x1c8>)
        FRAMwrite16(FRAM::dailyPumpMinutesAddr,0);                          // And zero the value in FRAM
 808103a:	4601      	mov	r1, r0
        dailyPumpingMins = 0;                                     // Reset each day.
 808103c:	6018      	str	r0, [r3, #0]
        FRAMwrite16(FRAM::dailyPumpMinutesAddr,0);                          // And zero the value in FRAM
 808103e:	200a      	movs	r0, #10
 8081040:	f7ff f95c 	bl	80802fc <_Z11FRAMwrite16ji>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081044:	f000 fb34 	bl	80816b0 <spark_cloud_flag_connected>
        if (!connected()) {
 8081048:	b110      	cbz	r0, 8081050 <loop+0x68>
        return spark_sync_time(NULL);
 808104a:	4628      	mov	r0, r5
 808104c:	f000 fb50 	bl	80816f0 <spark_sync_time>
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // The battery is low - sleep
 8081050:	4b58      	ldr	r3, [pc, #352]	; (80811b4 <loop+0x1cc>)
 8081052:	681a      	ldr	r2, [r3, #0]
 8081054:	4b58      	ldr	r3, [pc, #352]	; (80811b8 <loop+0x1d0>)
 8081056:	681b      	ldr	r3, [r3, #0]
 8081058:	429a      	cmp	r2, r3
 808105a:	dc1b      	bgt.n	8081094 <loop+0xac>
 808105c:	2304      	movs	r3, #4
        state = ERROR_STATE;
 808105e:	7023      	strb	r3, [r4, #0]
        break;
 8081060:	e018      	b.n	8081094 <loop+0xac>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081062:	f000 fb25 	bl	80816b0 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 8081066:	b108      	cbz	r0, 808106c <loop+0x84>
        disconnectFromParticle();                               // If connected, we need to disconned and power down the modem
 8081068:	f7ff fa68 	bl	808053c <_Z22disconnectFromParticlev>
      ledState = false;
 808106c:	2100      	movs	r1, #0
 808106e:	4b53      	ldr	r3, [pc, #332]	; (80811bc <loop+0x1d4>)
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8081070:	2007      	movs	r0, #7
      ledState = false;
 8081072:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8081074:	f001 ff69 	bl	8082f4a <digitalWrite>
      watchdogISR();                                            // Pet the watchdog
 8081078:	f7ff f8ce 	bl	8080218 <_Z11watchdogISRv>
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 808107c:	f001 fcfc 	bl	8082a78 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8081080:	223c      	movs	r2, #60	; 0x3c
 8081082:	4b4f      	ldr	r3, [pc, #316]	; (80811c0 <loop+0x1d8>)
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 8081084:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8081088:	4342      	muls	r2, r0
 808108a:	2101      	movs	r1, #1
 808108c:	4668      	mov	r0, sp
 808108e:	681b      	ldr	r3, [r3, #0]
 8081090:	f001 fbe6 	bl	8082860 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8081094:	b003      	add	sp, #12
 8081096:	bd30      	pop	{r4, r5, pc}
    watchdogISR();                                    // Pet the watchdog once an hour
 8081098:	f7ff f8be 	bl	8080218 <_Z11watchdogISRv>
    pettingEnabled = false;                           // see this reporint cycle through
 808109c:	2300      	movs	r3, #0
 808109e:	4d49      	ldr	r5, [pc, #292]	; (80811c4 <loop+0x1dc>)
 80810a0:	702b      	strb	r3, [r5, #0]
 80810a2:	f000 fb05 	bl	80816b0 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
 80810a6:	b940      	cbnz	r0, 80810ba <loop+0xd2>
      if (!connectToParticle()) {
 80810a8:	f7ff f9d8 	bl	808045c <_Z17connectToParticlev>
 80810ac:	b928      	cbnz	r0, 80810ba <loop+0xd2>
 80810ae:	f000 f927 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
 80810b2:	4b45      	ldr	r3, [pc, #276]	; (80811c8 <loop+0x1e0>)
 80810b4:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;
 80810b6:	2301      	movs	r3, #1
 80810b8:	e7d1      	b.n	808105e <loop+0x76>
    if (alertValue != 0) resolveAlert();
 80810ba:	4b44      	ldr	r3, [pc, #272]	; (80811cc <loop+0x1e4>)
 80810bc:	781b      	ldrb	r3, [r3, #0]
 80810be:	b10b      	cbz	r3, 80810c4 <loop+0xdc>
 80810c0:	f7ff ff0a 	bl	8080ed8 <_Z12resolveAlertv>
    sendEvent();
 80810c4:	f7ff ff54 	bl	8080f70 <_Z9sendEventv>
 80810c8:	f000 f91a 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
    webhookTimeStamp = millis();
 80810cc:	4b40      	ldr	r3, [pc, #256]	; (80811d0 <loop+0x1e8>)
 80810ce:	6018      	str	r0, [r3, #0]
    currentHourlyPeriod = Time.hour();                                // Change the time period since we have reported for this one
 80810d0:	f001 fcc6 	bl	8082a60 <_ZN9TimeClass4hourEv>
 80810d4:	4b35      	ldr	r3, [pc, #212]	; (80811ac <loop+0x1c4>)
 80810d6:	7018      	strb	r0, [r3, #0]
        return waitConditionWhile(_condition, []{ return true; });
 80810d8:	f7ff fbd4 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    pettingEnabled = true;
 80810dc:	2301      	movs	r3, #1
 80810de:	702b      	strb	r3, [r5, #0]
    if (verboseMode) Particle.publish("State","Waiting for Response");
 80810e0:	4b3c      	ldr	r3, [pc, #240]	; (80811d4 <loop+0x1ec>)
 80810e2:	781b      	ldrb	r3, [r3, #0]
 80810e4:	b13b      	cbz	r3, 80810f6 <loop+0x10e>
 80810e6:	4668      	mov	r0, sp
 80810e8:	4a3b      	ldr	r2, [pc, #236]	; (80811d8 <loop+0x1f0>)
 80810ea:	493c      	ldr	r1, [pc, #240]	; (80811dc <loop+0x1f4>)
 80810ec:	f7ff f8d2 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80810f0:	a801      	add	r0, sp, #4
 80810f2:	f7ff fc19 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80810f6:	f000 f903 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80810fa:	4b39      	ldr	r3, [pc, #228]	; (80811e0 <loop+0x1f8>)
 80810fc:	6018      	str	r0, [r3, #0]
    state = RESP_WAIT_STATE;                                          // Wait for Response
 80810fe:	2306      	movs	r3, #6
 8081100:	e7ad      	b.n	808105e <loop+0x76>
    if (!dataInFlight)                                                // Response received
 8081102:	4b38      	ldr	r3, [pc, #224]	; (80811e4 <loop+0x1fc>)
 8081104:	781b      	ldrb	r3, [r3, #0]
 8081106:	b99b      	cbnz	r3, 8081130 <loop+0x148>
      state = IDLE_STATE;
 8081108:	2302      	movs	r3, #2
 808110a:	7023      	strb	r3, [r4, #0]
 808110c:	f7ff fbba 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
      if (verboseMode) Particle.publish("State","Idle");
 8081110:	4b30      	ldr	r3, [pc, #192]	; (80811d4 <loop+0x1ec>)
 8081112:	781b      	ldrb	r3, [r3, #0]
 8081114:	b13b      	cbz	r3, 8081126 <loop+0x13e>
 8081116:	4a34      	ldr	r2, [pc, #208]	; (80811e8 <loop+0x200>)
 8081118:	4668      	mov	r0, sp
 808111a:	4930      	ldr	r1, [pc, #192]	; (80811dc <loop+0x1f4>)
 808111c:	f7ff f8ba 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8081120:	a801      	add	r0, sp, #4
 8081122:	f7ff fc01 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081126:	f000 f8eb 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 808112a:	4b2d      	ldr	r3, [pc, #180]	; (80811e0 <loop+0x1f8>)
 808112c:	6018      	str	r0, [r3, #0]
 808112e:	e7b1      	b.n	8081094 <loop+0xac>
 8081130:	f000 f8e6 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp >= webhookWait) {            // If it takes too long - will need to reset
 8081134:	4b26      	ldr	r3, [pc, #152]	; (80811d0 <loop+0x1e8>)
 8081136:	681b      	ldr	r3, [r3, #0]
 8081138:	1ac0      	subs	r0, r0, r3
 808113a:	4b2c      	ldr	r3, [pc, #176]	; (80811ec <loop+0x204>)
 808113c:	681b      	ldr	r3, [r3, #0]
 808113e:	4298      	cmp	r0, r3
 8081140:	d3a8      	bcc.n	8081094 <loop+0xac>
 8081142:	f000 f8dd 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8081146:	4b20      	ldr	r3, [pc, #128]	; (80811c8 <loop+0x1e0>)
 8081148:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;  // Response timed out
 808114a:	2301      	movs	r3, #1
 808114c:	7023      	strb	r3, [r4, #0]
 808114e:	f7ff fb99 	bl	8080884 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
      Particle.publish("State","Response Timeout Error");
 8081152:	4a27      	ldr	r2, [pc, #156]	; (80811f0 <loop+0x208>)
 8081154:	e7e0      	b.n	8081118 <loop+0x130>
 8081156:	f000 f8d3 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetTimeStamp >= resetWait)
 808115a:	4b1b      	ldr	r3, [pc, #108]	; (80811c8 <loop+0x1e0>)
 808115c:	681b      	ldr	r3, [r3, #0]
 808115e:	1ac0      	subs	r0, r0, r3
 8081160:	4b24      	ldr	r3, [pc, #144]	; (80811f4 <loop+0x20c>)
 8081162:	681b      	ldr	r3, [r3, #0]
 8081164:	4298      	cmp	r0, r3
 8081166:	d395      	bcc.n	8081094 <loop+0xac>
        if(verboseMode) Particle.publish("State","ERROR_STATE - Resetting");
 8081168:	4b1a      	ldr	r3, [pc, #104]	; (80811d4 <loop+0x1ec>)
 808116a:	781b      	ldrb	r3, [r3, #0]
 808116c:	b13b      	cbz	r3, 808117e <loop+0x196>
 808116e:	4668      	mov	r0, sp
 8081170:	4a21      	ldr	r2, [pc, #132]	; (80811f8 <loop+0x210>)
 8081172:	491a      	ldr	r1, [pc, #104]	; (80811dc <loop+0x1f4>)
 8081174:	f7ff f88e 	bl	8080294 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 8081178:	a801      	add	r0, sp, #4
 808117a:	f7ff fbd5 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 808117e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081182:	f000 fb81 	bl	8081888 <delay>
        if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 8081186:	4b1d      	ldr	r3, [pc, #116]	; (80811fc <loop+0x214>)
 8081188:	681b      	ldr	r3, [r3, #0]
 808118a:	2b03      	cmp	r3, #3
 808118c:	dc02      	bgt.n	8081194 <loop+0x1ac>
 808118e:	f001 fb64 	bl	808285a <_ZN11SystemClass5resetEv>
 8081192:	e77f      	b.n	8081094 <loop+0xac>
          FRAMwrite8(FRAM::resetCountAddr,0);                           // If so, store incremented number - watchdog must have done This
 8081194:	2100      	movs	r1, #0
 8081196:	2003      	movs	r0, #3
 8081198:	f7ff f896 	bl	80802c8 <_Z10FRAMwrite8jh>
          fullModemReset();                                   // Full Modem reset and reboot
 808119c:	f7ff fb90 	bl	80808c0 <_Z14fullModemResetv>
}
 80811a0:	e778      	b.n	8081094 <loop+0xac>
 80811a2:	bf00      	nop
 80811a4:	200000e0 	.word	0x200000e0
 80811a8:	200000c0 	.word	0x200000c0
 80811ac:	200000b1 	.word	0x200000b1
 80811b0:	200000b4 	.word	0x200000b4
 80811b4:	200000e4 	.word	0x200000e4
 80811b8:	20000000 	.word	0x20000000
 80811bc:	200000c4 	.word	0x200000c4
 80811c0:	2000009c 	.word	0x2000009c
 80811c4:	20000004 	.word	0x20000004
 80811c8:	200000dc 	.word	0x200000dc
 80811cc:	200000a2 	.word	0x200000a2
 80811d0:	200000f4 	.word	0x200000f4
 80811d4:	200000f0 	.word	0x200000f0
 80811d8:	080845a3 	.word	0x080845a3
 80811dc:	080844c8 	.word	0x080844c8
 80811e0:	200000bc 	.word	0x200000bc
 80811e4:	200000b8 	.word	0x200000b8
 80811e8:	080845b8 	.word	0x080845b8
 80811ec:	20000014 	.word	0x20000014
 80811f0:	080845bd 	.word	0x080845bd
 80811f4:	2000000c 	.word	0x2000000c
 80811f8:	080845d4 	.word	0x080845d4
 80811fc:	200000d8 	.word	0x200000d8

08081200 <_GLOBAL__sub_I_fram>:
}
 8081200:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
 8081202:	2400      	movs	r4, #0
 8081204:	2501      	movs	r5, #1
 8081206:	4b12      	ldr	r3, [pc, #72]	; (8081250 <_GLOBAL__sub_I_fram+0x50>)
Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 8081208:	4812      	ldr	r0, [pc, #72]	; (8081254 <_GLOBAL__sub_I_fram+0x54>)
 808120a:	601c      	str	r4, [r3, #0]
 808120c:	4b12      	ldr	r3, [pc, #72]	; (8081258 <_GLOBAL__sub_I_fram+0x58>)
 808120e:	701c      	strb	r4, [r3, #0]
 8081210:	4b12      	ldr	r3, [pc, #72]	; (808125c <_GLOBAL__sub_I_fram+0x5c>)
 8081212:	701d      	strb	r5, [r3, #0]
 8081214:	f7fe ff59 	bl	80800ca <_ZN17Adafruit_FRAM_I2CC1Ev>
              error_(SYSTEM_ERROR_NONE) {
 8081218:	4b11      	ldr	r3, [pc, #68]	; (8081260 <_GLOBAL__sub_I_fram+0x60>)
    SleepResult() {}
 808121a:	4a12      	ldr	r2, [pc, #72]	; (8081264 <_GLOBAL__sub_I_fram+0x64>)
              error_(SYSTEM_ERROR_NONE) {
 808121c:	601c      	str	r4, [r3, #0]
 808121e:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
 8081220:	719c      	strb	r4, [r3, #6]
 8081222:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 8081224:	2002      	movs	r0, #2
 8081226:	f000 f9cd 	bl	80815c4 <set_system_mode>
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 808122a:	4621      	mov	r1, r4
 808122c:	4628      	mov	r0, r5
 808122e:	f000 f9e1 	bl	80815f4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
 8081232:	4629      	mov	r1, r5
 8081234:	2004      	movs	r0, #4
 8081236:	f000 f843 	bl	80812c0 <HAL_Feature_Set>
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 808123a:	4621      	mov	r1, r4
 808123c:	480a      	ldr	r0, [pc, #40]	; (8081268 <_GLOBAL__sub_I_fram+0x68>)
 808123e:	f000 ff8d 	bl	808215c <_ZN9FuelGaugeC1Eb>
PMIC power;                      //Initalize the PMIC class so you can call the Power Management functions below.
 8081242:	4621      	mov	r1, r4
}
 8081244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
PMIC power;                      //Initalize the PMIC class so you can call the Power Management functions below.
 8081248:	4808      	ldr	r0, [pc, #32]	; (808126c <_GLOBAL__sub_I_fram+0x6c>)
 808124a:	f001 b99c 	b.w	8082586 <_ZN4PMICC1Eb>
 808124e:	bf00      	nop
 8081250:	2000009c 	.word	0x2000009c
 8081254:	200000b9 	.word	0x200000b9
 8081258:	200000a0 	.word	0x200000a0
 808125c:	200000a1 	.word	0x200000a1
 8081260:	20000090 	.word	0x20000090
 8081264:	ffff0000 	.word	0xffff0000
 8081268:	200000a8 	.word	0x200000a8
 808126c:	200000c5 	.word	0x200000c5

08081270 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081270:	b508      	push	{r3, lr}
 8081272:	4b02      	ldr	r3, [pc, #8]	; (808127c <inet_gethostbyname+0xc>)
 8081274:	681b      	ldr	r3, [r3, #0]
 8081276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081278:	9301      	str	r3, [sp, #4]
 808127a:	bd08      	pop	{r3, pc}
 808127c:	08060020 	.word	0x08060020

08081280 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081280:	b508      	push	{r3, lr}
 8081282:	4b02      	ldr	r3, [pc, #8]	; (808128c <cellular_signal+0xc>)
 8081284:	681b      	ldr	r3, [r3, #0]
 8081286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081288:	9301      	str	r3, [sp, #4]
 808128a:	bd08      	pop	{r3, pc}
 808128c:	08060020 	.word	0x08060020

08081290 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081290:	b508      	push	{r3, lr}
 8081292:	4b02      	ldr	r3, [pc, #8]	; (808129c <cellular_command+0xc>)
 8081294:	681b      	ldr	r3, [r3, #0]
 8081296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081298:	9301      	str	r3, [sp, #4]
 808129a:	bd08      	pop	{r3, pc}
 808129c:	08060020 	.word	0x08060020

080812a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80812a0:	b508      	push	{r3, lr}
 80812a2:	4b02      	ldr	r3, [pc, #8]	; (80812ac <os_mutex_recursive_create+0xc>)
 80812a4:	681b      	ldr	r3, [r3, #0]
 80812a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80812a8:	9301      	str	r3, [sp, #4]
 80812aa:	bd08      	pop	{r3, pc}
 80812ac:	080401d0 	.word	0x080401d0

080812b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80812b0:	b508      	push	{r3, lr}
 80812b2:	4b02      	ldr	r3, [pc, #8]	; (80812bc <os_mutex_recursive_destroy+0xc>)
 80812b4:	681b      	ldr	r3, [r3, #0]
 80812b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80812b8:	9301      	str	r3, [sp, #4]
 80812ba:	bd08      	pop	{r3, pc}
 80812bc:	080401d0 	.word	0x080401d0

080812c0 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80812c0:	b508      	push	{r3, lr}
 80812c2:	4b02      	ldr	r3, [pc, #8]	; (80812cc <HAL_Feature_Set+0xc>)
 80812c4:	681b      	ldr	r3, [r3, #0]
 80812c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80812c8:	9301      	str	r3, [sp, #4]
 80812ca:	bd08      	pop	{r3, pc}
 80812cc:	080401b8 	.word	0x080401b8

080812d0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80812d0:	b508      	push	{r3, lr}
 80812d2:	4b02      	ldr	r3, [pc, #8]	; (80812dc <HAL_Core_Get_Last_Reset_Info+0xc>)
 80812d4:	681b      	ldr	r3, [r3, #0]
 80812d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80812d8:	9301      	str	r3, [sp, #4]
 80812da:	bd08      	pop	{r3, pc}
 80812dc:	080401b8 	.word	0x080401b8

080812e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80812e0:	b508      	push	{r3, lr}
 80812e2:	4b02      	ldr	r3, [pc, #8]	; (80812ec <HAL_RNG_GetRandomNumber+0xc>)
 80812e4:	681b      	ldr	r3, [r3, #0]
 80812e6:	685b      	ldr	r3, [r3, #4]
 80812e8:	9301      	str	r3, [sp, #4]
 80812ea:	bd08      	pop	{r3, pc}
 80812ec:	0804019c 	.word	0x0804019c

080812f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80812f0:	b508      	push	{r3, lr}
 80812f2:	4b02      	ldr	r3, [pc, #8]	; (80812fc <HAL_Delay_Microseconds+0xc>)
 80812f4:	681b      	ldr	r3, [r3, #0]
 80812f6:	68db      	ldr	r3, [r3, #12]
 80812f8:	9301      	str	r3, [sp, #4]
 80812fa:	bd08      	pop	{r3, pc}
 80812fc:	0804019c 	.word	0x0804019c

08081300 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081300:	b508      	push	{r3, lr}
 8081302:	4b02      	ldr	r3, [pc, #8]	; (808130c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081304:	681b      	ldr	r3, [r3, #0]
 8081306:	695b      	ldr	r3, [r3, #20]
 8081308:	9301      	str	r3, [sp, #4]
 808130a:	bd08      	pop	{r3, pc}
 808130c:	0804019c 	.word	0x0804019c

08081310 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8081310:	b508      	push	{r3, lr}
 8081312:	4b02      	ldr	r3, [pc, #8]	; (808131c <hal_rtc_time_is_valid+0xc>)
 8081314:	681b      	ldr	r3, [r3, #0]
 8081316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081318:	9301      	str	r3, [sp, #4]
 808131a:	bd08      	pop	{r3, pc}
 808131c:	0804019c 	.word	0x0804019c

08081320 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081320:	b508      	push	{r3, lr}
 8081322:	4b02      	ldr	r3, [pc, #8]	; (808132c <hal_timer_millis+0xc>)
 8081324:	681b      	ldr	r3, [r3, #0]
 8081326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081328:	9301      	str	r3, [sp, #4]
 808132a:	bd08      	pop	{r3, pc}
 808132c:	0804019c 	.word	0x0804019c

08081330 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8081330:	b508      	push	{r3, lr}
 8081332:	4b02      	ldr	r3, [pc, #8]	; (808133c <hal_rtc_get_time+0xc>)
 8081334:	681b      	ldr	r3, [r3, #0]
 8081336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081338:	9301      	str	r3, [sp, #4]
 808133a:	bd08      	pop	{r3, pc}
 808133c:	0804019c 	.word	0x0804019c

08081340 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8081340:	b508      	push	{r3, lr}
 8081342:	4b02      	ldr	r3, [pc, #8]	; (808134c <HAL_Pin_Map+0xc>)
 8081344:	681b      	ldr	r3, [r3, #0]
 8081346:	681b      	ldr	r3, [r3, #0]
 8081348:	9301      	str	r3, [sp, #4]
 808134a:	bd08      	pop	{r3, pc}
 808134c:	080401b0 	.word	0x080401b0

08081350 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081350:	b508      	push	{r3, lr}
 8081352:	4b02      	ldr	r3, [pc, #8]	; (808135c <HAL_Validate_Pin_Function+0xc>)
 8081354:	681b      	ldr	r3, [r3, #0]
 8081356:	685b      	ldr	r3, [r3, #4]
 8081358:	9301      	str	r3, [sp, #4]
 808135a:	bd08      	pop	{r3, pc}
 808135c:	080401b0 	.word	0x080401b0

08081360 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081360:	b508      	push	{r3, lr}
 8081362:	4b02      	ldr	r3, [pc, #8]	; (808136c <HAL_Pin_Mode+0xc>)
 8081364:	681b      	ldr	r3, [r3, #0]
 8081366:	689b      	ldr	r3, [r3, #8]
 8081368:	9301      	str	r3, [sp, #4]
 808136a:	bd08      	pop	{r3, pc}
 808136c:	080401b0 	.word	0x080401b0

08081370 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081370:	b508      	push	{r3, lr}
 8081372:	4b02      	ldr	r3, [pc, #8]	; (808137c <HAL_Get_Pin_Mode+0xc>)
 8081374:	681b      	ldr	r3, [r3, #0]
 8081376:	68db      	ldr	r3, [r3, #12]
 8081378:	9301      	str	r3, [sp, #4]
 808137a:	bd08      	pop	{r3, pc}
 808137c:	080401b0 	.word	0x080401b0

08081380 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081380:	b508      	push	{r3, lr}
 8081382:	4b02      	ldr	r3, [pc, #8]	; (808138c <HAL_GPIO_Write+0xc>)
 8081384:	681b      	ldr	r3, [r3, #0]
 8081386:	691b      	ldr	r3, [r3, #16]
 8081388:	9301      	str	r3, [sp, #4]
 808138a:	bd08      	pop	{r3, pc}
 808138c:	080401b0 	.word	0x080401b0

08081390 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081390:	b508      	push	{r3, lr}
 8081392:	4b02      	ldr	r3, [pc, #8]	; (808139c <HAL_Interrupts_Attach+0xc>)
 8081394:	681b      	ldr	r3, [r3, #0]
 8081396:	699b      	ldr	r3, [r3, #24]
 8081398:	9301      	str	r3, [sp, #4]
 808139a:	bd08      	pop	{r3, pc}
 808139c:	080401b0 	.word	0x080401b0

080813a0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80813a0:	b508      	push	{r3, lr}
 80813a2:	4b02      	ldr	r3, [pc, #8]	; (80813ac <HAL_Interrupts_Detach+0xc>)
 80813a4:	681b      	ldr	r3, [r3, #0]
 80813a6:	69db      	ldr	r3, [r3, #28]
 80813a8:	9301      	str	r3, [sp, #4]
 80813aa:	bd08      	pop	{r3, pc}
 80813ac:	080401b0 	.word	0x080401b0

080813b0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80813b0:	b508      	push	{r3, lr}
 80813b2:	4b02      	ldr	r3, [pc, #8]	; (80813bc <hal_adc_read+0xc>)
 80813b4:	681b      	ldr	r3, [r3, #0]
 80813b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80813b8:	9301      	str	r3, [sp, #4]
 80813ba:	bd08      	pop	{r3, pc}
 80813bc:	080401b0 	.word	0x080401b0

080813c0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80813c0:	b508      	push	{r3, lr}
 80813c2:	4b02      	ldr	r3, [pc, #8]	; (80813cc <hal_i2c_begin+0xc>)
 80813c4:	681b      	ldr	r3, [r3, #0]
 80813c6:	68db      	ldr	r3, [r3, #12]
 80813c8:	9301      	str	r3, [sp, #4]
 80813ca:	bd08      	pop	{r3, pc}
 80813cc:	080401ac 	.word	0x080401ac

080813d0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80813d0:	b508      	push	{r3, lr}
 80813d2:	4b02      	ldr	r3, [pc, #8]	; (80813dc <hal_i2c_begin_transmission+0xc>)
 80813d4:	681b      	ldr	r3, [r3, #0]
 80813d6:	699b      	ldr	r3, [r3, #24]
 80813d8:	9301      	str	r3, [sp, #4]
 80813da:	bd08      	pop	{r3, pc}
 80813dc:	080401ac 	.word	0x080401ac

080813e0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80813e0:	b508      	push	{r3, lr}
 80813e2:	4b02      	ldr	r3, [pc, #8]	; (80813ec <hal_i2c_end_transmission+0xc>)
 80813e4:	681b      	ldr	r3, [r3, #0]
 80813e6:	69db      	ldr	r3, [r3, #28]
 80813e8:	9301      	str	r3, [sp, #4]
 80813ea:	bd08      	pop	{r3, pc}
 80813ec:	080401ac 	.word	0x080401ac

080813f0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80813f0:	b508      	push	{r3, lr}
 80813f2:	4b02      	ldr	r3, [pc, #8]	; (80813fc <hal_i2c_write+0xc>)
 80813f4:	681b      	ldr	r3, [r3, #0]
 80813f6:	6a1b      	ldr	r3, [r3, #32]
 80813f8:	9301      	str	r3, [sp, #4]
 80813fa:	bd08      	pop	{r3, pc}
 80813fc:	080401ac 	.word	0x080401ac

08081400 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8081400:	b508      	push	{r3, lr}
 8081402:	4b02      	ldr	r3, [pc, #8]	; (808140c <hal_i2c_available+0xc>)
 8081404:	681b      	ldr	r3, [r3, #0]
 8081406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081408:	9301      	str	r3, [sp, #4]
 808140a:	bd08      	pop	{r3, pc}
 808140c:	080401ac 	.word	0x080401ac

08081410 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8081410:	b508      	push	{r3, lr}
 8081412:	4b02      	ldr	r3, [pc, #8]	; (808141c <hal_i2c_read+0xc>)
 8081414:	681b      	ldr	r3, [r3, #0]
 8081416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081418:	9301      	str	r3, [sp, #4]
 808141a:	bd08      	pop	{r3, pc}
 808141c:	080401ac 	.word	0x080401ac

08081420 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8081420:	b508      	push	{r3, lr}
 8081422:	4b02      	ldr	r3, [pc, #8]	; (808142c <hal_i2c_peek+0xc>)
 8081424:	681b      	ldr	r3, [r3, #0]
 8081426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081428:	9301      	str	r3, [sp, #4]
 808142a:	bd08      	pop	{r3, pc}
 808142c:	080401ac 	.word	0x080401ac

08081430 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8081430:	b508      	push	{r3, lr}
 8081432:	4b02      	ldr	r3, [pc, #8]	; (808143c <hal_i2c_flush+0xc>)
 8081434:	681b      	ldr	r3, [r3, #0]
 8081436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081438:	9301      	str	r3, [sp, #4]
 808143a:	bd08      	pop	{r3, pc}
 808143c:	080401ac 	.word	0x080401ac

08081440 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8081440:	b508      	push	{r3, lr}
 8081442:	4b02      	ldr	r3, [pc, #8]	; (808144c <hal_i2c_is_enabled+0xc>)
 8081444:	681b      	ldr	r3, [r3, #0]
 8081446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081448:	9301      	str	r3, [sp, #4]
 808144a:	bd08      	pop	{r3, pc}
 808144c:	080401ac 	.word	0x080401ac

08081450 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8081450:	b508      	push	{r3, lr}
 8081452:	4b02      	ldr	r3, [pc, #8]	; (808145c <hal_i2c_init+0xc>)
 8081454:	681b      	ldr	r3, [r3, #0]
 8081456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081458:	9301      	str	r3, [sp, #4]
 808145a:	bd08      	pop	{r3, pc}
 808145c:	080401ac 	.word	0x080401ac

08081460 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8081460:	b508      	push	{r3, lr}
 8081462:	4b02      	ldr	r3, [pc, #8]	; (808146c <hal_i2c_lock+0xc>)
 8081464:	681b      	ldr	r3, [r3, #0]
 8081466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081468:	9301      	str	r3, [sp, #4]
 808146a:	bd08      	pop	{r3, pc}
 808146c:	080401ac 	.word	0x080401ac

08081470 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8081470:	b508      	push	{r3, lr}
 8081472:	4b02      	ldr	r3, [pc, #8]	; (808147c <hal_i2c_unlock+0xc>)
 8081474:	681b      	ldr	r3, [r3, #0]
 8081476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081478:	9301      	str	r3, [sp, #4]
 808147a:	bd08      	pop	{r3, pc}
 808147c:	080401ac 	.word	0x080401ac

08081480 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081480:	b508      	push	{r3, lr}
 8081482:	4b02      	ldr	r3, [pc, #8]	; (808148c <hal_i2c_request_ex+0xc>)
 8081484:	681b      	ldr	r3, [r3, #0]
 8081486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081488:	9301      	str	r3, [sp, #4]
 808148a:	bd08      	pop	{r3, pc}
 808148c:	080401ac 	.word	0x080401ac

08081490 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081490:	b508      	push	{r3, lr}
 8081492:	4b02      	ldr	r3, [pc, #8]	; (808149c <hal_spi_init+0xc>)
 8081494:	681b      	ldr	r3, [r3, #0]
 8081496:	69db      	ldr	r3, [r3, #28]
 8081498:	9301      	str	r3, [sp, #4]
 808149a:	bd08      	pop	{r3, pc}
 808149c:	080401b4 	.word	0x080401b4

080814a0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80814a0:	b508      	push	{r3, lr}
 80814a2:	4b02      	ldr	r3, [pc, #8]	; (80814ac <hal_spi_is_enabled+0xc>)
 80814a4:	681b      	ldr	r3, [r3, #0]
 80814a6:	6a1b      	ldr	r3, [r3, #32]
 80814a8:	9301      	str	r3, [sp, #4]
 80814aa:	bd08      	pop	{r3, pc}
 80814ac:	080401b4 	.word	0x080401b4

080814b0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80814b0:	b508      	push	{r3, lr}
 80814b2:	4b02      	ldr	r3, [pc, #8]	; (80814bc <hal_usart_init+0xc>)
 80814b4:	681b      	ldr	r3, [r3, #0]
 80814b6:	699b      	ldr	r3, [r3, #24]
 80814b8:	9301      	str	r3, [sp, #4]
 80814ba:	bd08      	pop	{r3, pc}
 80814bc:	080401c4 	.word	0x080401c4

080814c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80814c0:	b508      	push	{r3, lr}
 80814c2:	4b02      	ldr	r3, [pc, #8]	; (80814cc <hal_usart_write+0xc>)
 80814c4:	681b      	ldr	r3, [r3, #0]
 80814c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80814c8:	9301      	str	r3, [sp, #4]
 80814ca:	bd08      	pop	{r3, pc}
 80814cc:	080401c4 	.word	0x080401c4

080814d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80814d0:	b508      	push	{r3, lr}
 80814d2:	4b02      	ldr	r3, [pc, #8]	; (80814dc <hal_usart_available+0xc>)
 80814d4:	681b      	ldr	r3, [r3, #0]
 80814d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80814d8:	9301      	str	r3, [sp, #4]
 80814da:	bd08      	pop	{r3, pc}
 80814dc:	080401c4 	.word	0x080401c4

080814e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80814e0:	b508      	push	{r3, lr}
 80814e2:	4b02      	ldr	r3, [pc, #8]	; (80814ec <hal_usart_read+0xc>)
 80814e4:	681b      	ldr	r3, [r3, #0]
 80814e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80814e8:	9301      	str	r3, [sp, #4]
 80814ea:	bd08      	pop	{r3, pc}
 80814ec:	080401c4 	.word	0x080401c4

080814f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80814f0:	b508      	push	{r3, lr}
 80814f2:	4b02      	ldr	r3, [pc, #8]	; (80814fc <hal_usart_peek+0xc>)
 80814f4:	681b      	ldr	r3, [r3, #0]
 80814f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80814f8:	9301      	str	r3, [sp, #4]
 80814fa:	bd08      	pop	{r3, pc}
 80814fc:	080401c4 	.word	0x080401c4

08081500 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8081500:	b508      	push	{r3, lr}
 8081502:	4b02      	ldr	r3, [pc, #8]	; (808150c <hal_usart_flush+0xc>)
 8081504:	681b      	ldr	r3, [r3, #0]
 8081506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081508:	9301      	str	r3, [sp, #4]
 808150a:	bd08      	pop	{r3, pc}
 808150c:	080401c4 	.word	0x080401c4

08081510 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8081510:	b508      	push	{r3, lr}
 8081512:	4b02      	ldr	r3, [pc, #8]	; (808151c <hal_usart_is_enabled+0xc>)
 8081514:	681b      	ldr	r3, [r3, #0]
 8081516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081518:	9301      	str	r3, [sp, #4]
 808151a:	bd08      	pop	{r3, pc}
 808151c:	080401c4 	.word	0x080401c4

08081520 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8081520:	b508      	push	{r3, lr}
 8081522:	4b02      	ldr	r3, [pc, #8]	; (808152c <hal_usart_available_data_for_write+0xc>)
 8081524:	681b      	ldr	r3, [r3, #0]
 8081526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081528:	9301      	str	r3, [sp, #4]
 808152a:	bd08      	pop	{r3, pc}
 808152c:	080401c4 	.word	0x080401c4

08081530 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081530:	b508      	push	{r3, lr}
 8081532:	4b02      	ldr	r3, [pc, #8]	; (808153c <HAL_USB_USART_Init+0xc>)
 8081534:	681b      	ldr	r3, [r3, #0]
 8081536:	681b      	ldr	r3, [r3, #0]
 8081538:	9301      	str	r3, [sp, #4]
 808153a:	bd08      	pop	{r3, pc}
 808153c:	0806001c 	.word	0x0806001c

08081540 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081540:	b508      	push	{r3, lr}
 8081542:	4b02      	ldr	r3, [pc, #8]	; (808154c <HAL_USB_USART_Available_Data+0xc>)
 8081544:	681b      	ldr	r3, [r3, #0]
 8081546:	691b      	ldr	r3, [r3, #16]
 8081548:	9301      	str	r3, [sp, #4]
 808154a:	bd08      	pop	{r3, pc}
 808154c:	0806001c 	.word	0x0806001c

08081550 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081550:	b508      	push	{r3, lr}
 8081552:	4b02      	ldr	r3, [pc, #8]	; (808155c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081554:	681b      	ldr	r3, [r3, #0]
 8081556:	695b      	ldr	r3, [r3, #20]
 8081558:	9301      	str	r3, [sp, #4]
 808155a:	bd08      	pop	{r3, pc}
 808155c:	0806001c 	.word	0x0806001c

08081560 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081560:	b508      	push	{r3, lr}
 8081562:	4b02      	ldr	r3, [pc, #8]	; (808156c <HAL_USB_USART_Receive_Data+0xc>)
 8081564:	681b      	ldr	r3, [r3, #0]
 8081566:	699b      	ldr	r3, [r3, #24]
 8081568:	9301      	str	r3, [sp, #4]
 808156a:	bd08      	pop	{r3, pc}
 808156c:	0806001c 	.word	0x0806001c

08081570 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081570:	b508      	push	{r3, lr}
 8081572:	4b02      	ldr	r3, [pc, #8]	; (808157c <HAL_USB_USART_Send_Data+0xc>)
 8081574:	681b      	ldr	r3, [r3, #0]
 8081576:	69db      	ldr	r3, [r3, #28]
 8081578:	9301      	str	r3, [sp, #4]
 808157a:	bd08      	pop	{r3, pc}
 808157c:	0806001c 	.word	0x0806001c

08081580 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081580:	b508      	push	{r3, lr}
 8081582:	4b02      	ldr	r3, [pc, #8]	; (808158c <HAL_USB_USART_Flush_Data+0xc>)
 8081584:	681b      	ldr	r3, [r3, #0]
 8081586:	6a1b      	ldr	r3, [r3, #32]
 8081588:	9301      	str	r3, [sp, #4]
 808158a:	bd08      	pop	{r3, pc}
 808158c:	0806001c 	.word	0x0806001c

08081590 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8081590:	b508      	push	{r3, lr}
 8081592:	4b02      	ldr	r3, [pc, #8]	; (808159c <panic_+0xc>)
 8081594:	681b      	ldr	r3, [r3, #0]
 8081596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081598:	9301      	str	r3, [sp, #4]
 808159a:	bd08      	pop	{r3, pc}
 808159c:	080201a0 	.word	0x080201a0

080815a0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 80815a0:	b508      	push	{r3, lr}
 80815a2:	4b03      	ldr	r3, [pc, #12]	; (80815b0 <diag_get_source+0x10>)
 80815a4:	681b      	ldr	r3, [r3, #0]
 80815a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80815aa:	9301      	str	r3, [sp, #4]
 80815ac:	bd08      	pop	{r3, pc}
 80815ae:	0000      	.short	0x0000
 80815b0:	080201a0 	.word	0x080201a0

080815b4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80815b4:	b508      	push	{r3, lr}
 80815b6:	4b02      	ldr	r3, [pc, #8]	; (80815c0 <system_mode+0xc>)
 80815b8:	681b      	ldr	r3, [r3, #0]
 80815ba:	681b      	ldr	r3, [r3, #0]
 80815bc:	9301      	str	r3, [sp, #4]
 80815be:	bd08      	pop	{r3, pc}
 80815c0:	080401a4 	.word	0x080401a4

080815c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80815c4:	b508      	push	{r3, lr}
 80815c6:	4b02      	ldr	r3, [pc, #8]	; (80815d0 <set_system_mode+0xc>)
 80815c8:	681b      	ldr	r3, [r3, #0]
 80815ca:	685b      	ldr	r3, [r3, #4]
 80815cc:	9301      	str	r3, [sp, #4]
 80815ce:	bd08      	pop	{r3, pc}
 80815d0:	080401a4 	.word	0x080401a4

080815d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80815d4:	b508      	push	{r3, lr}
 80815d6:	4b02      	ldr	r3, [pc, #8]	; (80815e0 <system_delay_ms+0xc>)
 80815d8:	681b      	ldr	r3, [r3, #0]
 80815da:	695b      	ldr	r3, [r3, #20]
 80815dc:	9301      	str	r3, [sp, #4]
 80815de:	bd08      	pop	{r3, pc}
 80815e0:	080401a4 	.word	0x080401a4

080815e4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80815e4:	b508      	push	{r3, lr}
 80815e6:	4b02      	ldr	r3, [pc, #8]	; (80815f0 <system_sleep+0xc>)
 80815e8:	681b      	ldr	r3, [r3, #0]
 80815ea:	699b      	ldr	r3, [r3, #24]
 80815ec:	9301      	str	r3, [sp, #4]
 80815ee:	bd08      	pop	{r3, pc}
 80815f0:	080401a4 	.word	0x080401a4

080815f4 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80815f4:	b508      	push	{r3, lr}
 80815f6:	4b02      	ldr	r3, [pc, #8]	; (8081600 <system_thread_set_state+0xc>)
 80815f8:	681b      	ldr	r3, [r3, #0]
 80815fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80815fc:	9301      	str	r3, [sp, #4]
 80815fe:	bd08      	pop	{r3, pc}
 8081600:	080401a4 	.word	0x080401a4

08081604 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081604:	b508      	push	{r3, lr}
 8081606:	4b02      	ldr	r3, [pc, #8]	; (8081610 <application_thread_current+0xc>)
 8081608:	681b      	ldr	r3, [r3, #0]
 808160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808160c:	9301      	str	r3, [sp, #4]
 808160e:	bd08      	pop	{r3, pc}
 8081610:	080401a4 	.word	0x080401a4

08081614 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081614:	b508      	push	{r3, lr}
 8081616:	4b02      	ldr	r3, [pc, #8]	; (8081620 <application_thread_invoke+0xc>)
 8081618:	681b      	ldr	r3, [r3, #0]
 808161a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808161c:	9301      	str	r3, [sp, #4]
 808161e:	bd08      	pop	{r3, pc}
 8081620:	080401a4 	.word	0x080401a4

08081624 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081624:	b508      	push	{r3, lr}
 8081626:	4b02      	ldr	r3, [pc, #8]	; (8081630 <system_thread_get_state+0xc>)
 8081628:	681b      	ldr	r3, [r3, #0]
 808162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808162c:	9301      	str	r3, [sp, #4]
 808162e:	bd08      	pop	{r3, pc}
 8081630:	080401a4 	.word	0x080401a4

08081634 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081634:	b508      	push	{r3, lr}
 8081636:	4b03      	ldr	r3, [pc, #12]	; (8081644 <system_ctrl_set_app_request_handler+0x10>)
 8081638:	681b      	ldr	r3, [r3, #0]
 808163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808163e:	9301      	str	r3, [sp, #4]
 8081640:	bd08      	pop	{r3, pc}
 8081642:	0000      	.short	0x0000
 8081644:	080401a4 	.word	0x080401a4

08081648 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081648:	b508      	push	{r3, lr}
 808164a:	4b03      	ldr	r3, [pc, #12]	; (8081658 <system_ctrl_set_result+0x10>)
 808164c:	681b      	ldr	r3, [r3, #0]
 808164e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081652:	9301      	str	r3, [sp, #4]
 8081654:	bd08      	pop	{r3, pc}
 8081656:	0000      	.short	0x0000
 8081658:	080401a4 	.word	0x080401a4

0808165c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 808165c:	b508      	push	{r3, lr}
 808165e:	4b03      	ldr	r3, [pc, #12]	; (808166c <system_reset+0x10>)
 8081660:	681b      	ldr	r3, [r3, #0]
 8081662:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8081666:	9301      	str	r3, [sp, #4]
 8081668:	bd08      	pop	{r3, pc}
 808166a:	0000      	.short	0x0000
 808166c:	080401a4 	.word	0x080401a4

08081670 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081670:	b508      	push	{r3, lr}
 8081672:	4b02      	ldr	r3, [pc, #8]	; (808167c <spark_variable+0xc>)
 8081674:	681b      	ldr	r3, [r3, #0]
 8081676:	681b      	ldr	r3, [r3, #0]
 8081678:	9301      	str	r3, [sp, #4]
 808167a:	bd08      	pop	{r3, pc}
 808167c:	080401cc 	.word	0x080401cc

08081680 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081680:	b508      	push	{r3, lr}
 8081682:	4b02      	ldr	r3, [pc, #8]	; (808168c <spark_function+0xc>)
 8081684:	681b      	ldr	r3, [r3, #0]
 8081686:	685b      	ldr	r3, [r3, #4]
 8081688:	9301      	str	r3, [sp, #4]
 808168a:	bd08      	pop	{r3, pc}
 808168c:	080401cc 	.word	0x080401cc

08081690 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081690:	b508      	push	{r3, lr}
 8081692:	4b02      	ldr	r3, [pc, #8]	; (808169c <spark_process+0xc>)
 8081694:	681b      	ldr	r3, [r3, #0]
 8081696:	689b      	ldr	r3, [r3, #8]
 8081698:	9301      	str	r3, [sp, #4]
 808169a:	bd08      	pop	{r3, pc}
 808169c:	080401cc 	.word	0x080401cc

080816a0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80816a0:	b508      	push	{r3, lr}
 80816a2:	4b02      	ldr	r3, [pc, #8]	; (80816ac <spark_cloud_flag_connect+0xc>)
 80816a4:	681b      	ldr	r3, [r3, #0]
 80816a6:	68db      	ldr	r3, [r3, #12]
 80816a8:	9301      	str	r3, [sp, #4]
 80816aa:	bd08      	pop	{r3, pc}
 80816ac:	080401cc 	.word	0x080401cc

080816b0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80816b0:	b508      	push	{r3, lr}
 80816b2:	4b02      	ldr	r3, [pc, #8]	; (80816bc <spark_cloud_flag_connected+0xc>)
 80816b4:	681b      	ldr	r3, [r3, #0]
 80816b6:	695b      	ldr	r3, [r3, #20]
 80816b8:	9301      	str	r3, [sp, #4]
 80816ba:	bd08      	pop	{r3, pc}
 80816bc:	080401cc 	.word	0x080401cc

080816c0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80816c0:	b508      	push	{r3, lr}
 80816c2:	4b02      	ldr	r3, [pc, #8]	; (80816cc <spark_deviceID+0xc>)
 80816c4:	681b      	ldr	r3, [r3, #0]
 80816c6:	69db      	ldr	r3, [r3, #28]
 80816c8:	9301      	str	r3, [sp, #4]
 80816ca:	bd08      	pop	{r3, pc}
 80816cc:	080401cc 	.word	0x080401cc

080816d0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80816d0:	b508      	push	{r3, lr}
 80816d2:	4b02      	ldr	r3, [pc, #8]	; (80816dc <spark_send_event+0xc>)
 80816d4:	681b      	ldr	r3, [r3, #0]
 80816d6:	6a1b      	ldr	r3, [r3, #32]
 80816d8:	9301      	str	r3, [sp, #4]
 80816da:	bd08      	pop	{r3, pc}
 80816dc:	080401cc 	.word	0x080401cc

080816e0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80816e0:	b508      	push	{r3, lr}
 80816e2:	4b02      	ldr	r3, [pc, #8]	; (80816ec <spark_subscribe+0xc>)
 80816e4:	681b      	ldr	r3, [r3, #0]
 80816e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80816e8:	9301      	str	r3, [sp, #4]
 80816ea:	bd08      	pop	{r3, pc}
 80816ec:	080401cc 	.word	0x080401cc

080816f0 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80816f0:	b508      	push	{r3, lr}
 80816f2:	4b02      	ldr	r3, [pc, #8]	; (80816fc <spark_sync_time+0xc>)
 80816f4:	681b      	ldr	r3, [r3, #0]
 80816f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80816f8:	9301      	str	r3, [sp, #4]
 80816fa:	bd08      	pop	{r3, pc}
 80816fc:	080401cc 	.word	0x080401cc

08081700 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081700:	b508      	push	{r3, lr}
 8081702:	4b02      	ldr	r3, [pc, #8]	; (808170c <spark_sync_time_pending+0xc>)
 8081704:	681b      	ldr	r3, [r3, #0]
 8081706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081708:	9301      	str	r3, [sp, #4]
 808170a:	bd08      	pop	{r3, pc}
 808170c:	080401cc 	.word	0x080401cc

08081710 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081710:	b508      	push	{r3, lr}
 8081712:	4b02      	ldr	r3, [pc, #8]	; (808171c <spark_set_random_seed_from_cloud_handler+0xc>)
 8081714:	681b      	ldr	r3, [r3, #0]
 8081716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081718:	9301      	str	r3, [sp, #4]
 808171a:	bd08      	pop	{r3, pc}
 808171c:	080401cc 	.word	0x080401cc

08081720 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8081720:	b508      	push	{r3, lr}
 8081722:	4b02      	ldr	r3, [pc, #8]	; (808172c <spark_cloud_disconnect+0xc>)
 8081724:	681b      	ldr	r3, [r3, #0]
 8081726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081728:	9301      	str	r3, [sp, #4]
 808172a:	bd08      	pop	{r3, pc}
 808172c:	080401cc 	.word	0x080401cc

08081730 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081730:	b508      	push	{r3, lr}
 8081732:	4b02      	ldr	r3, [pc, #8]	; (808173c <network_connect+0xc>)
 8081734:	681b      	ldr	r3, [r3, #0]
 8081736:	685b      	ldr	r3, [r3, #4]
 8081738:	9301      	str	r3, [sp, #4]
 808173a:	bd08      	pop	{r3, pc}
 808173c:	080401c8 	.word	0x080401c8

08081740 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081740:	b508      	push	{r3, lr}
 8081742:	4b02      	ldr	r3, [pc, #8]	; (808174c <network_connecting+0xc>)
 8081744:	681b      	ldr	r3, [r3, #0]
 8081746:	689b      	ldr	r3, [r3, #8]
 8081748:	9301      	str	r3, [sp, #4]
 808174a:	bd08      	pop	{r3, pc}
 808174c:	080401c8 	.word	0x080401c8

08081750 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081750:	b508      	push	{r3, lr}
 8081752:	4b02      	ldr	r3, [pc, #8]	; (808175c <network_disconnect+0xc>)
 8081754:	681b      	ldr	r3, [r3, #0]
 8081756:	68db      	ldr	r3, [r3, #12]
 8081758:	9301      	str	r3, [sp, #4]
 808175a:	bd08      	pop	{r3, pc}
 808175c:	080401c8 	.word	0x080401c8

08081760 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081760:	b508      	push	{r3, lr}
 8081762:	4b02      	ldr	r3, [pc, #8]	; (808176c <network_ready+0xc>)
 8081764:	681b      	ldr	r3, [r3, #0]
 8081766:	691b      	ldr	r3, [r3, #16]
 8081768:	9301      	str	r3, [sp, #4]
 808176a:	bd08      	pop	{r3, pc}
 808176c:	080401c8 	.word	0x080401c8

08081770 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081770:	b508      	push	{r3, lr}
 8081772:	4b02      	ldr	r3, [pc, #8]	; (808177c <network_on+0xc>)
 8081774:	681b      	ldr	r3, [r3, #0]
 8081776:	695b      	ldr	r3, [r3, #20]
 8081778:	9301      	str	r3, [sp, #4]
 808177a:	bd08      	pop	{r3, pc}
 808177c:	080401c8 	.word	0x080401c8

08081780 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081780:	b508      	push	{r3, lr}
 8081782:	4b02      	ldr	r3, [pc, #8]	; (808178c <network_off+0xc>)
 8081784:	681b      	ldr	r3, [r3, #0]
 8081786:	699b      	ldr	r3, [r3, #24]
 8081788:	9301      	str	r3, [sp, #4]
 808178a:	bd08      	pop	{r3, pc}
 808178c:	080401c8 	.word	0x080401c8

08081790 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081790:	b508      	push	{r3, lr}
 8081792:	4b02      	ldr	r3, [pc, #8]	; (808179c <network_listen+0xc>)
 8081794:	681b      	ldr	r3, [r3, #0]
 8081796:	69db      	ldr	r3, [r3, #28]
 8081798:	9301      	str	r3, [sp, #4]
 808179a:	bd08      	pop	{r3, pc}
 808179c:	080401c8 	.word	0x080401c8

080817a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80817a0:	b508      	push	{r3, lr}
 80817a2:	4b02      	ldr	r3, [pc, #8]	; (80817ac <network_listening+0xc>)
 80817a4:	681b      	ldr	r3, [r3, #0]
 80817a6:	6a1b      	ldr	r3, [r3, #32]
 80817a8:	9301      	str	r3, [sp, #4]
 80817aa:	bd08      	pop	{r3, pc}
 80817ac:	080401c8 	.word	0x080401c8

080817b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80817b0:	b508      	push	{r3, lr}
 80817b2:	4b02      	ldr	r3, [pc, #8]	; (80817bc <network_set_listen_timeout+0xc>)
 80817b4:	681b      	ldr	r3, [r3, #0]
 80817b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80817b8:	9301      	str	r3, [sp, #4]
 80817ba:	bd08      	pop	{r3, pc}
 80817bc:	080401c8 	.word	0x080401c8

080817c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80817c0:	b508      	push	{r3, lr}
 80817c2:	4b02      	ldr	r3, [pc, #8]	; (80817cc <network_get_listen_timeout+0xc>)
 80817c4:	681b      	ldr	r3, [r3, #0]
 80817c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80817c8:	9301      	str	r3, [sp, #4]
 80817ca:	bd08      	pop	{r3, pc}
 80817cc:	080401c8 	.word	0x080401c8

080817d0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80817d0:	b508      	push	{r3, lr}
 80817d2:	4b02      	ldr	r3, [pc, #8]	; (80817dc <network_is_on+0xc>)
 80817d4:	681b      	ldr	r3, [r3, #0]
 80817d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80817d8:	9301      	str	r3, [sp, #4]
 80817da:	bd08      	pop	{r3, pc}
 80817dc:	080401c8 	.word	0x080401c8

080817e0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80817e0:	b508      	push	{r3, lr}
 80817e2:	4b02      	ldr	r3, [pc, #8]	; (80817ec <network_is_off+0xc>)
 80817e4:	681b      	ldr	r3, [r3, #0]
 80817e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80817e8:	9301      	str	r3, [sp, #4]
 80817ea:	bd08      	pop	{r3, pc}
 80817ec:	080401c8 	.word	0x080401c8

080817f0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80817f0:	b508      	push	{r3, lr}
 80817f2:	4b02      	ldr	r3, [pc, #8]	; (80817fc <malloc+0xc>)
 80817f4:	681b      	ldr	r3, [r3, #0]
 80817f6:	681b      	ldr	r3, [r3, #0]
 80817f8:	9301      	str	r3, [sp, #4]
 80817fa:	bd08      	pop	{r3, pc}
 80817fc:	080401a0 	.word	0x080401a0

08081800 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081800:	b508      	push	{r3, lr}
 8081802:	4b02      	ldr	r3, [pc, #8]	; (808180c <free+0xc>)
 8081804:	681b      	ldr	r3, [r3, #0]
 8081806:	685b      	ldr	r3, [r3, #4]
 8081808:	9301      	str	r3, [sp, #4]
 808180a:	bd08      	pop	{r3, pc}
 808180c:	080401a0 	.word	0x080401a0

08081810 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081810:	b508      	push	{r3, lr}
 8081812:	4b02      	ldr	r3, [pc, #8]	; (808181c <realloc+0xc>)
 8081814:	681b      	ldr	r3, [r3, #0]
 8081816:	689b      	ldr	r3, [r3, #8]
 8081818:	9301      	str	r3, [sp, #4]
 808181a:	bd08      	pop	{r3, pc}
 808181c:	080401a0 	.word	0x080401a0

08081820 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081820:	b508      	push	{r3, lr}
 8081822:	4b02      	ldr	r3, [pc, #8]	; (808182c <siprintf+0xc>)
 8081824:	681b      	ldr	r3, [r3, #0]
 8081826:	691b      	ldr	r3, [r3, #16]
 8081828:	9301      	str	r3, [sp, #4]
 808182a:	bd08      	pop	{r3, pc}
 808182c:	080401a0 	.word	0x080401a0

08081830 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081830:	b508      	push	{r3, lr}
 8081832:	4b02      	ldr	r3, [pc, #8]	; (808183c <snprintf+0xc>)
 8081834:	681b      	ldr	r3, [r3, #0]
 8081836:	69db      	ldr	r3, [r3, #28]
 8081838:	9301      	str	r3, [sp, #4]
 808183a:	bd08      	pop	{r3, pc}
 808183c:	080401a0 	.word	0x080401a0

08081840 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081840:	b508      	push	{r3, lr}
 8081842:	4b02      	ldr	r3, [pc, #8]	; (808184c <abort+0xc>)
 8081844:	681b      	ldr	r3, [r3, #0]
 8081846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081848:	9301      	str	r3, [sp, #4]
 808184a:	bd08      	pop	{r3, pc}
 808184c:	080401a0 	.word	0x080401a0

08081850 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081850:	b508      	push	{r3, lr}
 8081852:	4b02      	ldr	r3, [pc, #8]	; (808185c <_malloc_r+0xc>)
 8081854:	681b      	ldr	r3, [r3, #0]
 8081856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081858:	9301      	str	r3, [sp, #4]
 808185a:	bd08      	pop	{r3, pc}
 808185c:	080401a0 	.word	0x080401a0

08081860 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8081860:	b508      	push	{r3, lr}
 8081862:	4b02      	ldr	r3, [pc, #8]	; (808186c <newlib_impure_ptr_callback+0xc>)
 8081864:	681b      	ldr	r3, [r3, #0]
 8081866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081868:	9301      	str	r3, [sp, #4]
 808186a:	bd08      	pop	{r3, pc}
 808186c:	080401a0 	.word	0x080401a0

08081870 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 8081870:	428a      	cmp	r2, r1
{
 8081872:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 8081874:	d007      	beq.n	8081886 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 8081876:	9c02      	ldr	r4, [sp, #8]
 8081878:	1a40      	subs	r0, r0, r1
 808187a:	1ae4      	subs	r4, r4, r3
 808187c:	4360      	muls	r0, r4
 808187e:	1a52      	subs	r2, r2, r1
 8081880:	fb90 f0f2 	sdiv	r0, r0, r2
 8081884:	4418      	add	r0, r3
}
 8081886:	bd10      	pop	{r4, pc}

08081888 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081888:	2100      	movs	r1, #0
 808188a:	f7ff bea3 	b.w	80815d4 <system_delay_ms>

0808188e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808188e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081890:	6883      	ldr	r3, [r0, #8]
 8081892:	4604      	mov	r4, r0
 8081894:	b90b      	cbnz	r3, 808189a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081896:	f001 fc09 	bl	80830ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808189a:	68c3      	ldr	r3, [r0, #12]
 808189c:	4798      	blx	r3
      if (_M_manager)
 808189e:	68a3      	ldr	r3, [r4, #8]
 80818a0:	b11b      	cbz	r3, 80818aa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80818a2:	2203      	movs	r2, #3
 80818a4:	4621      	mov	r1, r4
 80818a6:	4620      	mov	r0, r4
 80818a8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80818aa:	4620      	mov	r0, r4
}
 80818ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80818b0:	2110      	movs	r1, #16
 80818b2:	f001 bbf7 	b.w	80830a4 <_ZdlPvj>

080818b6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80818b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 80818b8:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 80818ba:	b085      	sub	sp, #20
 80818bc:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80818be:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 80818c0:	460f      	mov	r7, r1
 80818c2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80818c4:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80818c6:	f002 fc30 	bl	808412a <strlen>
 80818ca:	687b      	ldr	r3, [r7, #4]
 80818cc:	b281      	uxth	r1, r0
 80818ce:	9600      	str	r6, [sp, #0]
 80818d0:	4628      	mov	r0, r5
 80818d2:	aa03      	add	r2, sp, #12
 80818d4:	f7ff fccc 	bl	8081270 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80818d8:	b130      	cbz	r0, 80818e8 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 80818da:	4631      	mov	r1, r6
 80818dc:	4620      	mov	r0, r4
 80818de:	f000 fdbb 	bl	8082458 <_ZN9IPAddressC1Em>
    }
 80818e2:	4620      	mov	r0, r4
 80818e4:	b005      	add	sp, #20
 80818e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80818e8:	4620      	mov	r0, r4
 80818ea:	a903      	add	r1, sp, #12
 80818ec:	f000 fdac 	bl	8082448 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80818f0:	e7f7      	b.n	80818e2 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080818f2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80818f2:	2200      	movs	r2, #0
 80818f4:	6840      	ldr	r0, [r0, #4]
 80818f6:	4611      	mov	r1, r2
 80818f8:	f7ff bf52 	b.w	80817a0 <network_listening>

080818fc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80818fc:	2200      	movs	r2, #0
 80818fe:	6840      	ldr	r0, [r0, #4]
 8081900:	4611      	mov	r1, r2
 8081902:	f7ff bf5d 	b.w	80817c0 <network_get_listen_timeout>

08081906 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8081906:	2200      	movs	r2, #0
 8081908:	6840      	ldr	r0, [r0, #4]
 808190a:	f7ff bf51 	b.w	80817b0 <network_set_listen_timeout>

0808190e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808190e:	2200      	movs	r2, #0
 8081910:	6840      	ldr	r0, [r0, #4]
 8081912:	f081 0101 	eor.w	r1, r1, #1
 8081916:	f7ff bf3b 	b.w	8081790 <network_listen>

0808191a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 808191a:	2300      	movs	r3, #0
 808191c:	6840      	ldr	r0, [r0, #4]
 808191e:	461a      	mov	r2, r3
 8081920:	4619      	mov	r1, r3
 8081922:	f7ff bf2d 	b.w	8081780 <network_off>

08081926 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8081926:	2300      	movs	r3, #0
 8081928:	6840      	ldr	r0, [r0, #4]
 808192a:	461a      	mov	r2, r3
 808192c:	4619      	mov	r1, r3
 808192e:	f7ff bf1f 	b.w	8081770 <network_on>

08081932 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8081932:	2200      	movs	r2, #0
 8081934:	6840      	ldr	r0, [r0, #4]
 8081936:	4611      	mov	r1, r2
 8081938:	f7ff bf02 	b.w	8081740 <network_connecting>

0808193c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808193c:	2200      	movs	r2, #0
 808193e:	2102      	movs	r1, #2
 8081940:	6840      	ldr	r0, [r0, #4]
 8081942:	f7ff bf05 	b.w	8081750 <network_disconnect>

08081946 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8081946:	2300      	movs	r3, #0
 8081948:	6840      	ldr	r0, [r0, #4]
 808194a:	461a      	mov	r2, r3
 808194c:	f7ff bef0 	b.w	8081730 <network_connect>

08081950 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081950:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
 8081952:	2500      	movs	r5, #0
 8081954:	2618      	movs	r6, #24
 8081956:	460f      	mov	r7, r1
 8081958:	4b19      	ldr	r3, [pc, #100]	; (80819c0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 808195a:	4632      	mov	r2, r6
 808195c:	6003      	str	r3, [r0, #0]
 808195e:	3330      	adds	r3, #48	; 0x30
 8081960:	4629      	mov	r1, r5
 8081962:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8081966:	b089      	sub	sp, #36	; 0x24
 8081968:	6043      	str	r3, [r0, #4]
 808196a:	4604      	mov	r4, r0
 808196c:	3010      	adds	r0, #16
 808196e:	f002 fb7a 	bl	8084066 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081972:	462a      	mov	r2, r5
 8081974:	4629      	mov	r1, r5
 8081976:	6878      	ldr	r0, [r7, #4]
 8081978:	f7ff fef2 	bl	8081760 <network_ready>
 808197c:	b918      	cbnz	r0, 8081986 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
 808197e:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
 8081980:	4620      	mov	r0, r4
 8081982:	b009      	add	sp, #36	; 0x24
 8081984:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
 8081986:	4629      	mov	r1, r5
 8081988:	4632      	mov	r2, r6
 808198a:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
 808198c:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
 8081990:	f002 fb69 	bl	8084066 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081994:	4668      	mov	r0, sp
 8081996:	a902      	add	r1, sp, #8
        sigext.size = sizeof(sigext);
 8081998:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 808199c:	f7ff fc70 	bl	8081280 <cellular_signal>
 80819a0:	b110      	cbz	r0, 80819a8 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
 80819a2:	2301      	movs	r3, #1
 80819a4:	60a3      	str	r3, [r4, #8]
            return sig;
 80819a6:	e7eb      	b.n	8081980 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
 80819a8:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80819aa:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
 80819ac:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80819ae:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80819b0:	b90b      	cbnz	r3, 80819b6 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
 80819b2:	2302      	movs	r3, #2
 80819b4:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
 80819b6:	4620      	mov	r0, r4
 80819b8:	a902      	add	r1, sp, #8
 80819ba:	f000 f8b8 	bl	8081b2e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
 80819be:	e7df      	b.n	8081980 <_ZN5spark13CellularClass4RSSIEv+0x30>
 80819c0:	08084660 	.word	0x08084660

080819c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80819c4:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80819c6:	2428      	movs	r4, #40	; 0x28
 80819c8:	4b07      	ldr	r3, [pc, #28]	; (80819e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80819ca:	4622      	mov	r2, r4
 80819cc:	4618      	mov	r0, r3
 80819ce:	2100      	movs	r1, #0
 80819d0:	f002 fb49 	bl	8084066 <memset>
        cid = -1;
 80819d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80819d8:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80819da:	2204      	movs	r2, #4
 80819dc:	4b03      	ldr	r3, [pc, #12]	; (80819ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80819de:	8004      	strh	r4, [r0, #0]
 80819e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80819e2:	4a03      	ldr	r2, [pc, #12]	; (80819f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 80819e4:	601a      	str	r2, [r3, #0]
 80819e6:	bd10      	pop	{r4, pc}
 80819e8:	20000100 	.word	0x20000100
 80819ec:	200000f8 	.word	0x200000f8
 80819f0:	08084624 	.word	0x08084624

080819f4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 80819f4:	4770      	bx	lr

080819f6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 80819f6:	7d00      	ldrb	r0, [r0, #20]
 80819f8:	4770      	bx	lr

080819fa <_ZNK14CellularSignal7isValidEv>:
    return n;
}
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
 80819fa:	4603      	mov	r3, r0
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 80819fc:	7d00      	ldrb	r0, [r0, #20]
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 80819fe:	b170      	cbz	r0, 8081a1e <_ZNK14CellularSignal7isValidEv+0x24>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 8081a00:	699a      	ldr	r2, [r3, #24]
 8081a02:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8081a06:	d007      	beq.n	8081a18 <_ZNK14CellularSignal7isValidEv+0x1e>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 8081a08:	2802      	cmp	r0, #2
 8081a0a:	d007      	beq.n	8081a1c <_ZNK14CellularSignal7isValidEv+0x22>
#if (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION)
            // U-blox GSM radios may not always support quality as it depends on the packet switching mode
            // at the time of network connection, which is not possible to query. For now, we will return "true"
            // for GSM Electrons and will not check if quality is actually supported / valid.
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
 8081a0c:	6a18      	ldr	r0, [r3, #32]
 8081a0e:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
 8081a12:	bf18      	it	ne
 8081a14:	2001      	movne	r0, #1
 8081a16:	4770      	bx	lr
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 8081a18:	2000      	movs	r0, #0
 8081a1a:	4770      	bx	lr
 8081a1c:	2001      	movs	r0, #1
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
 8081a1e:	4770      	bx	lr

08081a20 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
 8081a20:	6803      	ldr	r3, [r0, #0]
 8081a22:	6a1b      	ldr	r3, [r3, #32]
 8081a24:	4718      	bx	r3

08081a26 <_ZN14CellularSignalD0Ev>:
 8081a26:	b510      	push	{r4, lr}
 8081a28:	4604      	mov	r4, r0
 8081a2a:	2128      	movs	r1, #40	; 0x28
 8081a2c:	f001 fb3a 	bl	80830a4 <_ZdlPvj>
 8081a30:	4620      	mov	r0, r4
 8081a32:	bd10      	pop	{r4, pc}

08081a34 <_ZNK14CellularSignal11getStrengthEv>:
{
 8081a34:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8081a36:	7d03      	ldrb	r3, [r0, #20]
 8081a38:	b15b      	cbz	r3, 8081a52 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081a3a:	69c0      	ldr	r0, [r0, #28]
 8081a3c:	2800      	cmp	r0, #0
 8081a3e:	db08      	blt.n	8081a52 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081a40:	f002 f858 	bl	8083af4 <__aeabi_i2f>
 8081a44:	4904      	ldr	r1, [pc, #16]	; (8081a58 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081a46:	f002 f95d 	bl	8083d04 <__aeabi_fdiv>
 8081a4a:	4904      	ldr	r1, [pc, #16]	; (8081a5c <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081a4c:	f002 f8a6 	bl	8083b9c <__aeabi_fmul>
}
 8081a50:	bd08      	pop	{r3, pc}
    return -1.0f;
 8081a52:	4803      	ldr	r0, [pc, #12]	; (8081a60 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
 8081a54:	e7fc      	b.n	8081a50 <_ZNK14CellularSignal11getStrengthEv+0x1c>
 8081a56:	bf00      	nop
 8081a58:	477fff00 	.word	0x477fff00
 8081a5c:	42c80000 	.word	0x42c80000
 8081a60:	bf800000 	.word	0xbf800000

08081a64 <_ZNK14CellularSignal16getStrengthValueEv>:
{
 8081a64:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081a66:	7d03      	ldrb	r3, [r0, #20]
 8081a68:	b14b      	cbz	r3, 8081a7e <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
 8081a6a:	6980      	ldr	r0, [r0, #24]
 8081a6c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081a70:	d005      	beq.n	8081a7e <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
        return (float)sig_.rssi / 100.0f;
 8081a72:	f002 f83f 	bl	8083af4 <__aeabi_i2f>
 8081a76:	4903      	ldr	r1, [pc, #12]	; (8081a84 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081a78:	f002 f944 	bl	8083d04 <__aeabi_fdiv>
}
 8081a7c:	bd08      	pop	{r3, pc}
    return 0.0f;
 8081a7e:	2000      	movs	r0, #0
 8081a80:	e7fc      	b.n	8081a7c <_ZNK14CellularSignal16getStrengthValueEv+0x18>
 8081a82:	bf00      	nop
 8081a84:	42c80000 	.word	0x42c80000

08081a88 <_ZNK14CellularSignal10getQualityEv>:
{
 8081a88:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081a8a:	7d03      	ldrb	r3, [r0, #20]
 8081a8c:	b15b      	cbz	r3, 8081aa6 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081a8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081a90:	2800      	cmp	r0, #0
 8081a92:	db08      	blt.n	8081aa6 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081a94:	f002 f82e 	bl	8083af4 <__aeabi_i2f>
 8081a98:	4904      	ldr	r1, [pc, #16]	; (8081aac <_ZNK14CellularSignal10getQualityEv+0x24>)
 8081a9a:	f002 f933 	bl	8083d04 <__aeabi_fdiv>
 8081a9e:	4904      	ldr	r1, [pc, #16]	; (8081ab0 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081aa0:	f002 f87c 	bl	8083b9c <__aeabi_fmul>
}
 8081aa4:	bd08      	pop	{r3, pc}
    return -1.0f;
 8081aa6:	4803      	ldr	r0, [pc, #12]	; (8081ab4 <_ZNK14CellularSignal10getQualityEv+0x2c>)
 8081aa8:	e7fc      	b.n	8081aa4 <_ZNK14CellularSignal10getQualityEv+0x1c>
 8081aaa:	bf00      	nop
 8081aac:	477fff00 	.word	0x477fff00
 8081ab0:	42c80000 	.word	0x42c80000
 8081ab4:	bf800000 	.word	0xbf800000

08081ab8 <_ZNK14CellularSignal15getQualityValueEv>:
{
 8081ab8:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081aba:	7d03      	ldrb	r3, [r0, #20]
 8081abc:	b14b      	cbz	r3, 8081ad2 <_ZNK14CellularSignal15getQualityValueEv+0x1a>
 8081abe:	6a00      	ldr	r0, [r0, #32]
 8081ac0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081ac4:	d005      	beq.n	8081ad2 <_ZNK14CellularSignal15getQualityValueEv+0x1a>
        return (float)sig_.qual / 100.0f;
 8081ac6:	f002 f815 	bl	8083af4 <__aeabi_i2f>
 8081aca:	4903      	ldr	r1, [pc, #12]	; (8081ad8 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081acc:	f002 f91a 	bl	8083d04 <__aeabi_fdiv>
}
 8081ad0:	bd08      	pop	{r3, pc}
    return 0.0f;
 8081ad2:	2000      	movs	r0, #0
 8081ad4:	e7fc      	b.n	8081ad0 <_ZNK14CellularSignal15getQualityValueEv+0x18>
 8081ad6:	bf00      	nop
 8081ad8:	42c80000 	.word	0x42c80000

08081adc <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8081adc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 8081ade:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 8081ae0:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 8081ae2:	da0a      	bge.n	8081afa <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 8081ae4:	212d      	movs	r1, #45	; 0x2d
 8081ae6:	f000 fd7c 	bl	80825e2 <_ZN5Print5printEc>
 8081aea:	4605      	mov	r5, r0
            val = -n;
 8081aec:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8081aee:	220a      	movs	r2, #10
 8081af0:	4630      	mov	r0, r6
 8081af2:	f000 fd8f 	bl	8082614 <_ZN5Print11printNumberEmh>
    }
}
 8081af6:	4428      	add	r0, r5
 8081af8:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 8081afa:	4621      	mov	r1, r4
        size_t t = 0;
 8081afc:	2500      	movs	r5, #0
 8081afe:	e7f6      	b.n	8081aee <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

08081b00 <_ZNK14CellularSignal7printToER5Print>:
{
 8081b00:	b570      	push	{r4, r5, r6, lr}
 8081b02:	460c      	mov	r4, r1
 8081b04:	4605      	mov	r5, r0
 8081b06:	6881      	ldr	r1, [r0, #8]
 8081b08:	4620      	mov	r0, r4
 8081b0a:	f7ff ffe7 	bl	8081adc <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
 8081b0e:	212c      	movs	r1, #44	; 0x2c
 8081b10:	4606      	mov	r6, r0
 8081b12:	4620      	mov	r0, r4
 8081b14:	f000 fd65 	bl	80825e2 <_ZN5Print5printEc>
 8081b18:	68e9      	ldr	r1, [r5, #12]
 8081b1a:	4406      	add	r6, r0
size_t Print::print(T n, int base)
 8081b1c:	4620      	mov	r0, r4
 8081b1e:	f7ff ffdd 	bl	8081adc <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
 8081b22:	4430      	add	r0, r6
 8081b24:	bd70      	pop	{r4, r5, r6, pc}

08081b26 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081b26:	f1a0 0004 	sub.w	r0, r0, #4
 8081b2a:	f7ff bfe9 	b.w	8081b00 <_ZNK14CellularSignal7printToER5Print>

08081b2e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 8081b2e:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081b30:	460d      	mov	r5, r1
 8081b32:	f100 0410 	add.w	r4, r0, #16
 8081b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081b3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081b3e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8081b42:	2001      	movs	r0, #1
 8081b44:	bd30      	pop	{r4, r5, pc}

08081b46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081b46:	4770      	bx	lr

08081b48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8081b48:	2000      	movs	r0, #0
 8081b4a:	4770      	bx	lr

08081b4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081b4c:	b510      	push	{r4, lr}
 8081b4e:	4604      	mov	r4, r0
 8081b50:	2110      	movs	r1, #16
 8081b52:	f001 faa7 	bl	80830a4 <_ZdlPvj>
 8081b56:	4620      	mov	r0, r4
 8081b58:	bd10      	pop	{r4, pc}

08081b5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8081b5a:	b508      	push	{r3, lr}
      { delete this; }
 8081b5c:	f7ff fff6 	bl	8081b4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081b60:	bd08      	pop	{r3, pc}

08081b62 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8081b62:	b510      	push	{r4, lr}
      if (_M_manager)
 8081b64:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8081b66:	4604      	mov	r4, r0
      if (_M_manager)
 8081b68:	b113      	cbz	r3, 8081b70 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081b6a:	2203      	movs	r2, #3
 8081b6c:	4601      	mov	r1, r0
 8081b6e:	4798      	blx	r3
    }
 8081b70:	4620      	mov	r0, r4
 8081b72:	bd10      	pop	{r4, pc}

08081b74 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081b74:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8081b76:	b530      	push	{r4, r5, lr}
        type_(type) {
 8081b78:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8081b7c:	6002      	str	r2, [r0, #0]
 8081b7e:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081b80:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b82:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8081b84:	680c      	ldr	r4, [r1, #0]
 8081b86:	8085      	strh	r5, [r0, #4]
 8081b88:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b8a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8081b8c:	bd30      	pop	{r4, r5, pc}

08081b8e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081b8e:	b510      	push	{r4, lr}
 8081b90:	4604      	mov	r4, r0
    free((void*)msg_);
 8081b92:	6800      	ldr	r0, [r0, #0]
 8081b94:	f7ff fe34 	bl	8081800 <free>
}
 8081b98:	4620      	mov	r0, r4
 8081b9a:	bd10      	pop	{r4, pc}

08081b9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8081b9c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081b9e:	68c4      	ldr	r4, [r0, #12]
 8081ba0:	b1f4      	cbz	r4, 8081be0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8081ba2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081ba4:	2b02      	cmp	r3, #2
 8081ba6:	d103      	bne.n	8081bb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081ba8:	f104 000c 	add.w	r0, r4, #12
 8081bac:	f7ff ffef 	bl	8081b8e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8081bb0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8081bb2:	b135      	cbz	r5, 8081bc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8081bb4:	4628      	mov	r0, r5
 8081bb6:	f7ff ffd4 	bl	8081b62 <_ZNSt14_Function_baseD1Ev>
 8081bba:	2110      	movs	r1, #16
 8081bbc:	4628      	mov	r0, r5
 8081bbe:	f001 fa71 	bl	80830a4 <_ZdlPvj>
 8081bc2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081bc4:	b135      	cbz	r5, 8081bd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081bc6:	4628      	mov	r0, r5
 8081bc8:	f7ff ffcb 	bl	8081b62 <_ZNSt14_Function_baseD1Ev>
 8081bcc:	2110      	movs	r1, #16
 8081bce:	4628      	mov	r0, r5
 8081bd0:	f001 fa68 	bl	80830a4 <_ZdlPvj>
 8081bd4:	4620      	mov	r0, r4
 8081bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081bda:	2114      	movs	r1, #20
 8081bdc:	f001 ba62 	b.w	80830a4 <_ZdlPvj>
 8081be0:	bd38      	pop	{r3, r4, r5, pc}

08081be2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081be2:	b510      	push	{r4, lr}
 8081be4:	b088      	sub	sp, #32
 8081be6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081be8:	4668      	mov	r0, sp
 8081bea:	f000 fd90 	bl	808270e <_ZN6StringC1EPKc>
    return (*fn)(p);
 8081bee:	4669      	mov	r1, sp
 8081bf0:	a804      	add	r0, sp, #16
 8081bf2:	f000 fdae 	bl	8082752 <_ZN6StringC1ERKS_>
 8081bf6:	a804      	add	r0, sp, #16
 8081bf8:	47a0      	blx	r4
 8081bfa:	4604      	mov	r4, r0
 8081bfc:	a804      	add	r0, sp, #16
 8081bfe:	f000 fd3c 	bl	808267a <_ZN6StringD1Ev>
    String p(param);
 8081c02:	4668      	mov	r0, sp
 8081c04:	f000 fd39 	bl	808267a <_ZN6StringD1Ev>
}
 8081c08:	4620      	mov	r0, r4
 8081c0a:	b008      	add	sp, #32
 8081c0c:	bd10      	pop	{r4, pc}

08081c0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081c0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8081c10:	2300      	movs	r3, #0
         size = sizeof(*this);
 8081c12:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8081c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8081c18:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081c1a:	4669      	mov	r1, sp
 8081c1c:	461a      	mov	r2, r3
 8081c1e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8081c20:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8081c24:	f8ad 4000 	strh.w	r4, [sp]
 8081c28:	f7ff fd2a 	bl	8081680 <spark_function>
}
 8081c2c:	b004      	add	sp, #16
 8081c2e:	bd10      	pop	{r4, pc}

08081c30 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8081c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 8081c32:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 8081c34:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 8081c36:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 8081c3a:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 8081c3c:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 8081c40:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 8081c44:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 8081c46:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 8081c4a:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 8081c4e:	6843      	ldr	r3, [r0, #4]
 8081c50:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 8081c52:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081c54:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 8081c56:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081c5a:	f7ff fd61 	bl	8081720 <spark_cloud_disconnect>
}
 8081c5e:	b005      	add	sp, #20
 8081c60:	f85d fb04 	ldr.w	pc, [sp], #4

08081c64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 8081c64:	680b      	ldr	r3, [r1, #0]
 8081c66:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 8081c68:	b113      	cbz	r3, 8081c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8081c6a:	685a      	ldr	r2, [r3, #4]
 8081c6c:	3201      	adds	r2, #1
 8081c6e:	605a      	str	r2, [r3, #4]
      }
 8081c70:	4770      	bx	lr

08081c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081c74:	460e      	mov	r6, r1
 8081c76:	4604      	mov	r4, r0
 8081c78:	f856 3b04 	ldr.w	r3, [r6], #4
 8081c7c:	460d      	mov	r5, r1
 8081c7e:	a801      	add	r0, sp, #4
 8081c80:	4631      	mov	r1, r6
 8081c82:	9300      	str	r3, [sp, #0]
 8081c84:	f7ff ffee 	bl	8081c64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081c88:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081c8a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081c8c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8081c8e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8081c90:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8081c92:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8081c94:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081c96:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8081c98:	f7fe fe46 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081c9c:	4630      	mov	r0, r6
 8081c9e:	f7fe fe43 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8081ca2:	4628      	mov	r0, r5
 8081ca4:	2108      	movs	r1, #8
 8081ca6:	f001 f9fd 	bl	80830a4 <_ZdlPvj>
        return p;
    }
 8081caa:	4620      	mov	r0, r4
 8081cac:	b002      	add	sp, #8
 8081cae:	bd70      	pop	{r4, r5, r6, pc}

08081cb0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8081cb0:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081cb2:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8081cb4:	460b      	mov	r3, r1
 8081cb6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081cb8:	c803      	ldmia	r0, {r0, r1}
 8081cba:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081cbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081cc2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8081cca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081cce:	b002      	add	sp, #8
 8081cd0:	bd10      	pop	{r4, pc}

08081cd2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 8081cd2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8081cd4:	b510      	push	{r4, lr}
      if (_M_empty())
 8081cd6:	b90a      	cbnz	r2, 8081cdc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081cd8:	f001 f9e8 	bl	80830ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081cdc:	68c3      	ldr	r3, [r0, #12]
    }
 8081cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081ce2:	4718      	bx	r3

08081ce4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081ce4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8081ce6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8081ce8:	f100 0110 	add.w	r1, r0, #16
 8081cec:	f7ff fff1 	bl	8081cd2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8081cf0:	bd08      	pop	{r3, pc}

08081cf2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8081cf2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8081cf4:	b510      	push	{r4, lr}
      if (_M_empty())
 8081cf6:	b90a      	cbnz	r2, 8081cfc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081cf8:	f001 f9d8 	bl	80830ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081cfc:	68c3      	ldr	r3, [r0, #12]
    }
 8081cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d02:	4718      	bx	r3

08081d04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081d04:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8081d06:	6800      	ldr	r0, [r0, #0]
 8081d08:	f100 0110 	add.w	r1, r0, #16
 8081d0c:	f7ff fff1 	bl	8081cf2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8081d10:	bd08      	pop	{r3, pc}
	...

08081d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8081d14:	b538      	push	{r3, r4, r5, lr}
 8081d16:	2300      	movs	r3, #0
 8081d18:	4604      	mov	r4, r0
 8081d1a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081d1c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8081d1e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081d20:	f7fe f9c1 	bl	80800a6 <_Znwj>
 8081d24:	b128      	cbz	r0, 8081d32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8081d26:	2301      	movs	r3, #1
 8081d28:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8081d2c:	4b02      	ldr	r3, [pc, #8]	; (8081d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8081d2e:	60c5      	str	r5, [r0, #12]
 8081d30:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081d32:	6020      	str	r0, [r4, #0]
	}
 8081d34:	4620      	mov	r0, r4
 8081d36:	bd38      	pop	{r3, r4, r5, pc}
 8081d38:	0808469c 	.word	0x0808469c

08081d3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8081d3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081d3e:	2300      	movs	r3, #0
 8081d40:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8081d42:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8081d44:	4604      	mov	r4, r0
 8081d46:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8081d48:	b12b      	cbz	r3, 8081d56 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081d4a:	2202      	movs	r2, #2
 8081d4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081d4e:	68eb      	ldr	r3, [r5, #12]
 8081d50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081d52:	68ab      	ldr	r3, [r5, #8]
 8081d54:	60a3      	str	r3, [r4, #8]
    }
 8081d56:	4620      	mov	r0, r4
 8081d58:	bd38      	pop	{r3, r4, r5, pc}
	...

08081d5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8081d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081d5e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8081d60:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8081d62:	4668      	mov	r0, sp
 8081d64:	f7ff ff06 	bl	8081b74 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8081d68:	f04f 0302 	mov.w	r3, #2
 8081d6c:	e8d4 2f4f 	ldrexb	r2, [r4]
 8081d70:	2a00      	cmp	r2, #0
 8081d72:	d103      	bne.n	8081d7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8081d74:	e8c4 3f41 	strexb	r1, r3, [r4]
 8081d78:	2900      	cmp	r1, #0
 8081d7a:	d1f7      	bne.n	8081d6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8081d7c:	d125      	bne.n	8081dca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8081d7e:	f104 050c 	add.w	r5, r4, #12
 8081d82:	4669      	mov	r1, sp
 8081d84:	4628      	mov	r0, r5
 8081d86:	f7ff fef5 	bl	8081b74 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8081d8a:	2301      	movs	r3, #1
 8081d8c:	f3bf 8f5b 	dmb	ish
 8081d90:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8081d92:	2000      	movs	r0, #0
 8081d94:	f3bf 8f5b 	dmb	ish
 8081d98:	f104 0308 	add.w	r3, r4, #8
 8081d9c:	e853 6f00 	ldrex	r6, [r3]
 8081da0:	e843 0200 	strex	r2, r0, [r3]
 8081da4:	2a00      	cmp	r2, #0
 8081da6:	d1f9      	bne.n	8081d9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8081da8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8081dac:	b16e      	cbz	r6, 8081dca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8081dae:	f7ff fc29 	bl	8081604 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8081db2:	b178      	cbz	r0, 8081dd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081db4:	4629      	mov	r1, r5
 8081db6:	4630      	mov	r0, r6
 8081db8:	f7ff ff8b 	bl	8081cd2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8081dbc:	4630      	mov	r0, r6
 8081dbe:	f7ff fed0 	bl	8081b62 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8081dc2:	2110      	movs	r1, #16
 8081dc4:	4630      	mov	r0, r6
 8081dc6:	f001 f96d 	bl	80830a4 <_ZdlPvj>
        p_->setError(std::move(error));
 8081dca:	4668      	mov	r0, sp
 8081dcc:	f7ff fedf 	bl	8081b8e <_ZN8particle5ErrorD1Ev>
    }
 8081dd0:	b009      	add	sp, #36	; 0x24
 8081dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081dd4:	4631      	mov	r1, r6
 8081dd6:	a802      	add	r0, sp, #8
 8081dd8:	f7ff ffb0 	bl	8081d3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8081ddc:	68e0      	ldr	r0, [r4, #12]
 8081dde:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8081de2:	b108      	cbz	r0, 8081de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8081de4:	f002 f986 	bl	80840f4 <strdup>
        type_(type) {
 8081de8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081dea:	2010      	movs	r0, #16
 8081dec:	f8ad 501c 	strh.w	r5, [sp, #28]
 8081df0:	f7fe f959 	bl	80800a6 <_Znwj>
 8081df4:	4605      	mov	r5, r0
 8081df6:	b1e8      	cbz	r0, 8081e34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8081df8:	2700      	movs	r7, #0
 8081dfa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081dfc:	2018      	movs	r0, #24
 8081dfe:	f7fe f952 	bl	80800a6 <_Znwj>
 8081e02:	4604      	mov	r4, r0
 8081e04:	b188      	cbz	r0, 8081e2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8081e06:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8081e08:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8081e0a:	a802      	add	r0, sp, #8
 8081e0c:	f7ff ff50 	bl	8081cb0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e10:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081e12:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e14:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e16:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081e18:	9204      	str	r2, [sp, #16]
 8081e1a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081e1c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081e1e:	60e3      	str	r3, [r4, #12]
 8081e20:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8081e24:	9205      	str	r2, [sp, #20]
 8081e26:	f7ff fea5 	bl	8081b74 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8081e2a:	4b08      	ldr	r3, [pc, #32]	; (8081e4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e2c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081e2e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081e30:	4b07      	ldr	r3, [pc, #28]	; (8081e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8081e32:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8081e34:	a806      	add	r0, sp, #24
 8081e36:	f7ff feaa 	bl	8081b8e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8081e3a:	a802      	add	r0, sp, #8
 8081e3c:	f7ff fe91 	bl	8081b62 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081e40:	2200      	movs	r2, #0
 8081e42:	4629      	mov	r1, r5
 8081e44:	4803      	ldr	r0, [pc, #12]	; (8081e54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8081e46:	f7ff fbe5 	bl	8081614 <application_thread_invoke>
 8081e4a:	e7b7      	b.n	8081dbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8081e4c:	08081ce5 	.word	0x08081ce5
 8081e50:	08081f7d 	.word	0x08081f7d
 8081e54:	0808188f 	.word	0x0808188f

08081e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081e5c:	b08a      	sub	sp, #40	; 0x28
 8081e5e:	4605      	mov	r5, r0
 8081e60:	460c      	mov	r4, r1
 8081e62:	4617      	mov	r7, r2
 8081e64:	4698      	mov	r8, r3
 8081e66:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081e6a:	f7ff fc21 	bl	80816b0 <spark_cloud_flag_connected>
 8081e6e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8081e70:	4682      	mov	sl, r0
 8081e72:	bb38      	cbnz	r0, 8081ec4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8081e74:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081e78:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081e7a:	a905      	add	r1, sp, #20
 8081e7c:	4630      	mov	r0, r6
 8081e7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081e82:	f7ff fe77 	bl	8081b74 <_ZN8particle5ErrorC1EOS0_>
 8081e86:	2014      	movs	r0, #20
 8081e88:	f7fe f90d 	bl	80800a6 <_Znwj>
 8081e8c:	4604      	mov	r4, r0
 8081e8e:	b148      	cbz	r0, 8081ea4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081e90:	2302      	movs	r3, #2
 8081e92:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081e94:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081e96:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081e9a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8081e9c:	4631      	mov	r1, r6
 8081e9e:	300c      	adds	r0, #12
 8081ea0:	f7ff fe68 	bl	8081b74 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8081ea4:	4628      	mov	r0, r5
	: __shared_count(__p)
 8081ea6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8081ea8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8081eac:	f7ff ff32 	bl	8081d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081eb0:	4630      	mov	r0, r6
 8081eb2:	f7ff fe6c 	bl	8081b8e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8081eb6:	a805      	add	r0, sp, #20
 8081eb8:	f7ff fe69 	bl	8081b8e <_ZN8particle5ErrorD1Ev>
}
 8081ebc:	4628      	mov	r0, r5
 8081ebe:	b00a      	add	sp, #40	; 0x28
 8081ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081ec4:	230c      	movs	r3, #12
 8081ec6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081eca:	2014      	movs	r0, #20
 8081ecc:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8081ed0:	9307      	str	r3, [sp, #28]
 8081ed2:	f7fe f8e8 	bl	80800a6 <_Znwj>
 8081ed6:	4601      	mov	r1, r0
 8081ed8:	b128      	cbz	r0, 8081ee6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081eda:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8081ede:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081ee2:	f880 a001 	strb.w	sl, [r0, #1]
 8081ee6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8081ee8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8081eea:	f7ff ff13 	bl	8081d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8081eee:	4b22      	ldr	r3, [pc, #136]	; (8081f78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081ef0:	2008      	movs	r0, #8
 8081ef2:	9308      	str	r3, [sp, #32]
 8081ef4:	f7fe f8d7 	bl	80800a6 <_Znwj>
 8081ef8:	4682      	mov	sl, r0
 8081efa:	b128      	cbz	r0, 8081f08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081efc:	9b03      	ldr	r3, [sp, #12]
 8081efe:	a904      	add	r1, sp, #16
 8081f00:	f840 3b04 	str.w	r3, [r0], #4
 8081f04:	f7ff feae 	bl	8081c64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081f08:	4642      	mov	r2, r8
 8081f0a:	4639      	mov	r1, r7
 8081f0c:	4620      	mov	r0, r4
 8081f0e:	9600      	str	r6, [sp, #0]
 8081f10:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8081f14:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081f18:	f7ff fbda 	bl	80816d0 <spark_send_event>
 8081f1c:	b9b8      	cbnz	r0, 8081f4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8081f1e:	9b03      	ldr	r3, [sp, #12]
 8081f20:	785b      	ldrb	r3, [r3, #1]
 8081f22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081f26:	b993      	cbnz	r3, 8081f4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8081f28:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8081f2c:	a905      	add	r1, sp, #20
 8081f2e:	a803      	add	r0, sp, #12
 8081f30:	9205      	str	r2, [sp, #20]
 8081f32:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081f36:	f7ff ff11 	bl	8081d5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081f3a:	a805      	add	r0, sp, #20
 8081f3c:	f7ff fe27 	bl	8081b8e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081f40:	a805      	add	r0, sp, #20
 8081f42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081f44:	f7ff fe95 	bl	8081c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8081f48:	a806      	add	r0, sp, #24
 8081f4a:	f7fe fced 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081f4e:	9b03      	ldr	r3, [sp, #12]
 8081f50:	a904      	add	r1, sp, #16
 8081f52:	a806      	add	r0, sp, #24
 8081f54:	9305      	str	r3, [sp, #20]
 8081f56:	f7ff fe85 	bl	8081c64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081f5a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081f5c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081f5e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8081f60:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8081f62:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8081f64:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8081f66:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8081f68:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8081f6a:	f7fe fcdd 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f6e:	a804      	add	r0, sp, #16
 8081f70:	f7fe fcda 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8081f74:	e7a2      	b.n	8081ebc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8081f76:	bf00      	nop
 8081f78:	08082041 	.word	0x08082041

08081f7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8081f7c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f80:	4605      	mov	r5, r0
	  switch (__op)
 8081f82:	d007      	beq.n	8081f94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8081f84:	2a03      	cmp	r2, #3
 8081f86:	d018      	beq.n	8081fba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8081f88:	2a01      	cmp	r2, #1
 8081f8a:	d101      	bne.n	8081f90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8081f8c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081f8e:	6003      	str	r3, [r0, #0]
	}
 8081f90:	2000      	movs	r0, #0
 8081f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081f94:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8081f96:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8081f98:	f7fe f885 	bl	80800a6 <_Znwj>
 8081f9c:	4604      	mov	r4, r0
 8081f9e:	b150      	cbz	r0, 8081fb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081fa0:	4631      	mov	r1, r6
 8081fa2:	f7ff fecb 	bl	8081d3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8081fa6:	6930      	ldr	r0, [r6, #16]
 8081fa8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8081fac:	b108      	cbz	r0, 8081fb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8081fae:	f002 f8a1 	bl	80840f4 <strdup>
        type_(type) {
 8081fb2:	6120      	str	r0, [r4, #16]
 8081fb4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8081fb6:	602c      	str	r4, [r5, #0]
	}
 8081fb8:	e7ea      	b.n	8081f90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8081fba:	6804      	ldr	r4, [r0, #0]
 8081fbc:	2c00      	cmp	r4, #0
 8081fbe:	d0e7      	beq.n	8081f90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8081fc0:	f104 0010 	add.w	r0, r4, #16
 8081fc4:	f7ff fde3 	bl	8081b8e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8081fc8:	4620      	mov	r0, r4
 8081fca:	f7ff fdca 	bl	8081b62 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8081fce:	2118      	movs	r1, #24
 8081fd0:	4620      	mov	r0, r4
 8081fd2:	f001 f867 	bl	80830a4 <_ZdlPvj>
 8081fd6:	e7db      	b.n	8081f90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08081fd8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8081fd8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081fda:	2300      	movs	r3, #0
 8081fdc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8081fde:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8081fe0:	4604      	mov	r4, r0
 8081fe2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8081fe4:	b12b      	cbz	r3, 8081ff2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081fe6:	2202      	movs	r2, #2
 8081fe8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081fea:	68eb      	ldr	r3, [r5, #12]
 8081fec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081fee:	68ab      	ldr	r3, [r5, #8]
 8081ff0:	60a3      	str	r3, [r4, #8]
    }
 8081ff2:	4620      	mov	r0, r4
 8081ff4:	bd38      	pop	{r3, r4, r5, pc}

08081ff6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8081ff6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081ff8:	b570      	push	{r4, r5, r6, lr}
 8081ffa:	4604      	mov	r4, r0
	  switch (__op)
 8081ffc:	d007      	beq.n	808200e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8081ffe:	2a03      	cmp	r2, #3
 8082000:	d012      	beq.n	8082028 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8082002:	2a01      	cmp	r2, #1
 8082004:	d101      	bne.n	808200a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8082006:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082008:	6003      	str	r3, [r0, #0]
	}
 808200a:	2000      	movs	r0, #0
 808200c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808200e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8082010:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082012:	f7fe f848 	bl	80800a6 <_Znwj>
 8082016:	4605      	mov	r5, r0
 8082018:	b120      	cbz	r0, 8082024 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808201a:	4631      	mov	r1, r6
 808201c:	f7ff ffdc 	bl	8081fd8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082020:	7c33      	ldrb	r3, [r6, #16]
 8082022:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8082024:	6025      	str	r5, [r4, #0]
	}
 8082026:	e7f0      	b.n	808200a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082028:	6804      	ldr	r4, [r0, #0]
 808202a:	2c00      	cmp	r4, #0
 808202c:	d0ed      	beq.n	808200a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808202e:	4620      	mov	r0, r4
 8082030:	f7ff fd97 	bl	8081b62 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082034:	2114      	movs	r1, #20
 8082036:	4620      	mov	r0, r4
 8082038:	f001 f834 	bl	80830a4 <_ZdlPvj>
 808203c:	e7e5      	b.n	808200a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08082040 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082042:	4604      	mov	r4, r0
 8082044:	b089      	sub	sp, #36	; 0x24
 8082046:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082048:	a801      	add	r0, sp, #4
 808204a:	4611      	mov	r1, r2
 808204c:	f7ff fe11 	bl	8081c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082050:	b1a4      	cbz	r4, 808207c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8082052:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082054:	b11d      	cbz	r5, 808205e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8082056:	4628      	mov	r0, r5
 8082058:	f002 f84c 	bl	80840f4 <strdup>
 808205c:	4605      	mov	r5, r0
 808205e:	a801      	add	r0, sp, #4
 8082060:	a903      	add	r1, sp, #12
        type_(type) {
 8082062:	9503      	str	r5, [sp, #12]
 8082064:	f8ad 4010 	strh.w	r4, [sp, #16]
 8082068:	f7ff fe78 	bl	8081d5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808206c:	a803      	add	r0, sp, #12
 808206e:	f7ff fd8e 	bl	8081b8e <_ZN8particle5ErrorD1Ev>
 8082072:	a802      	add	r0, sp, #8
 8082074:	f7fe fc58 	bl	8080928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082078:	b009      	add	sp, #36	; 0x24
 808207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808207c:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808207e:	9d01      	ldr	r5, [sp, #4]
 8082080:	e8d5 2f4f 	ldrexb	r2, [r5]
 8082084:	2a00      	cmp	r2, #0
 8082086:	d103      	bne.n	8082090 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8082088:	e8c5 3f41 	strexb	r1, r3, [r5]
 808208c:	2900      	cmp	r1, #0
 808208e:	d1f7      	bne.n	8082080 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8082090:	d1ef      	bne.n	8082072 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8082092:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8082094:	f3bf 8f5b 	dmb	ish
 8082098:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808209a:	f3bf 8f5b 	dmb	ish
 808209e:	1d2b      	adds	r3, r5, #4
 80820a0:	e853 6f00 	ldrex	r6, [r3]
 80820a4:	e843 4200 	strex	r2, r4, [r3]
 80820a8:	2a00      	cmp	r2, #0
 80820aa:	d1f9      	bne.n	80820a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80820ac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80820b0:	2e00      	cmp	r6, #0
 80820b2:	d0de      	beq.n	8082072 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80820b4:	4620      	mov	r0, r4
 80820b6:	f7ff faa5 	bl	8081604 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80820ba:	4607      	mov	r7, r0
 80820bc:	b160      	cbz	r0, 80820d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80820be:	4630      	mov	r0, r6
 80820c0:	f105 010c 	add.w	r1, r5, #12
 80820c4:	f7ff fe15 	bl	8081cf2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80820c8:	4630      	mov	r0, r6
 80820ca:	f7ff fd4a 	bl	8081b62 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80820ce:	2110      	movs	r1, #16
 80820d0:	4630      	mov	r0, r6
 80820d2:	f000 ffe7 	bl	80830a4 <_ZdlPvj>
 80820d6:	e7cc      	b.n	8082072 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80820d8:	4631      	mov	r1, r6
 80820da:	a803      	add	r0, sp, #12
 80820dc:	f7ff ff7c 	bl	8081fd8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80820e0:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80820e2:	2010      	movs	r0, #16
 80820e4:	f88d 301c 	strb.w	r3, [sp, #28]
 80820e8:	f7fd ffdd 	bl	80800a6 <_Znwj>
 80820ec:	4605      	mov	r5, r0
 80820ee:	b1d0      	cbz	r0, 8082126 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80820f0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80820f2:	2014      	movs	r0, #20
 80820f4:	f7fd ffd7 	bl	80800a6 <_Znwj>
 80820f8:	4604      	mov	r4, r0
 80820fa:	b178      	cbz	r0, 808211c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80820fc:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80820fe:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082100:	a803      	add	r0, sp, #12
 8082102:	f7ff fdd5 	bl	8081cb0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082106:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082108:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808210a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808210c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808210e:	9205      	str	r2, [sp, #20]
 8082110:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082112:	60e3      	str	r3, [r4, #12]
 8082114:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8082118:	9206      	str	r2, [sp, #24]
 808211a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808211c:	4b06      	ldr	r3, [pc, #24]	; (8082138 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808211e:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082120:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082122:	4b06      	ldr	r3, [pc, #24]	; (808213c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8082124:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8082126:	a803      	add	r0, sp, #12
 8082128:	f7ff fd1b 	bl	8081b62 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808212c:	2200      	movs	r2, #0
 808212e:	4629      	mov	r1, r5
 8082130:	4803      	ldr	r0, [pc, #12]	; (8082140 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8082132:	f7ff fa6f 	bl	8081614 <application_thread_invoke>
 8082136:	e7c7      	b.n	80820c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8082138:	08081d05 	.word	0x08081d05
 808213c:	08081ff7 	.word	0x08081ff7
 8082140:	0808188f 	.word	0x0808188f

08082144 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8082144:	6800      	ldr	r0, [r0, #0]
 8082146:	f000 b917 	b.w	8082378 <_ZN7TwoWire4lockEv>

0808214a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808214a:	b510      	push	{r4, lr}
 808214c:	4604      	mov	r4, r0
      lock_(_lock) {
 808214e:	6001      	str	r1, [r0, #0]
 8082150:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8082152:	b10a      	cbz	r2, 8082158 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8082154:	f7ff fff6 	bl	8082144 <_ZN9FuelGauge4lockEv>
}
 8082158:	4620      	mov	r0, r4
 808215a:	bd10      	pop	{r4, pc}

0808215c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 808215c:	b538      	push	{r3, r4, r5, lr}
 808215e:	4604      	mov	r4, r0
 8082160:	460d      	mov	r5, r1
            return &Wire3;
 8082162:	f000 ff6d 	bl	8083040 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8082166:	462a      	mov	r2, r5
            return &Wire3;
 8082168:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 808216a:	4620      	mov	r0, r4
 808216c:	f7ff ffed 	bl	808214a <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8082170:	4620      	mov	r0, r4
 8082172:	bd38      	pop	{r3, r4, r5, pc}

08082174 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8082174:	6800      	ldr	r0, [r0, #0]
 8082176:	f000 b908 	b.w	808238a <_ZN7TwoWire6unlockEv>

0808217a <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808217a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808217e:	4604      	mov	r4, r0
 8082180:	460d      	mov	r5, r1
 8082182:	4617      	mov	r7, r2
 8082184:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 8082186:	f7ff ffdd 	bl	8082144 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808218a:	2336      	movs	r3, #54	; 0x36
 808218c:	f88d 3000 	strb.w	r3, [sp]
 8082190:	2300      	movs	r3, #0
 8082192:	f04f 0801 	mov.w	r8, #1
 8082196:	9301      	str	r3, [sp, #4]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 8082198:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 808219a:	4669      	mov	r1, sp
 808219c:	6820      	ldr	r0, [r4, #0]
 808219e:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80821a0:	f88d 8008 	strb.w	r8, [sp, #8]
 80821a4:	f000 f8c9 	bl	808233a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 80821a8:	6820      	ldr	r0, [r4, #0]
 80821aa:	4629      	mov	r1, r5
 80821ac:	6803      	ldr	r3, [r0, #0]
 80821ae:	689b      	ldr	r3, [r3, #8]
 80821b0:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 80821b2:	4641      	mov	r1, r8
 80821b4:	6820      	ldr	r0, [r4, #0]
 80821b6:	f000 f8d8 	bl	808236a <_ZN7TwoWire15endTransmissionEh>
 80821ba:	4605      	mov	r5, r0
 80821bc:	b140      	cbz	r0, 80821d0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 80821be:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80821c2:	4620      	mov	r0, r4
 80821c4:	f7ff ffd6 	bl	8082174 <_ZN9FuelGauge6unlockEv>
}
 80821c8:	4628      	mov	r0, r5
 80821ca:	b004      	add	sp, #16
 80821cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 80821d0:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 80821d2:	4669      	mov	r1, sp
 80821d4:	6820      	ldr	r0, [r4, #0]
 80821d6:	9301      	str	r3, [sp, #4]
 80821d8:	f000 f87c 	bl	80822d4 <_ZN7TwoWire11requestFromERK16WireTransmission>
 80821dc:	2802      	cmp	r0, #2
 80821de:	d1ee      	bne.n	80821be <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 80821e0:	6820      	ldr	r0, [r4, #0]
 80821e2:	6803      	ldr	r3, [r0, #0]
 80821e4:	695b      	ldr	r3, [r3, #20]
 80821e6:	4798      	blx	r3
 80821e8:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 80821ea:	6820      	ldr	r0, [r4, #0]
 80821ec:	6803      	ldr	r3, [r0, #0]
 80821ee:	695b      	ldr	r3, [r3, #20]
 80821f0:	4798      	blx	r3
 80821f2:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 80821f4:	e7e5      	b.n	80821c2 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

080821f8 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 80821f8:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 80821fa:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 80821fc:	2104      	movs	r1, #4
    byte MSB = 0;
 80821fe:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8082202:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8082206:	f10d 0206 	add.w	r2, sp, #6
 808220a:	f10d 0307 	add.w	r3, sp, #7
 808220e:	f7ff ffb4 	bl	808217a <_ZN9FuelGauge12readRegisterEhRhS0_>
 8082212:	b9a0      	cbnz	r0, 808223e <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8082214:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8082218:	f001 f89e 	bl	8083358 <__aeabi_i2d>
 808221c:	2200      	movs	r2, #0
 808221e:	4b09      	ldr	r3, [pc, #36]	; (8082244 <_ZN9FuelGauge6getSoCEv+0x4c>)
 8082220:	f001 f904 	bl	808342c <__aeabi_dmul>
 8082224:	f001 fb5c 	bl	80838e0 <__aeabi_d2f>
 8082228:	4604      	mov	r4, r0
        return MSB + decimal;
 808222a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808222e:	f001 fc61 	bl	8083af4 <__aeabi_i2f>
 8082232:	4601      	mov	r1, r0
 8082234:	4620      	mov	r0, r4
 8082236:	f001 fba9 	bl	808398c <__addsf3>
}
 808223a:	b002      	add	sp, #8
 808223c:	bd10      	pop	{r4, pc}
        return -1.0f;
 808223e:	4802      	ldr	r0, [pc, #8]	; (8082248 <_ZN9FuelGauge6getSoCEv+0x50>)
 8082240:	e7fb      	b.n	808223a <_ZN9FuelGauge6getSoCEv+0x42>
 8082242:	bf00      	nop
 8082244:	3f700000 	.word	0x3f700000
 8082248:	bf800000 	.word	0xbf800000

0808224c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808224c:	4770      	bx	lr

0808224e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808224e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082250:	4606      	mov	r6, r0
 8082252:	4615      	mov	r5, r2
 8082254:	460c      	mov	r4, r1
 8082256:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082258:	42bc      	cmp	r4, r7
 808225a:	d006      	beq.n	808226a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808225c:	6833      	ldr	r3, [r6, #0]
 808225e:	4630      	mov	r0, r6
 8082260:	689b      	ldr	r3, [r3, #8]
 8082262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082266:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8082268:	e7f6      	b.n	8082258 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808226a:	4628      	mov	r0, r5
 808226c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808226e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808226e:	2200      	movs	r2, #0
 8082270:	7c00      	ldrb	r0, [r0, #16]
 8082272:	f7ff b8bd 	b.w	80813f0 <hal_i2c_write>

08082276 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8082276:	2100      	movs	r1, #0
 8082278:	7c00      	ldrb	r0, [r0, #16]
 808227a:	f7ff b8c1 	b.w	8081400 <hal_i2c_available>

0808227e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808227e:	2100      	movs	r1, #0
 8082280:	7c00      	ldrb	r0, [r0, #16]
 8082282:	f7ff b8c5 	b.w	8081410 <hal_i2c_read>

08082286 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8082286:	2100      	movs	r1, #0
 8082288:	7c00      	ldrb	r0, [r0, #16]
 808228a:	f7ff b8c9 	b.w	8081420 <hal_i2c_peek>

0808228e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808228e:	2100      	movs	r1, #0
 8082290:	7c00      	ldrb	r0, [r0, #16]
 8082292:	f7ff b8cd 	b.w	8081430 <hal_i2c_flush>

08082296 <_ZN7TwoWireD0Ev>:
 8082296:	b510      	push	{r4, lr}
 8082298:	4604      	mov	r4, r0
 808229a:	2114      	movs	r1, #20
 808229c:	f000 ff02 	bl	80830a4 <_ZdlPvj>
 80822a0:	4620      	mov	r0, r4
 80822a2:	bd10      	pop	{r4, pc}

080822a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80822a4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80822a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80822aa:	4604      	mov	r4, r0
 80822ac:	4608      	mov	r0, r1
 80822ae:	2100      	movs	r1, #0
 80822b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80822b4:	4b03      	ldr	r3, [pc, #12]	; (80822c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80822b6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80822b8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80822ba:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80822bc:	f7ff f8c8 	bl	8081450 <hal_i2c_init>
}
 80822c0:	4620      	mov	r0, r4
 80822c2:	bd10      	pop	{r4, pc}
 80822c4:	080846b8 	.word	0x080846b8

080822c8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80822c8:	2300      	movs	r3, #0
 80822ca:	7c00      	ldrb	r0, [r0, #16]
 80822cc:	461a      	mov	r2, r3
 80822ce:	4619      	mov	r1, r3
 80822d0:	f7ff b876 	b.w	80813c0 <hal_i2c_begin>

080822d4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80822d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80822d6:	2200      	movs	r2, #0
 80822d8:	2314      	movs	r3, #20
 80822da:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80822de:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80822e2:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80822e4:	7c00      	ldrb	r0, [r0, #16]
 80822e6:	f88d 3008 	strb.w	r3, [sp, #8]
 80822ea:	684b      	ldr	r3, [r1, #4]
 80822ec:	9303      	str	r3, [sp, #12]
 80822ee:	68cb      	ldr	r3, [r1, #12]
 80822f0:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80822f2:	7a0b      	ldrb	r3, [r1, #8]
 80822f4:	a901      	add	r1, sp, #4
 80822f6:	9305      	str	r3, [sp, #20]
 80822f8:	f7ff f8c2 	bl	8081480 <hal_i2c_request_ex>
}
 80822fc:	b007      	add	sp, #28
 80822fe:	f85d fb04 	ldr.w	pc, [sp], #4

08082302 <_ZN7TwoWire11requestFromEhjh>:
{
 8082302:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8082304:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082306:	f88d 1000 	strb.w	r1, [sp]
 808230a:	f04f 0164 	mov.w	r1, #100	; 0x64
 808230e:	bf18      	it	ne
 8082310:	2301      	movne	r3, #1
 8082312:	9103      	str	r1, [sp, #12]
 8082314:	4669      	mov	r1, sp
    size_ = size;
 8082316:	9201      	str	r2, [sp, #4]
 8082318:	f88d 3008 	strb.w	r3, [sp, #8]
 808231c:	f7ff ffda 	bl	80822d4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8082320:	b005      	add	sp, #20
 8082322:	f85d fb04 	ldr.w	pc, [sp], #4

08082326 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8082326:	2301      	movs	r3, #1
 8082328:	f7ff bfeb 	b.w	8082302 <_ZN7TwoWire11requestFromEhjh>

0808232c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808232c:	2200      	movs	r2, #0
 808232e:	7c00      	ldrb	r0, [r0, #16]
 8082330:	f7ff b84e 	b.w	80813d0 <hal_i2c_begin_transmission>

08082334 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8082334:	b2c9      	uxtb	r1, r1
 8082336:	f7ff bff9 	b.w	808232c <_ZN7TwoWire17beginTransmissionEh>

0808233a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 808233a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808233c:	2200      	movs	r2, #0
 808233e:	460b      	mov	r3, r1
 8082340:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8082344:	2214      	movs	r2, #20
 8082346:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 808234a:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 808234c:	7809      	ldrb	r1, [r1, #0]
    };
 808234e:	9203      	str	r2, [sp, #12]
 8082350:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8082352:	7a1b      	ldrb	r3, [r3, #8]
    };
 8082354:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 8082356:	7c00      	ldrb	r0, [r0, #16]
 8082358:	aa01      	add	r2, sp, #4
 808235a:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808235e:	9305      	str	r3, [sp, #20]
 8082360:	f7ff f836 	bl	80813d0 <hal_i2c_begin_transmission>
}
 8082364:	b007      	add	sp, #28
 8082366:	f85d fb04 	ldr.w	pc, [sp], #4

0808236a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 808236a:	2200      	movs	r2, #0
 808236c:	7c00      	ldrb	r0, [r0, #16]
 808236e:	f7ff b837 	b.w	80813e0 <hal_i2c_end_transmission>

08082372 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8082372:	2101      	movs	r1, #1
 8082374:	f7ff bff9 	b.w	808236a <_ZN7TwoWire15endTransmissionEh>

08082378 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082378:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 808237a:	2100      	movs	r1, #0
 808237c:	7c00      	ldrb	r0, [r0, #16]
 808237e:	f7ff f86f 	bl	8081460 <hal_i2c_lock>
}
 8082382:	fab0 f080 	clz	r0, r0
 8082386:	0940      	lsrs	r0, r0, #5
 8082388:	bd08      	pop	{r3, pc}

0808238a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808238a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 808238c:	2100      	movs	r1, #0
 808238e:	7c00      	ldrb	r0, [r0, #16]
 8082390:	f7ff f86e 	bl	8081470 <hal_i2c_unlock>
}
 8082394:	fab0 f080 	clz	r0, r0
 8082398:	0940      	lsrs	r0, r0, #5
 808239a:	bd08      	pop	{r3, pc}

0808239c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808239c:	4700      	bx	r0
	...

080823a0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80823a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80823a4:	2400      	movs	r4, #0
{
 80823a6:	461d      	mov	r5, r3
 80823a8:	460f      	mov	r7, r1
 80823aa:	4690      	mov	r8, r2
 80823ac:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80823ae:	f7fe fff7 	bl	80813a0 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80823b2:	2304      	movs	r3, #4
  if (priority >= 0) {
 80823b4:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80823b6:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80823ba:	bfa8      	it	ge
 80823bc:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 80823c0:	f8ad 400d 	strh.w	r4, [sp, #13]
 80823c4:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 80823c8:	bfa4      	itt	ge
 80823ca:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80823cc:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80823d0:	463a      	mov	r2, r7
 80823d2:	4643      	mov	r3, r8
 80823d4:	4630      	mov	r0, r6
 80823d6:	4906      	ldr	r1, [pc, #24]	; (80823f0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 80823d8:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80823da:	bfa8      	it	ge
 80823dc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80823e0:	f7fe ffd6 	bl	8081390 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80823e4:	fab0 f080 	clz	r0, r0
 80823e8:	0940      	lsrs	r0, r0, #5
 80823ea:	b004      	add	sp, #16
 80823ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80823f0:	0808239d 	.word	0x0808239d

080823f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80823f4:	4770      	bx	lr

080823f6 <_ZN9IPAddressD0Ev>:
 80823f6:	b510      	push	{r4, lr}
 80823f8:	4604      	mov	r4, r0
 80823fa:	2108      	movs	r1, #8
 80823fc:	f000 fe52 	bl	80830a4 <_ZdlPvj>
 8082400:	4620      	mov	r0, r4
 8082402:	bd10      	pop	{r4, pc}

08082404 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082406:	460e      	mov	r6, r1
 8082408:	2400      	movs	r4, #0
 808240a:	f100 0708 	add.w	r7, r0, #8
 808240e:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8082410:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082414:	220a      	movs	r2, #10
 8082416:	4630      	mov	r0, r6
 8082418:	f000 f8fc 	bl	8082614 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808241c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808241e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082420:	d101      	bne.n	8082426 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082422:	4620      	mov	r0, r4
 8082424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082426:	2c00      	cmp	r4, #0
 8082428:	d0f2      	beq.n	8082410 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808242a:	212e      	movs	r1, #46	; 0x2e
 808242c:	4630      	mov	r0, r6
 808242e:	f000 f8d8 	bl	80825e2 <_ZN5Print5printEc>
 8082432:	4404      	add	r4, r0
 8082434:	e7ec      	b.n	8082410 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08082438 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082438:	4a02      	ldr	r2, [pc, #8]	; (8082444 <_ZN9IPAddressC1Ev+0xc>)
 808243a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808243c:	2200      	movs	r2, #0
 808243e:	6042      	str	r2, [r0, #4]
}
 8082440:	4770      	bx	lr
 8082442:	bf00      	nop
 8082444:	080846e0 	.word	0x080846e0

08082448 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8082448:	4a02      	ldr	r2, [pc, #8]	; (8082454 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808244a:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 808244c:	680a      	ldr	r2, [r1, #0]
 808244e:	6042      	str	r2, [r0, #4]
}
 8082450:	4770      	bx	lr
 8082452:	bf00      	nop
 8082454:	080846e0 	.word	0x080846e0

08082458 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8082458:	4a01      	ldr	r2, [pc, #4]	; (8082460 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 808245a:	e9c0 2100 	strd	r2, r1, [r0]
}
 808245e:	4770      	bx	lr
 8082460:	080846e0 	.word	0x080846e0

08082464 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8082464:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082466:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808246a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 808246e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082472:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8082476:	6044      	str	r4, [r0, #4]
}
 8082478:	bd10      	pop	{r4, pc}
	...

0808247c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808247c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808247e:	4d04      	ldr	r5, [pc, #16]	; (8082490 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082480:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082482:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082486:	9500      	str	r5, [sp, #0]
 8082488:	f7ff ffec 	bl	8082464 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808248c:	b003      	add	sp, #12
 808248e:	bd30      	pop	{r4, r5, pc}
 8082490:	080846e0 	.word	0x080846e0

08082494 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082494:	4b01      	ldr	r3, [pc, #4]	; (808249c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082496:	4a02      	ldr	r2, [pc, #8]	; (80824a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082498:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808249a:	4770      	bx	lr
 808249c:	20000128 	.word	0x20000128
 80824a0:	080846ec 	.word	0x080846ec

080824a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80824a4:	2300      	movs	r3, #0
 80824a6:	6840      	ldr	r0, [r0, #4]
 80824a8:	461a      	mov	r2, r3
 80824aa:	f7ff b941 	b.w	8081730 <network_connect>

080824ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80824ae:	2200      	movs	r2, #0
 80824b0:	2102      	movs	r1, #2
 80824b2:	6840      	ldr	r0, [r0, #4]
 80824b4:	f7ff b94c 	b.w	8081750 <network_disconnect>

080824b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80824b8:	2200      	movs	r2, #0
 80824ba:	6840      	ldr	r0, [r0, #4]
 80824bc:	4611      	mov	r1, r2
 80824be:	f7ff b93f 	b.w	8081740 <network_connecting>

080824c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80824c2:	2200      	movs	r2, #0
 80824c4:	6840      	ldr	r0, [r0, #4]
 80824c6:	4611      	mov	r1, r2
 80824c8:	f7ff b94a 	b.w	8081760 <network_ready>

080824cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80824cc:	2300      	movs	r3, #0
 80824ce:	6840      	ldr	r0, [r0, #4]
 80824d0:	461a      	mov	r2, r3
 80824d2:	4619      	mov	r1, r3
 80824d4:	f7ff b94c 	b.w	8081770 <network_on>

080824d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80824d8:	2300      	movs	r3, #0
 80824da:	6840      	ldr	r0, [r0, #4]
 80824dc:	461a      	mov	r2, r3
 80824de:	4619      	mov	r1, r3
 80824e0:	f7ff b94e 	b.w	8081780 <network_off>

080824e4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80824e4:	2100      	movs	r1, #0
 80824e6:	6840      	ldr	r0, [r0, #4]
 80824e8:	f7ff b972 	b.w	80817d0 <network_is_on>

080824ec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80824ec:	2100      	movs	r1, #0
 80824ee:	6840      	ldr	r0, [r0, #4]
 80824f0:	f7ff b976 	b.w	80817e0 <network_is_off>

080824f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80824f4:	2200      	movs	r2, #0
 80824f6:	6840      	ldr	r0, [r0, #4]
 80824f8:	f081 0101 	eor.w	r1, r1, #1
 80824fc:	f7ff b948 	b.w	8081790 <network_listen>

08082500 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082500:	2200      	movs	r2, #0
 8082502:	6840      	ldr	r0, [r0, #4]
 8082504:	f7ff b954 	b.w	80817b0 <network_set_listen_timeout>

08082508 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082508:	2200      	movs	r2, #0
 808250a:	6840      	ldr	r0, [r0, #4]
 808250c:	4611      	mov	r1, r2
 808250e:	f7ff b957 	b.w	80817c0 <network_get_listen_timeout>

08082512 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082512:	2200      	movs	r2, #0
 8082514:	6840      	ldr	r0, [r0, #4]
 8082516:	4611      	mov	r1, r2
 8082518:	f7ff b942 	b.w	80817a0 <network_listening>

0808251c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808251c:	b570      	push	{r4, r5, r6, lr}
 808251e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082520:	2600      	movs	r6, #0
 8082522:	b086      	sub	sp, #24
 8082524:	4604      	mov	r4, r0
    IPAddress addr;
 8082526:	a804      	add	r0, sp, #16
 8082528:	f7ff ff86 	bl	8082438 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808252c:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808252e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082530:	f001 fdfb 	bl	808412a <strlen>
 8082534:	4b0a      	ldr	r3, [pc, #40]	; (8082560 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8082536:	9600      	str	r6, [sp, #0]
 8082538:	b281      	uxth	r1, r0
 808253a:	685b      	ldr	r3, [r3, #4]
 808253c:	4628      	mov	r0, r5
 808253e:	aa03      	add	r2, sp, #12
 8082540:	f7fe fe96 	bl	8081270 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082544:	b130      	cbz	r0, 8082554 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082546:	4631      	mov	r1, r6
 8082548:	4620      	mov	r0, r4
 808254a:	f7ff ff85 	bl	8082458 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808254e:	4620      	mov	r0, r4
 8082550:	b006      	add	sp, #24
 8082552:	bd70      	pop	{r4, r5, r6, pc}
 8082554:	4620      	mov	r0, r4
 8082556:	a903      	add	r1, sp, #12
 8082558:	f7ff ff76 	bl	8082448 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808255c:	e7f7      	b.n	808254e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808255e:	bf00      	nop
 8082560:	200000f8 	.word	0x200000f8

08082564 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082564:	4b02      	ldr	r3, [pc, #8]	; (8082570 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082566:	4a03      	ldr	r2, [pc, #12]	; (8082574 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082568:	601a      	str	r2, [r3, #0]
 808256a:	2200      	movs	r2, #0
 808256c:	605a      	str	r2, [r3, #4]

} // spark
 808256e:	4770      	bx	lr
 8082570:	2000012c 	.word	0x2000012c
 8082574:	080846f8 	.word	0x080846f8

08082578 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8082578:	b508      	push	{r3, lr}
            return &Wire3;
 808257a:	f000 fd61 	bl	8083040 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 808257e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 8082582:	f7ff bef9 	b.w	8082378 <_ZN7TwoWire4lockEv>

08082586 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 8082586:	b510      	push	{r4, lr}
 8082588:	4604      	mov	r4, r0
    lock_(_lock)
 808258a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 808258c:	b109      	cbz	r1, 8082592 <_ZN4PMICC1Eb+0xc>
        lock();
 808258e:	f7ff fff3 	bl	8082578 <_ZN4PMIC4lockEv.constprop.0>
}
 8082592:	4620      	mov	r0, r4
 8082594:	bd10      	pop	{r4, pc}

08082596 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082598:	4606      	mov	r6, r0
 808259a:	460d      	mov	r5, r1
  size_t n = 0;
 808259c:	2400      	movs	r4, #0
 808259e:	188f      	adds	r7, r1, r2
  while (size--) {
 80825a0:	42bd      	cmp	r5, r7
 80825a2:	d00c      	beq.n	80825be <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80825a4:	6833      	ldr	r3, [r6, #0]
 80825a6:	4630      	mov	r0, r6
 80825a8:	689b      	ldr	r3, [r3, #8]
 80825aa:	f815 1b01 	ldrb.w	r1, [r5], #1
 80825ae:	4798      	blx	r3
     if (chunk>=0)
 80825b0:	1e03      	subs	r3, r0, #0
 80825b2:	db01      	blt.n	80825b8 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80825b4:	441c      	add	r4, r3
  while (size--) {
 80825b6:	e7f3      	b.n	80825a0 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80825b8:	2c00      	cmp	r4, #0
 80825ba:	bf08      	it	eq
 80825bc:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80825be:	4620      	mov	r0, r4
 80825c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080825c2 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80825c2:	b570      	push	{r4, r5, r6, lr}
 80825c4:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80825c6:	460c      	mov	r4, r1
    }
 80825c8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80825ca:	b149      	cbz	r1, 80825e0 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80825cc:	f001 fdad 	bl	808412a <strlen>
 80825d0:	682b      	ldr	r3, [r5, #0]
 80825d2:	4602      	mov	r2, r0
 80825d4:	4621      	mov	r1, r4
 80825d6:	4628      	mov	r0, r5
    }
 80825d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80825dc:	68db      	ldr	r3, [r3, #12]
 80825de:	4718      	bx	r3
    }
 80825e0:	bd70      	pop	{r4, r5, r6, pc}

080825e2 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80825e2:	6803      	ldr	r3, [r0, #0]
 80825e4:	689b      	ldr	r3, [r3, #8]
 80825e6:	4718      	bx	r3

080825e8 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80825e8:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80825ea:	210d      	movs	r1, #13
{
 80825ec:	4605      	mov	r5, r0
  size_t n = print('\r');
 80825ee:	f7ff fff8 	bl	80825e2 <_ZN5Print5printEc>
  n += print('\n');
 80825f2:	210a      	movs	r1, #10
  size_t n = print('\r');
 80825f4:	4604      	mov	r4, r0
  n += print('\n');
 80825f6:	4628      	mov	r0, r5
 80825f8:	f7ff fff3 	bl	80825e2 <_ZN5Print5printEc>
  return n;
}
 80825fc:	4420      	add	r0, r4
 80825fe:	bd38      	pop	{r3, r4, r5, pc}

08082600 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082600:	b538      	push	{r3, r4, r5, lr}
 8082602:	4605      	mov	r5, r0
  return write(str);
 8082604:	f7ff ffdd 	bl	80825c2 <_ZN5Print5writeEPKc>
 8082608:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 808260a:	4628      	mov	r0, r5
 808260c:	f7ff ffec 	bl	80825e8 <_ZN5Print7printlnEv>
  return n;
}
 8082610:	4420      	add	r0, r4
 8082612:	bd38      	pop	{r3, r4, r5, pc}

08082614 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082614:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082616:	2a01      	cmp	r2, #1
 8082618:	bf98      	it	ls
 808261a:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808261c:	b530      	push	{r4, r5, lr}
 808261e:	b08b      	sub	sp, #44	; 0x2c
 8082620:	460c      	mov	r4, r1
  *str = '\0';
 8082622:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8082626:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8082628:	4625      	mov	r5, r4
 808262a:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 808262e:	fb04 5312 	mls	r3, r4, r2, r5
 8082632:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082634:	2b09      	cmp	r3, #9
 8082636:	bf94      	ite	ls
 8082638:	3330      	addls	r3, #48	; 0x30
 808263a:	3337      	addhi	r3, #55	; 0x37
 808263c:	b2db      	uxtb	r3, r3
  } while(n);
 808263e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082640:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8082644:	d9f0      	bls.n	8082628 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8082646:	f7ff ffbc 	bl	80825c2 <_ZN5Print5writeEPKc>
}
 808264a:	b00b      	add	sp, #44	; 0x2c
 808264c:	bd30      	pop	{r4, r5, pc}
	...

08082650 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8082650:	2200      	movs	r2, #0
 8082652:	4b01      	ldr	r3, [pc, #4]	; (8082658 <_GLOBAL__sub_I_RGB+0x8>)
 8082654:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 8082656:	4770      	bx	lr
 8082658:	20000134 	.word	0x20000134

0808265c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 808265c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808265e:	2600      	movs	r6, #0
 8082660:	4604      	mov	r4, r0
 8082662:	460d      	mov	r5, r1
 8082664:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8082668:	f7fe fe1a 	bl	80812a0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 808266c:	4628      	mov	r0, r5
    _spi = spi;
 808266e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8082670:	f7fe ff0e 	bl	8081490 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8082674:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8082676:	6066      	str	r6, [r4, #4]
}
 8082678:	bd70      	pop	{r4, r5, r6, pc}

0808267a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808267a:	b510      	push	{r4, lr}
 808267c:	4604      	mov	r4, r0
{
	free(buffer);
 808267e:	6800      	ldr	r0, [r0, #0]
 8082680:	f7ff f8be 	bl	8081800 <free>
}
 8082684:	4620      	mov	r0, r4
 8082686:	bd10      	pop	{r4, pc}

08082688 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082688:	b510      	push	{r4, lr}
 808268a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808268c:	6800      	ldr	r0, [r0, #0]
 808268e:	b108      	cbz	r0, 8082694 <_ZN6String10invalidateEv+0xc>
 8082690:	f7ff f8b6 	bl	8081800 <free>
	buffer = NULL;
 8082694:	2300      	movs	r3, #0
	capacity = len = 0;
 8082696:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 808269a:	6023      	str	r3, [r4, #0]
}
 808269c:	bd10      	pop	{r4, pc}

0808269e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808269e:	b538      	push	{r3, r4, r5, lr}
 80826a0:	4604      	mov	r4, r0
 80826a2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80826a4:	6800      	ldr	r0, [r0, #0]
 80826a6:	3101      	adds	r1, #1
 80826a8:	f7ff f8b2 	bl	8081810 <realloc>
	if (newbuffer) {
 80826ac:	b110      	cbz	r0, 80826b4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80826ae:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80826b2:	2001      	movs	r0, #1
	}
	return 0;
}
 80826b4:	bd38      	pop	{r3, r4, r5, pc}

080826b6 <_ZN6String7reserveEj>:
{
 80826b6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80826b8:	6803      	ldr	r3, [r0, #0]
{
 80826ba:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80826bc:	b123      	cbz	r3, 80826c8 <_ZN6String7reserveEj+0x12>
 80826be:	6843      	ldr	r3, [r0, #4]
 80826c0:	428b      	cmp	r3, r1
 80826c2:	d301      	bcc.n	80826c8 <_ZN6String7reserveEj+0x12>
 80826c4:	2001      	movs	r0, #1
}
 80826c6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80826c8:	4620      	mov	r0, r4
 80826ca:	f7ff ffe8 	bl	808269e <_ZN6String12changeBufferEj>
 80826ce:	2800      	cmp	r0, #0
 80826d0:	d0f9      	beq.n	80826c6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80826d2:	68a3      	ldr	r3, [r4, #8]
 80826d4:	2b00      	cmp	r3, #0
 80826d6:	d1f5      	bne.n	80826c4 <_ZN6String7reserveEj+0xe>
 80826d8:	6822      	ldr	r2, [r4, #0]
 80826da:	7013      	strb	r3, [r2, #0]
 80826dc:	e7f2      	b.n	80826c4 <_ZN6String7reserveEj+0xe>

080826de <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80826de:	b570      	push	{r4, r5, r6, lr}
 80826e0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80826e2:	4611      	mov	r1, r2
{
 80826e4:	4604      	mov	r4, r0
 80826e6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80826e8:	f7ff ffe5 	bl	80826b6 <_ZN6String7reserveEj>
 80826ec:	b920      	cbnz	r0, 80826f8 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80826ee:	4620      	mov	r0, r4
 80826f0:	f7ff ffca 	bl	8082688 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80826f4:	4620      	mov	r0, r4
 80826f6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80826f8:	462a      	mov	r2, r5
 80826fa:	4631      	mov	r1, r6
 80826fc:	6820      	ldr	r0, [r4, #0]
	len = length;
 80826fe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082700:	f001 fca3 	bl	808404a <memcpy>
	buffer[len] = 0;
 8082704:	2100      	movs	r1, #0
 8082706:	6822      	ldr	r2, [r4, #0]
 8082708:	68a3      	ldr	r3, [r4, #8]
 808270a:	54d1      	strb	r1, [r2, r3]
	return *this;
 808270c:	e7f2      	b.n	80826f4 <_ZN6String4copyEPKcj+0x16>

0808270e <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 808270e:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8082710:	2300      	movs	r3, #0
String::String(const char *cstr)
 8082712:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082714:	460d      	mov	r5, r1
	capacity = 0;
 8082716:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808271a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808271c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 808271e:	b139      	cbz	r1, 8082730 <_ZN6StringC1EPKc+0x22>
 8082720:	4608      	mov	r0, r1
 8082722:	f001 fd02 	bl	808412a <strlen>
 8082726:	4629      	mov	r1, r5
 8082728:	4602      	mov	r2, r0
 808272a:	4620      	mov	r0, r4
 808272c:	f7ff ffd7 	bl	80826de <_ZN6String4copyEPKcj>
}
 8082730:	4620      	mov	r0, r4
 8082732:	bd38      	pop	{r3, r4, r5, pc}

08082734 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082734:	4288      	cmp	r0, r1
{
 8082736:	b510      	push	{r4, lr}
 8082738:	460b      	mov	r3, r1
 808273a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808273c:	d004      	beq.n	8082748 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808273e:	6809      	ldr	r1, [r1, #0]
 8082740:	b121      	cbz	r1, 808274c <_ZN6StringaSERKS_+0x18>
 8082742:	689a      	ldr	r2, [r3, #8]
 8082744:	f7ff ffcb 	bl	80826de <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8082748:	4620      	mov	r0, r4
 808274a:	bd10      	pop	{r4, pc}
	else invalidate();
 808274c:	f7ff ff9c 	bl	8082688 <_ZN6String10invalidateEv>
 8082750:	e7fa      	b.n	8082748 <_ZN6StringaSERKS_+0x14>

08082752 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8082752:	2300      	movs	r3, #0
String::String(const String &value)
 8082754:	b510      	push	{r4, lr}
 8082756:	4604      	mov	r4, r0
	capacity = 0;
 8082758:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808275c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808275e:	7303      	strb	r3, [r0, #12]
	*this = value;
 8082760:	f7ff ffe8 	bl	8082734 <_ZN6StringaSERKS_>
}
 8082764:	4620      	mov	r0, r4
 8082766:	bd10      	pop	{r4, pc}

08082768 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082768:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808276a:	6882      	ldr	r2, [r0, #8]
 808276c:	b93a      	cbnz	r2, 808277e <_ZNK6String6equalsEPKc+0x16>
 808276e:	b121      	cbz	r1, 808277a <_ZNK6String6equalsEPKc+0x12>
 8082770:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8082772:	fab0 f080 	clz	r0, r0
 8082776:	0940      	lsrs	r0, r0, #5
 8082778:	e000      	b.n	808277c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808277a:	2001      	movs	r0, #1
}
 808277c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808277e:	6800      	ldr	r0, [r0, #0]
 8082780:	b909      	cbnz	r1, 8082786 <_ZNK6String6equalsEPKc+0x1e>
 8082782:	7800      	ldrb	r0, [r0, #0]
 8082784:	e7f5      	b.n	8082772 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8082786:	f001 fcaa 	bl	80840de <strcmp>
 808278a:	e7f2      	b.n	8082772 <_ZNK6String6equalsEPKc+0xa>

0808278c <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 808278c:	b558      	push	{r3, r4, r6, lr}
 808278e:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082790:	b12a      	cbz	r2, 808279e <_ZNK6String8getBytesEPhjj+0x12>
 8082792:	b121      	cbz	r1, 808279e <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 8082794:	6884      	ldr	r4, [r0, #8]
 8082796:	42a3      	cmp	r3, r4
 8082798:	d302      	bcc.n	80827a0 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 808279a:	2300      	movs	r3, #0
 808279c:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 808279e:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 80827a0:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 80827a2:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 80827a4:	4294      	cmp	r4, r2
 80827a6:	bf28      	it	cs
 80827a8:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 80827aa:	6801      	ldr	r1, [r0, #0]
 80827ac:	4622      	mov	r2, r4
 80827ae:	4419      	add	r1, r3
 80827b0:	4630      	mov	r0, r6
 80827b2:	f001 fcc2 	bl	808413a <strncpy>
	buf[n] = 0;
 80827b6:	2300      	movs	r3, #0
 80827b8:	5533      	strb	r3, [r6, r4]
 80827ba:	e7f0      	b.n	808279e <_ZNK6String8getBytesEPhjj+0x12>

080827bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80827bc:	b510      	push	{r4, lr}
 80827be:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80827c0:	6800      	ldr	r0, [r0, #0]
 80827c2:	b118      	cbz	r0, 80827cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80827c4:	f7ff f81c 	bl	8081800 <free>
            wakeupSource_ = nullptr;
 80827c8:	2300      	movs	r3, #0
 80827ca:	6023      	str	r3, [r4, #0]
        }
    }
 80827cc:	bd10      	pop	{r4, pc}

080827ce <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80827ce:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80827d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80827d4:	460d      	mov	r5, r1
        error_ = result.error_;
 80827d6:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80827d8:	460b      	mov	r3, r1
 80827da:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80827de:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80827e0:	f8c0 2006 	str.w	r2, [r0, #6]
 80827e4:	889b      	ldrh	r3, [r3, #4]
 80827e6:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80827e8:	f7ff ffe8 	bl	80827bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80827ec:	682b      	ldr	r3, [r5, #0]
 80827ee:	b113      	cbz	r3, 80827f6 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80827f0:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80827f2:	2300      	movs	r3, #0
 80827f4:	602b      	str	r3, [r5, #0]
    }
 80827f6:	4620      	mov	r0, r4
 80827f8:	bd38      	pop	{r3, r4, r5, pc}

080827fa <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 80827fa:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80827fe:	b510      	push	{r4, lr}
 8082800:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 8082802:	b933      	cbnz	r3, 8082812 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 8082804:	b932      	cbnz	r2, 8082814 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 8082806:	f851 3f06 	ldr.w	r3, [r1, #6]!
 808280a:	6003      	str	r3, [r0, #0]
 808280c:	888b      	ldrh	r3, [r1, #4]
 808280e:	8083      	strh	r3, [r0, #4]
    }
 8082810:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 8082812:	b122      	cbz	r2, 808281e <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 8082814:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 8082816:	2c01      	cmp	r4, #1
 8082818:	d003      	beq.n	8082822 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 808281a:	2c04      	cmp	r4, #4
 808281c:	d006      	beq.n	808282c <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808281e:	2204      	movs	r2, #4
 8082820:	e005      	b.n	808282e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8082822:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8082824:	718c      	strb	r4, [r1, #6]
 8082826:	810b      	strh	r3, [r1, #8]
 8082828:	814a      	strh	r2, [r1, #10]
                    break;
 808282a:	e7ec      	b.n	8082806 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 808282c:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808282e:	810b      	strh	r3, [r1, #8]
 8082830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8082834:	718a      	strb	r2, [r1, #6]
 8082836:	814b      	strh	r3, [r1, #10]
                    break;
 8082838:	e7e5      	b.n	8082806 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

0808283a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 808283a:	b507      	push	{r0, r1, r2, lr}
 808283c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808283e:	2100      	movs	r1, #0
{
 8082840:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082842:	9100      	str	r1, [sp, #0]
 8082844:	2001      	movs	r0, #1
 8082846:	218c      	movs	r1, #140	; 0x8c
 8082848:	f7fe ff08 	bl	808165c <system_reset>
}
 808284c:	b003      	add	sp, #12
 808284e:	f85d fb04 	ldr.w	pc, [sp], #4

08082852 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8082852:	4601      	mov	r1, r0
    reset(0, flags);
 8082854:	2000      	movs	r0, #0
 8082856:	f7ff bff0 	b.w	808283a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

0808285a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 808285a:	2000      	movs	r0, #0
 808285c:	f7ff bff9 	b.w	8082852 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

08082860 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082860:	b530      	push	{r4, r5, lr}
 8082862:	4604      	mov	r4, r0
 8082864:	b085      	sub	sp, #20
 8082866:	4608      	mov	r0, r1
 8082868:	4611      	mov	r1, r2
 808286a:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 808286c:	2300      	movs	r3, #0
 808286e:	f7fe feb9 	bl	80815e4 <system_sleep>
              compatResult_(r) {
 8082872:	2300      	movs	r3, #0
 8082874:	9301      	str	r3, [sp, #4]
 8082876:	f8ad 3008 	strh.w	r3, [sp, #8]
 808287a:	f88d 300a 	strb.w	r3, [sp, #10]
 808287e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8082882:	4d09      	ldr	r5, [pc, #36]	; (80828a8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8082884:	a901      	add	r1, sp, #4
 8082886:	f8ad 000c 	strh.w	r0, [sp, #12]
 808288a:	4628      	mov	r0, r5
 808288c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8082890:	f7ff ff9d 	bl	80827ce <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8082894:	a801      	add	r0, sp, #4
 8082896:	f7ff ff91 	bl	80827bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 808289a:	4620      	mov	r0, r4
 808289c:	4629      	mov	r1, r5
 808289e:	f7ff ffac 	bl	80827fa <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 80828a2:	4620      	mov	r0, r4
 80828a4:	b005      	add	sp, #20
 80828a6:	bd30      	pop	{r4, r5, pc}
 80828a8:	20000144 	.word	0x20000144

080828ac <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80828ac:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80828ae:	2000      	movs	r0, #0
 80828b0:	4b04      	ldr	r3, [pc, #16]	; (80828c4 <_GLOBAL__sub_I_System+0x18>)
 80828b2:	601a      	str	r2, [r3, #0]
 80828b4:	4b04      	ldr	r3, [pc, #16]	; (80828c8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80828b6:	4a05      	ldr	r2, [pc, #20]	; (80828cc <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80828b8:	6018      	str	r0, [r3, #0]
 80828ba:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80828bc:	7198      	strb	r0, [r3, #6]
 80828be:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80828c0:	f7fe be80 	b.w	80815c4 <set_system_mode>
 80828c4:	20000150 	.word	0x20000150
 80828c8:	20000144 	.word	0x20000144
 80828cc:	ffff0000 	.word	0xffff0000

080828d0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80828d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80828d4:	4a15      	ldr	r2, [pc, #84]	; (808292c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80828d6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8082938 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80828da:	e9d2 3200 	ldrd	r3, r2, [r2]
 80828de:	18c0      	adds	r0, r0, r3
 80828e0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80828e4:	4a12      	ldr	r2, [pc, #72]	; (8082930 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80828e6:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80828e8:	e9d2 3200 	ldrd	r3, r2, [r2]
 80828ec:	18c6      	adds	r6, r0, r3
 80828ee:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80828f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80828f6:	42bb      	cmp	r3, r7
 80828f8:	bf08      	it	eq
 80828fa:	42b2      	cmpeq	r2, r6
 80828fc:	d013      	beq.n	8082926 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80828fe:	a903      	add	r1, sp, #12
 8082900:	4668      	mov	r0, sp
 8082902:	e9cd 6700 	strd	r6, r7, [sp]
 8082906:	f7fd fb89 	bl	808001c <localtime_r>
	calendar_time.tm_year += 1900;
 808290a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808290c:	4d09      	ldr	r5, [pc, #36]	; (8082934 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 808290e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082912:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 8082914:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808291e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082922:	6823      	ldr	r3, [r4, #0]
 8082924:	602b      	str	r3, [r5, #0]
    }
}
 8082926:	b00c      	add	sp, #48	; 0x30
 8082928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808292c:	20000188 	.word	0x20000188
 8082930:	20000180 	.word	0x20000180
 8082934:	20000158 	.word	0x20000158
 8082938:	20000190 	.word	0x20000190

0808293c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 808293c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 808293e:	2000      	movs	r0, #0
 8082940:	f7fe fede 	bl	8081700 <spark_sync_time_pending>
 8082944:	b128      	cbz	r0, 8082952 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082946:	f7fe feb3 	bl	80816b0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808294a:	f080 0001 	eor.w	r0, r0, #1
 808294e:	b2c0      	uxtb	r0, r0
    }
 8082950:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082952:	2001      	movs	r0, #1
 8082954:	e7fc      	b.n	8082950 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08082958 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082958:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808295a:	490a      	ldr	r1, [pc, #40]	; (8082984 <_ZN9TimeClass4zoneEf+0x2c>)
{
 808295c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808295e:	f001 fabb 	bl	8083ed8 <__aeabi_fcmplt>
 8082962:	b968      	cbnz	r0, 8082980 <_ZN9TimeClass4zoneEf+0x28>
 8082964:	4620      	mov	r0, r4
 8082966:	4908      	ldr	r1, [pc, #32]	; (8082988 <_ZN9TimeClass4zoneEf+0x30>)
 8082968:	f001 fad4 	bl	8083f14 <__aeabi_fcmpgt>
 808296c:	b940      	cbnz	r0, 8082980 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808296e:	4907      	ldr	r1, [pc, #28]	; (808298c <_ZN9TimeClass4zoneEf+0x34>)
 8082970:	4620      	mov	r0, r4
 8082972:	f001 f913 	bl	8083b9c <__aeabi_fmul>
 8082976:	f001 fafd 	bl	8083f74 <__aeabi_f2lz>
 808297a:	4b05      	ldr	r3, [pc, #20]	; (8082990 <_ZN9TimeClass4zoneEf+0x38>)
 808297c:	e9c3 0100 	strd	r0, r1, [r3]
}
 8082980:	bd10      	pop	{r4, pc}
 8082982:	bf00      	nop
 8082984:	c1400000 	.word	0xc1400000
 8082988:	41600000 	.word	0x41600000
 808298c:	45610000 	.word	0x45610000
 8082990:	20000188 	.word	0x20000188

08082994 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082994:	b530      	push	{r4, r5, lr}
 8082996:	4604      	mov	r4, r0
    t += time_zone_cache;
 8082998:	4818      	ldr	r0, [pc, #96]	; (80829fc <_ZN9TimeClass7timeStrEx+0x68>)
{
 808299a:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 808299c:	e9d0 1000 	ldrd	r1, r0, [r0]
 80829a0:	1852      	adds	r2, r2, r1
 80829a2:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80829a6:	4816      	ldr	r0, [pc, #88]	; (8082a00 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80829a8:	2500      	movs	r5, #0
    t += dst_current_cache;
 80829aa:	e9d0 1000 	ldrd	r1, r0, [r0]
 80829ae:	1852      	adds	r2, r2, r1
 80829b0:	eb40 0303 	adc.w	r3, r0, r3
 80829b4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80829b8:	2224      	movs	r2, #36	; 0x24
 80829ba:	2100      	movs	r1, #0
 80829bc:	eb0d 0002 	add.w	r0, sp, r2
 80829c0:	f001 fb51 	bl	8084066 <memset>
    localtime_r(&t, &calendar_time);
 80829c4:	a909      	add	r1, sp, #36	; 0x24
 80829c6:	4668      	mov	r0, sp
 80829c8:	f7fd fb28 	bl	808001c <localtime_r>
    char ascstr[26] = {};
 80829cc:	2216      	movs	r2, #22
 80829ce:	4629      	mov	r1, r5
 80829d0:	a803      	add	r0, sp, #12
 80829d2:	9502      	str	r5, [sp, #8]
 80829d4:	f001 fb47 	bl	8084066 <memset>
    asctime_r(&calendar_time, ascstr);
 80829d8:	a902      	add	r1, sp, #8
 80829da:	a809      	add	r0, sp, #36	; 0x24
 80829dc:	f001 fafe 	bl	8083fdc <asctime_r>
    int len = strlen(ascstr);
 80829e0:	a802      	add	r0, sp, #8
 80829e2:	f001 fba2 	bl	808412a <strlen>
    ascstr[len-1] = 0; // remove final newline
 80829e6:	ab12      	add	r3, sp, #72	; 0x48
 80829e8:	4418      	add	r0, r3
 80829ea:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80829ee:	a902      	add	r1, sp, #8
 80829f0:	4620      	mov	r0, r4
 80829f2:	f7ff fe8c 	bl	808270e <_ZN6StringC1EPKc>
}
 80829f6:	4620      	mov	r0, r4
 80829f8:	b013      	add	sp, #76	; 0x4c
 80829fa:	bd30      	pop	{r4, r5, pc}
 80829fc:	20000188 	.word	0x20000188
 8082a00:	20000180 	.word	0x20000180

08082a04 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082a04:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8082a06:	2000      	movs	r0, #0
 8082a08:	f7fe fc82 	bl	8081310 <hal_rtc_time_is_valid>
    if (rtcstate)
 8082a0c:	4604      	mov	r4, r0
 8082a0e:	b9a0      	cbnz	r0, 8082a3a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082a10:	f7fe fdd0 	bl	80815b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082a14:	2801      	cmp	r0, #1
 8082a16:	d110      	bne.n	8082a3a <_ZN9TimeClass7isValidEv+0x36>
 8082a18:	4620      	mov	r0, r4
 8082a1a:	f7fe fe03 	bl	8081624 <system_thread_get_state>
 8082a1e:	b960      	cbnz	r0, 8082a3a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8082a20:	f7ff ff8c 	bl	808293c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082a24:	b910      	cbnz	r0, 8082a2c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8082a26:	f7fe fe33 	bl	8081690 <spark_process>
        while (_while() && !_condition()) {
 8082a2a:	e7f9      	b.n	8082a20 <_ZN9TimeClass7isValidEv+0x1c>
 8082a2c:	f7ff ff86 	bl	808293c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8082a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8082a34:	2000      	movs	r0, #0
 8082a36:	f7fe bc6b 	b.w	8081310 <hal_rtc_time_is_valid>
}
 8082a3a:	4620      	mov	r0, r4
 8082a3c:	bd10      	pop	{r4, pc}

08082a3e <_ZN9TimeClass3nowEv>:
{
 8082a3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8082a40:	f7ff ffe0 	bl	8082a04 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8082a44:	2210      	movs	r2, #16
 8082a46:	2100      	movs	r1, #0
 8082a48:	4668      	mov	r0, sp
 8082a4a:	f001 fb0c 	bl	8084066 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8082a4e:	2100      	movs	r1, #0
 8082a50:	4668      	mov	r0, sp
 8082a52:	f7fe fc6d 	bl	8081330 <hal_rtc_get_time>
}
 8082a56:	9800      	ldr	r0, [sp, #0]
 8082a58:	b005      	add	sp, #20
 8082a5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082a60 <_ZN9TimeClass4hourEv>:
{
 8082a60:	b508      	push	{r3, lr}
	return hour(now());
 8082a62:	f7ff ffec 	bl	8082a3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8082a66:	17c1      	asrs	r1, r0, #31
 8082a68:	f7ff ff32 	bl	80828d0 <_ZL22Refresh_UnixTime_Cachex>
}
 8082a6c:	4b01      	ldr	r3, [pc, #4]	; (8082a74 <_ZN9TimeClass4hourEv+0x14>)
 8082a6e:	6898      	ldr	r0, [r3, #8]
 8082a70:	bd08      	pop	{r3, pc}
 8082a72:	bf00      	nop
 8082a74:	20000158 	.word	0x20000158

08082a78 <_ZN9TimeClass6minuteEv>:
{
 8082a78:	b508      	push	{r3, lr}
	return minute(now());
 8082a7a:	f7ff ffe0 	bl	8082a3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8082a7e:	17c1      	asrs	r1, r0, #31
 8082a80:	f7ff ff26 	bl	80828d0 <_ZL22Refresh_UnixTime_Cachex>
}
 8082a84:	4b01      	ldr	r3, [pc, #4]	; (8082a8c <_ZN9TimeClass6minuteEv+0x14>)
 8082a86:	6858      	ldr	r0, [r3, #4]
 8082a88:	bd08      	pop	{r3, pc}
 8082a8a:	bf00      	nop
 8082a8c:	20000158 	.word	0x20000158

08082a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082a90:	4b02      	ldr	r3, [pc, #8]	; (8082a9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082a92:	681a      	ldr	r2, [r3, #0]
 8082a94:	4b02      	ldr	r3, [pc, #8]	; (8082aa0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082a96:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8082a98:	4770      	bx	lr
 8082a9a:	bf00      	nop
 8082a9c:	20000018 	.word	0x20000018
 8082aa0:	20000154 	.word	0x20000154

08082aa4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8082aa4:	4770      	bx	lr

08082aa6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082aa6:	7441      	strb	r1, [r0, #17]
}
 8082aa8:	4770      	bx	lr

08082aaa <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082aaa:	4770      	bx	lr

08082aac <_ZN11USARTSerial17availableForWriteEv>:
{
 8082aac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8082aae:	7c00      	ldrb	r0, [r0, #16]
 8082ab0:	f7fe fd36 	bl	8081520 <hal_usart_available_data_for_write>
}
 8082ab4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082ab8:	bd08      	pop	{r3, pc}

08082aba <_ZN11USARTSerial9availableEv>:
{
 8082aba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8082abc:	7c00      	ldrb	r0, [r0, #16]
 8082abe:	f7fe fd07 	bl	80814d0 <hal_usart_available>
}
 8082ac2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082ac6:	bd08      	pop	{r3, pc}

08082ac8 <_ZN11USARTSerial4peekEv>:
{
 8082ac8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8082aca:	7c00      	ldrb	r0, [r0, #16]
 8082acc:	f7fe fd10 	bl	80814f0 <hal_usart_peek>
}
 8082ad0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082ad4:	bd08      	pop	{r3, pc}

08082ad6 <_ZN11USARTSerial4readEv>:
{
 8082ad6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8082ad8:	7c00      	ldrb	r0, [r0, #16]
 8082ada:	f7fe fd01 	bl	80814e0 <hal_usart_read>
}
 8082ade:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082ae2:	bd08      	pop	{r3, pc}

08082ae4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 8082ae4:	7c00      	ldrb	r0, [r0, #16]
 8082ae6:	f7fe bd0b 	b.w	8081500 <hal_usart_flush>

08082aea <_ZN11USARTSerial5writeEh>:
{
 8082aea:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082aec:	7c46      	ldrb	r6, [r0, #17]
{
 8082aee:	4604      	mov	r4, r0
 8082af0:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082af2:	b12e      	cbz	r6, 8082b00 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 8082af4:	4629      	mov	r1, r5
 8082af6:	7c20      	ldrb	r0, [r4, #16]
}
 8082af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8082afc:	f7fe bce0 	b.w	80814c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082b00:	7c00      	ldrb	r0, [r0, #16]
 8082b02:	f7fe fd0d 	bl	8081520 <hal_usart_available_data_for_write>
 8082b06:	2800      	cmp	r0, #0
 8082b08:	dcf4      	bgt.n	8082af4 <_ZN11USARTSerial5writeEh+0xa>
}
 8082b0a:	4630      	mov	r0, r6
 8082b0c:	bd70      	pop	{r4, r5, r6, pc}

08082b0e <_ZN11USARTSerialD0Ev>:
 8082b0e:	b510      	push	{r4, lr}
 8082b10:	4604      	mov	r4, r0
 8082b12:	2114      	movs	r1, #20
 8082b14:	f000 fac6 	bl	80830a4 <_ZdlPvj>
 8082b18:	4620      	mov	r0, r4
 8082b1a:	bd10      	pop	{r4, pc}

08082b1c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8082b1c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8082b20:	b510      	push	{r4, lr}
 8082b22:	4604      	mov	r4, r0
 8082b24:	4608      	mov	r0, r1
 8082b26:	4611      	mov	r1, r2
 8082b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082b2c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8082b30:	4a04      	ldr	r2, [pc, #16]	; (8082b44 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8082b32:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8082b34:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8082b36:	2201      	movs	r2, #1
 8082b38:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8082b3a:	461a      	mov	r2, r3
 8082b3c:	f7fe fcb8 	bl	80814b0 <hal_usart_init>
}
 8082b40:	4620      	mov	r0, r4
 8082b42:	bd10      	pop	{r4, pc}
 8082b44:	08084750 	.word	0x08084750

08082b48 <_Z22__fetch_global_Serial1v>:
{
 8082b48:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082b4a:	4d0c      	ldr	r5, [pc, #48]	; (8082b7c <_Z22__fetch_global_Serial1v+0x34>)
 8082b4c:	7829      	ldrb	r1, [r5, #0]
 8082b4e:	f3bf 8f5b 	dmb	ish
 8082b52:	f011 0401 	ands.w	r4, r1, #1
 8082b56:	d10f      	bne.n	8082b78 <_Z22__fetch_global_Serial1v+0x30>
 8082b58:	4628      	mov	r0, r5
 8082b5a:	f7fd faaa 	bl	80800b2 <__cxa_guard_acquire>
 8082b5e:	b158      	cbz	r0, 8082b78 <_Z22__fetch_global_Serial1v+0x30>
 8082b60:	4621      	mov	r1, r4
 8082b62:	4b07      	ldr	r3, [pc, #28]	; (8082b80 <_Z22__fetch_global_Serial1v+0x38>)
 8082b64:	4a07      	ldr	r2, [pc, #28]	; (8082b84 <_Z22__fetch_global_Serial1v+0x3c>)
 8082b66:	4808      	ldr	r0, [pc, #32]	; (8082b88 <_Z22__fetch_global_Serial1v+0x40>)
 8082b68:	f7ff ffd8 	bl	8082b1c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8082b6c:	4628      	mov	r0, r5
 8082b6e:	f7fd faa5 	bl	80800bc <__cxa_guard_release>
 8082b72:	4806      	ldr	r0, [pc, #24]	; (8082b8c <_Z22__fetch_global_Serial1v+0x44>)
 8082b74:	f001 fa58 	bl	8084028 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082b78:	4803      	ldr	r0, [pc, #12]	; (8082b88 <_Z22__fetch_global_Serial1v+0x40>)
 8082b7a:	bd38      	pop	{r3, r4, r5, pc}
 8082b7c:	20000198 	.word	0x20000198
 8082b80:	20000220 	.word	0x20000220
 8082b84:	2000019c 	.word	0x2000019c
 8082b88:	200002a4 	.word	0x200002a4
 8082b8c:	08082aab 	.word	0x08082aab

08082b90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082b90:	7441      	strb	r1, [r0, #17]
}
 8082b92:	4770      	bx	lr

08082b94 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082b94:	4770      	bx	lr

08082b96 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082b96:	4770      	bx	lr

08082b98 <_ZN9USBSerial4readEv>:
{
 8082b98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082b9a:	2100      	movs	r1, #0
 8082b9c:	7c00      	ldrb	r0, [r0, #16]
 8082b9e:	f7fe fcdf 	bl	8081560 <HAL_USB_USART_Receive_Data>
}
 8082ba2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082ba6:	bd08      	pop	{r3, pc}

08082ba8 <_ZN9USBSerial4peekEv>:
{
 8082ba8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082baa:	2101      	movs	r1, #1
 8082bac:	7c00      	ldrb	r0, [r0, #16]
 8082bae:	f7fe fcd7 	bl	8081560 <HAL_USB_USART_Receive_Data>
}
 8082bb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082bb6:	bd08      	pop	{r3, pc}

08082bb8 <_ZN9USBSerial17availableForWriteEv>:
{
 8082bb8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082bba:	7c00      	ldrb	r0, [r0, #16]
 8082bbc:	f7fe fcc8 	bl	8081550 <HAL_USB_USART_Available_Data_For_Write>
}
 8082bc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082bc4:	bd08      	pop	{r3, pc}

08082bc6 <_ZN9USBSerial9availableEv>:
{
 8082bc6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082bc8:	7c00      	ldrb	r0, [r0, #16]
 8082bca:	f7fe fcb9 	bl	8081540 <HAL_USB_USART_Available_Data>
}
 8082bce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082bd2:	bd08      	pop	{r3, pc}

08082bd4 <_ZN9USBSerial5writeEh>:
{
 8082bd4:	b538      	push	{r3, r4, r5, lr}
 8082bd6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082bd8:	7c00      	ldrb	r0, [r0, #16]
{
 8082bda:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082bdc:	f7fe fcb8 	bl	8081550 <HAL_USB_USART_Available_Data_For_Write>
 8082be0:	2800      	cmp	r0, #0
 8082be2:	dc01      	bgt.n	8082be8 <_ZN9USBSerial5writeEh+0x14>
 8082be4:	7c60      	ldrb	r0, [r4, #17]
 8082be6:	b128      	cbz	r0, 8082bf4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082be8:	4629      	mov	r1, r5
 8082bea:	7c20      	ldrb	r0, [r4, #16]
 8082bec:	f7fe fcc0 	bl	8081570 <HAL_USB_USART_Send_Data>
 8082bf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8082bf4:	bd38      	pop	{r3, r4, r5, pc}

08082bf6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8082bf6:	7c00      	ldrb	r0, [r0, #16]
 8082bf8:	f7fe bcc2 	b.w	8081580 <HAL_USB_USART_Flush_Data>

08082bfc <_ZN9USBSerialD0Ev>:
 8082bfc:	b510      	push	{r4, lr}
 8082bfe:	4604      	mov	r4, r0
 8082c00:	2114      	movs	r1, #20
 8082c02:	f000 fa4f 	bl	80830a4 <_ZdlPvj>
 8082c06:	4620      	mov	r0, r4
 8082c08:	bd10      	pop	{r4, pc}

08082c0a <__tcf_1>:
 8082c0a:	4770      	bx	lr

08082c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082c0c:	b510      	push	{r4, lr}
 8082c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082c12:	4604      	mov	r4, r0
 8082c14:	4608      	mov	r0, r1
 8082c16:	2100      	movs	r1, #0
 8082c18:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8082c1c:	4b04      	ldr	r3, [pc, #16]	; (8082c30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8082c1e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082c20:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8082c22:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8082c24:	4611      	mov	r1, r2
  _blocking = true;
 8082c26:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8082c28:	f7fe fc82 	bl	8081530 <HAL_USB_USART_Init>
}
 8082c2c:	4620      	mov	r0, r4
 8082c2e:	bd10      	pop	{r4, pc}
 8082c30:	08084780 	.word	0x08084780

08082c34 <_Z19acquireSerialBufferv>:
{
 8082c34:	b510      	push	{r4, lr}
 8082c36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082c38:	2214      	movs	r2, #20
 8082c3a:	2100      	movs	r1, #0
 8082c3c:	f001 fa13 	bl	8084066 <memset>
  conf.rx_buffer = serial_rx_buffer;
 8082c40:	4b05      	ldr	r3, [pc, #20]	; (8082c58 <_Z19acquireSerialBufferv+0x24>)
}
 8082c42:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8082c44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082c46:	4b05      	ldr	r3, [pc, #20]	; (8082c5c <_Z19acquireSerialBufferv+0x28>)
 8082c48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082c4a:	f240 1301 	movw	r3, #257	; 0x101
 8082c4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082c50:	2381      	movs	r3, #129	; 0x81
 8082c52:	8223      	strh	r3, [r4, #16]
}
 8082c54:	bd10      	pop	{r4, pc}
 8082c56:	bf00      	nop
 8082c58:	200002e8 	.word	0x200002e8
 8082c5c:	200003e9 	.word	0x200003e9

08082c60 <_Z16_fetch_usbserialv>:
{
 8082c60:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082c62:	4d0e      	ldr	r5, [pc, #56]	; (8082c9c <_Z16_fetch_usbserialv+0x3c>)
{
 8082c64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082c66:	a801      	add	r0, sp, #4
 8082c68:	f7ff ffe4 	bl	8082c34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082c6c:	7829      	ldrb	r1, [r5, #0]
 8082c6e:	f3bf 8f5b 	dmb	ish
 8082c72:	f011 0401 	ands.w	r4, r1, #1
 8082c76:	d10e      	bne.n	8082c96 <_Z16_fetch_usbserialv+0x36>
 8082c78:	4628      	mov	r0, r5
 8082c7a:	f7fd fa1a 	bl	80800b2 <__cxa_guard_acquire>
 8082c7e:	b150      	cbz	r0, 8082c96 <_Z16_fetch_usbserialv+0x36>
 8082c80:	4621      	mov	r1, r4
 8082c82:	aa01      	add	r2, sp, #4
 8082c84:	4806      	ldr	r0, [pc, #24]	; (8082ca0 <_Z16_fetch_usbserialv+0x40>)
 8082c86:	f7ff ffc1 	bl	8082c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082c8a:	4628      	mov	r0, r5
 8082c8c:	f7fd fa16 	bl	80800bc <__cxa_guard_release>
 8082c90:	4804      	ldr	r0, [pc, #16]	; (8082ca4 <_Z16_fetch_usbserialv+0x44>)
 8082c92:	f001 f9c9 	bl	8084028 <atexit>
	return _usbserial;
}
 8082c96:	4802      	ldr	r0, [pc, #8]	; (8082ca0 <_Z16_fetch_usbserialv+0x40>)
 8082c98:	b007      	add	sp, #28
 8082c9a:	bd30      	pop	{r4, r5, pc}
 8082c9c:	200002b8 	.word	0x200002b8
 8082ca0:	200002c0 	.word	0x200002c0
 8082ca4:	08082b95 	.word	0x08082b95

08082ca8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082ca8:	b510      	push	{r4, lr}
 8082caa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082cac:	2214      	movs	r2, #20
 8082cae:	2100      	movs	r1, #0
 8082cb0:	f001 f9d9 	bl	8084066 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082cb4:	4b05      	ldr	r3, [pc, #20]	; (8082ccc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082cb6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8082cb8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082cba:	4b05      	ldr	r3, [pc, #20]	; (8082cd0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082cbc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082cbe:	f240 1301 	movw	r3, #257	; 0x101
 8082cc2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082cc4:	2381      	movs	r3, #129	; 0x81
 8082cc6:	8223      	strh	r3, [r4, #16]
}
 8082cc8:	bd10      	pop	{r4, pc}
 8082cca:	bf00      	nop
 8082ccc:	2000046a 	.word	0x2000046a
 8082cd0:	2000056b 	.word	0x2000056b

08082cd4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082cd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082cd6:	4c0e      	ldr	r4, [pc, #56]	; (8082d10 <_Z17_fetch_usbserial1v+0x3c>)
{
 8082cd8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082cda:	a801      	add	r0, sp, #4
 8082cdc:	f7ff ffe4 	bl	8082ca8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082ce0:	7823      	ldrb	r3, [r4, #0]
 8082ce2:	f3bf 8f5b 	dmb	ish
 8082ce6:	07db      	lsls	r3, r3, #31
 8082ce8:	d40e      	bmi.n	8082d08 <_Z17_fetch_usbserial1v+0x34>
 8082cea:	4620      	mov	r0, r4
 8082cec:	f7fd f9e1 	bl	80800b2 <__cxa_guard_acquire>
 8082cf0:	b150      	cbz	r0, 8082d08 <_Z17_fetch_usbserial1v+0x34>
 8082cf2:	2101      	movs	r1, #1
 8082cf4:	aa01      	add	r2, sp, #4
 8082cf6:	4807      	ldr	r0, [pc, #28]	; (8082d14 <_Z17_fetch_usbserial1v+0x40>)
 8082cf8:	f7ff ff88 	bl	8082c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082cfc:	4620      	mov	r0, r4
 8082cfe:	f7fd f9dd 	bl	80800bc <__cxa_guard_release>
 8082d02:	4805      	ldr	r0, [pc, #20]	; (8082d18 <_Z17_fetch_usbserial1v+0x44>)
 8082d04:	f001 f990 	bl	8084028 <atexit>
  return _usbserial1;
}
 8082d08:	4802      	ldr	r0, [pc, #8]	; (8082d14 <_Z17_fetch_usbserial1v+0x40>)
 8082d0a:	b006      	add	sp, #24
 8082d0c:	bd10      	pop	{r4, pc}
 8082d0e:	bf00      	nop
 8082d10:	200002bc 	.word	0x200002bc
 8082d14:	200002d4 	.word	0x200002d4
 8082d18:	08082c0b 	.word	0x08082c0b

08082d1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8082d1c:	4b01      	ldr	r3, [pc, #4]	; (8082d24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8082d1e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8082d20:	4770      	bx	lr
 8082d22:	bf00      	nop
 8082d24:	2000001c 	.word	0x2000001c

08082d28 <serialEventRun>:
{
 8082d28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082d2a:	4b17      	ldr	r3, [pc, #92]	; (8082d88 <serialEventRun+0x60>)
 8082d2c:	b143      	cbz	r3, 8082d40 <serialEventRun+0x18>
 8082d2e:	f7ff ff97 	bl	8082c60 <_Z16_fetch_usbserialv>
 8082d32:	6803      	ldr	r3, [r0, #0]
 8082d34:	691b      	ldr	r3, [r3, #16]
 8082d36:	4798      	blx	r3
 8082d38:	2800      	cmp	r0, #0
 8082d3a:	dd01      	ble.n	8082d40 <serialEventRun+0x18>
        serialEvent();
 8082d3c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8082d40:	4b12      	ldr	r3, [pc, #72]	; (8082d8c <serialEventRun+0x64>)
 8082d42:	b143      	cbz	r3, 8082d56 <serialEventRun+0x2e>
 8082d44:	f7ff ff00 	bl	8082b48 <_Z22__fetch_global_Serial1v>
 8082d48:	6803      	ldr	r3, [r0, #0]
 8082d4a:	691b      	ldr	r3, [r3, #16]
 8082d4c:	4798      	blx	r3
 8082d4e:	2800      	cmp	r0, #0
 8082d50:	dd01      	ble.n	8082d56 <serialEventRun+0x2e>
        serialEvent1();
 8082d52:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8082d56:	4b0e      	ldr	r3, [pc, #56]	; (8082d90 <serialEventRun+0x68>)
 8082d58:	b10b      	cbz	r3, 8082d5e <serialEventRun+0x36>
 8082d5a:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8082d5e:	4b0d      	ldr	r3, [pc, #52]	; (8082d94 <serialEventRun+0x6c>)
 8082d60:	b10b      	cbz	r3, 8082d66 <serialEventRun+0x3e>
 8082d62:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8082d66:	4b0c      	ldr	r3, [pc, #48]	; (8082d98 <serialEventRun+0x70>)
 8082d68:	b10b      	cbz	r3, 8082d6e <serialEventRun+0x46>
 8082d6a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082d6e:	4b0b      	ldr	r3, [pc, #44]	; (8082d9c <serialEventRun+0x74>)
 8082d70:	b143      	cbz	r3, 8082d84 <serialEventRun+0x5c>
 8082d72:	f7ff ffaf 	bl	8082cd4 <_Z17_fetch_usbserial1v>
 8082d76:	6803      	ldr	r3, [r0, #0]
 8082d78:	691b      	ldr	r3, [r3, #16]
 8082d7a:	4798      	blx	r3
 8082d7c:	2800      	cmp	r0, #0
 8082d7e:	dd01      	ble.n	8082d84 <serialEventRun+0x5c>
        usbSerialEvent1();
 8082d80:	f3af 8000 	nop.w
}
 8082d84:	bd08      	pop	{r3, pc}
 8082d86:	bf00      	nop
	...

08082da0 <_post_loop>:
{
 8082da0:	b508      	push	{r3, lr}
	serialEventRun();
 8082da2:	f7ff ffc1 	bl	8082d28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082da6:	f7fe faab 	bl	8081300 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082daa:	4b01      	ldr	r3, [pc, #4]	; (8082db0 <_post_loop+0x10>)
 8082dac:	6018      	str	r0, [r3, #0]
}
 8082dae:	bd08      	pop	{r3, pc}
 8082db0:	20000604 	.word	0x20000604

08082db4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082db4:	4805      	ldr	r0, [pc, #20]	; (8082dcc <_Z33system_initialize_user_backup_ramv+0x18>)
 8082db6:	4a06      	ldr	r2, [pc, #24]	; (8082dd0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 8082db8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082dba:	1a12      	subs	r2, r2, r0
 8082dbc:	4905      	ldr	r1, [pc, #20]	; (8082dd4 <_Z33system_initialize_user_backup_ramv+0x20>)
 8082dbe:	f001 f944 	bl	808404a <memcpy>
    __backup_sram_signature = signature;
 8082dc2:	4b05      	ldr	r3, [pc, #20]	; (8082dd8 <_Z33system_initialize_user_backup_ramv+0x24>)
 8082dc4:	4a05      	ldr	r2, [pc, #20]	; (8082ddc <_Z33system_initialize_user_backup_ramv+0x28>)
 8082dc6:	601a      	str	r2, [r3, #0]
}
 8082dc8:	bd08      	pop	{r3, pc}
 8082dca:	bf00      	nop
 8082dcc:	40024000 	.word	0x40024000
 8082dd0:	40024018 	.word	0x40024018
 8082dd4:	08084930 	.word	0x08084930
 8082dd8:	40024014 	.word	0x40024014
 8082ddc:	9a271c1e 	.word	0x9a271c1e

08082de0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082de0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082de2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082de4:	461a      	mov	r2, r3
 8082de6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082dea:	9300      	str	r3, [sp, #0]
 8082dec:	f7fe fc2c 	bl	8081648 <system_ctrl_set_result>
}
 8082df0:	b003      	add	sp, #12
 8082df2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082df8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8082df8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082dfa:	8843      	ldrh	r3, [r0, #2]
 8082dfc:	2b0a      	cmp	r3, #10
 8082dfe:	d008      	beq.n	8082e12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082e00:	2b50      	cmp	r3, #80	; 0x50
 8082e02:	d10b      	bne.n	8082e1c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8082e04:	4b09      	ldr	r3, [pc, #36]	; (8082e2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082e06:	681b      	ldr	r3, [r3, #0]
 8082e08:	b14b      	cbz	r3, 8082e1e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8082e0a:	b003      	add	sp, #12
 8082e0c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8082e10:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8082e12:	f7ff ffe5 	bl	8082de0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8082e16:	b003      	add	sp, #12
 8082e18:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082e1c:	2300      	movs	r3, #0
 8082e1e:	461a      	mov	r2, r3
 8082e20:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082e24:	9300      	str	r3, [sp, #0]
 8082e26:	f7fe fc0f 	bl	8081648 <system_ctrl_set_result>
}
 8082e2a:	e7f4      	b.n	8082e16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8082e2c:	200005f0 	.word	0x200005f0

08082e30 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8082e30:	2100      	movs	r1, #0
{
 8082e32:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8082e34:	4811      	ldr	r0, [pc, #68]	; (8082e7c <module_user_init_hook+0x4c>)
 8082e36:	f7fe fd13 	bl	8081860 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 8082e3a:	4b11      	ldr	r3, [pc, #68]	; (8082e80 <module_user_init_hook+0x50>)
 8082e3c:	681a      	ldr	r2, [r3, #0]
 8082e3e:	4b11      	ldr	r3, [pc, #68]	; (8082e84 <module_user_init_hook+0x54>)
 8082e40:	429a      	cmp	r2, r3
 8082e42:	bf0c      	ite	eq
 8082e44:	2201      	moveq	r2, #1
 8082e46:	2200      	movne	r2, #0
 8082e48:	4b0f      	ldr	r3, [pc, #60]	; (8082e88 <module_user_init_hook+0x58>)
 8082e4a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082e4c:	d001      	beq.n	8082e52 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 8082e4e:	f7ff ffb1 	bl	8082db4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082e52:	f7fe fa45 	bl	80812e0 <HAL_RNG_GetRandomNumber>
 8082e56:	4604      	mov	r4, r0
    srand(seed);
 8082e58:	f001 f90e 	bl	8084078 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082e5c:	4b0b      	ldr	r3, [pc, #44]	; (8082e8c <module_user_init_hook+0x5c>)
 8082e5e:	b113      	cbz	r3, 8082e66 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 8082e60:	4620      	mov	r0, r4
 8082e62:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082e66:	2100      	movs	r1, #0
 8082e68:	4808      	ldr	r0, [pc, #32]	; (8082e8c <module_user_init_hook+0x5c>)
 8082e6a:	f7fe fc51 	bl	8081710 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082e72:	2100      	movs	r1, #0
 8082e74:	4806      	ldr	r0, [pc, #24]	; (8082e90 <module_user_init_hook+0x60>)
 8082e76:	f7fe bbdd 	b.w	8081634 <system_ctrl_set_app_request_handler>
 8082e7a:	bf00      	nop
 8082e7c:	08082d1d 	.word	0x08082d1d
 8082e80:	40024014 	.word	0x40024014
 8082e84:	9a271c1e 	.word	0x9a271c1e
 8082e88:	200005ec 	.word	0x200005ec
 8082e8c:	00000000 	.word	0x00000000
 8082e90:	08082df9 	.word	0x08082df9

08082e94 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8082e94:	4b02      	ldr	r3, [pc, #8]	; (8082ea0 <__tcf_0+0xc>)
 8082e96:	6898      	ldr	r0, [r3, #8]
 8082e98:	b108      	cbz	r0, 8082e9e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 8082e9a:	f7fe ba09 	b.w	80812b0 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8082e9e:	4770      	bx	lr
 8082ea0:	200005f8 	.word	0x200005f8

08082ea4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8082ea4:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 8082ea6:	b570      	push	{r4, r5, r6, lr}
 8082ea8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8082eaa:	d901      	bls.n	8082eb0 <pinAvailable+0xc>
    return false;
 8082eac:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8082eae:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8082eb0:	f1a0 030d 	sub.w	r3, r0, #13
 8082eb4:	2b02      	cmp	r3, #2
 8082eb6:	d90b      	bls.n	8082ed0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8082eb8:	2801      	cmp	r0, #1
 8082eba:	d824      	bhi.n	8082f06 <pinAvailable+0x62>
 8082ebc:	f000 f89c 	bl	8082ff8 <_Z19__fetch_global_Wirev>
 8082ec0:	2100      	movs	r1, #0
 8082ec2:	7c00      	ldrb	r0, [r0, #16]
 8082ec4:	f7fe fabc 	bl	8081440 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8082ec8:	f080 0001 	eor.w	r0, r0, #1
 8082ecc:	b2c0      	uxtb	r0, r0
 8082ece:	e7ee      	b.n	8082eae <pinAvailable+0xa>
 8082ed0:	4e12      	ldr	r6, [pc, #72]	; (8082f1c <pinAvailable+0x78>)
 8082ed2:	7831      	ldrb	r1, [r6, #0]
 8082ed4:	f3bf 8f5b 	dmb	ish
 8082ed8:	f011 0501 	ands.w	r5, r1, #1
 8082edc:	d10d      	bne.n	8082efa <pinAvailable+0x56>
 8082ede:	4630      	mov	r0, r6
 8082ee0:	f7fd f8e7 	bl	80800b2 <__cxa_guard_acquire>
 8082ee4:	b148      	cbz	r0, 8082efa <pinAvailable+0x56>
 8082ee6:	4629      	mov	r1, r5
 8082ee8:	480d      	ldr	r0, [pc, #52]	; (8082f20 <pinAvailable+0x7c>)
 8082eea:	f7ff fbb7 	bl	808265c <_ZN8SPIClassC1E19hal_spi_interface_t>
 8082eee:	4630      	mov	r0, r6
 8082ef0:	f7fd f8e4 	bl	80800bc <__cxa_guard_release>
 8082ef4:	480b      	ldr	r0, [pc, #44]	; (8082f24 <pinAvailable+0x80>)
 8082ef6:	f001 f897 	bl	8084028 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8082efa:	4b09      	ldr	r3, [pc, #36]	; (8082f20 <pinAvailable+0x7c>)
 8082efc:	7818      	ldrb	r0, [r3, #0]
 8082efe:	f7fe facf 	bl	80814a0 <hal_spi_is_enabled>
 8082f02:	2800      	cmp	r0, #0
 8082f04:	d1d2      	bne.n	8082eac <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8082f06:	3c12      	subs	r4, #18
 8082f08:	2c01      	cmp	r4, #1
 8082f0a:	d805      	bhi.n	8082f18 <pinAvailable+0x74>
 8082f0c:	f7ff fe1c 	bl	8082b48 <_Z22__fetch_global_Serial1v>
 8082f10:	7c00      	ldrb	r0, [r0, #16]
 8082f12:	f7fe fafd 	bl	8081510 <hal_usart_is_enabled>
 8082f16:	e7d7      	b.n	8082ec8 <pinAvailable+0x24>
  return true; // 'pin' is available
 8082f18:	2001      	movs	r0, #1
 8082f1a:	e7c8      	b.n	8082eae <pinAvailable+0xa>
 8082f1c:	200005f4 	.word	0x200005f4
 8082f20:	200005f8 	.word	0x200005f8
 8082f24:	08082e95 	.word	0x08082e95

08082f28 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082f28:	282e      	cmp	r0, #46	; 0x2e
{
 8082f2a:	b538      	push	{r3, r4, r5, lr}
 8082f2c:	4604      	mov	r4, r0
 8082f2e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082f30:	d80a      	bhi.n	8082f48 <pinMode+0x20>
 8082f32:	29ff      	cmp	r1, #255	; 0xff
 8082f34:	d008      	beq.n	8082f48 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8082f36:	f7ff ffb5 	bl	8082ea4 <pinAvailable>
 8082f3a:	b128      	cbz	r0, 8082f48 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8082f3c:	4629      	mov	r1, r5
 8082f3e:	4620      	mov	r0, r4
}
 8082f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8082f44:	f7fe ba0c 	b.w	8081360 <HAL_Pin_Mode>
}
 8082f48:	bd38      	pop	{r3, r4, r5, pc}

08082f4a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082f4a:	b538      	push	{r3, r4, r5, lr}
 8082f4c:	4604      	mov	r4, r0
 8082f4e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082f50:	f7fe fa0e 	bl	8081370 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082f54:	28ff      	cmp	r0, #255	; 0xff
 8082f56:	d010      	beq.n	8082f7a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8082f58:	2806      	cmp	r0, #6
 8082f5a:	d804      	bhi.n	8082f66 <digitalWrite+0x1c>
 8082f5c:	234d      	movs	r3, #77	; 0x4d
 8082f5e:	fa23 f000 	lsr.w	r0, r3, r0
 8082f62:	07c3      	lsls	r3, r0, #31
 8082f64:	d409      	bmi.n	8082f7a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082f66:	4620      	mov	r0, r4
 8082f68:	f7ff ff9c 	bl	8082ea4 <pinAvailable>
 8082f6c:	b128      	cbz	r0, 8082f7a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082f6e:	4629      	mov	r1, r5
 8082f70:	4620      	mov	r0, r4
}
 8082f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8082f76:	f7fe ba03 	b.w	8081380 <HAL_GPIO_Write>
}
 8082f7a:	bd38      	pop	{r3, r4, r5, pc}

08082f7c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8082f7c:	b510      	push	{r4, lr}
 8082f7e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8082f80:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8082f82:	bf9c      	itt	ls
 8082f84:	340a      	addls	r4, #10
 8082f86:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082f88:	4620      	mov	r0, r4
 8082f8a:	f7ff ff8b 	bl	8082ea4 <pinAvailable>
 8082f8e:	b150      	cbz	r0, 8082fa6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8082f90:	2103      	movs	r1, #3
 8082f92:	4620      	mov	r0, r4
 8082f94:	f7fe f9dc 	bl	8081350 <HAL_Validate_Pin_Function>
 8082f98:	2803      	cmp	r0, #3
 8082f9a:	d104      	bne.n	8082fa6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8082f9c:	4620      	mov	r0, r4
}
 8082f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8082fa2:	f7fe ba05 	b.w	80813b0 <hal_adc_read>
}
 8082fa6:	2000      	movs	r0, #0
 8082fa8:	bd10      	pop	{r4, pc}

08082faa <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8082faa:	4770      	bx	lr

08082fac <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
	hal_i2c_config_t config = {
 8082fac:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 8082fae:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8082fb0:	2520      	movs	r5, #32
 8082fb2:	8043      	strh	r3, [r0, #2]
 8082fb4:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082fb6:	4e08      	ldr	r6, [pc, #32]	; (8082fd8 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8082fb8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8082fba:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082fbc:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8082fbe:	6085      	str	r5, [r0, #8]
 8082fc0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082fc2:	4628      	mov	r0, r5
 8082fc4:	f000 f870 	bl	80830a8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082fc8:	4631      	mov	r1, r6
	};
 8082fca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8082fcc:	4628      	mov	r0, r5
 8082fce:	f000 f86b 	bl	80830a8 <_ZnajRKSt9nothrow_t>
	};
 8082fd2:	60e0      	str	r0, [r4, #12]
}
 8082fd4:	4620      	mov	r0, r4
 8082fd6:	bd70      	pop	{r4, r5, r6, pc}
 8082fd8:	080847a8 	.word	0x080847a8

08082fdc <__tcf_2>:
 8082fdc:	4770      	bx	lr

08082fde <_Z17acquireWireBufferv>:
{
 8082fde:	b510      	push	{r4, lr}
 8082fe0:	4604      	mov	r4, r0
	return defaultWireConfig();
 8082fe2:	f7ff ffe3 	bl	8082fac <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8082fe6:	4620      	mov	r0, r4
 8082fe8:	bd10      	pop	{r4, pc}

08082fea <_Z18acquireWire3Bufferv>:
 8082fea:	b510      	push	{r4, lr}
 8082fec:	4604      	mov	r4, r0
 8082fee:	f7ff ffdd 	bl	8082fac <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8082ff2:	4620      	mov	r0, r4
 8082ff4:	bd10      	pop	{r4, pc}
	...

08082ff8 <_Z19__fetch_global_Wirev>:
{
 8082ff8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8082ffa:	4d0e      	ldr	r5, [pc, #56]	; (8083034 <_Z19__fetch_global_Wirev+0x3c>)
{
 8082ffc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8082ffe:	7829      	ldrb	r1, [r5, #0]
 8083000:	f3bf 8f5b 	dmb	ish
 8083004:	f011 0401 	ands.w	r4, r1, #1
 8083008:	d111      	bne.n	808302e <_Z19__fetch_global_Wirev+0x36>
 808300a:	4628      	mov	r0, r5
 808300c:	f7fd f851 	bl	80800b2 <__cxa_guard_acquire>
 8083010:	b168      	cbz	r0, 808302e <_Z19__fetch_global_Wirev+0x36>
 8083012:	a801      	add	r0, sp, #4
 8083014:	f7ff ffe3 	bl	8082fde <_Z17acquireWireBufferv>
 8083018:	4621      	mov	r1, r4
 808301a:	aa01      	add	r2, sp, #4
 808301c:	4806      	ldr	r0, [pc, #24]	; (8083038 <_Z19__fetch_global_Wirev+0x40>)
 808301e:	f7ff f941 	bl	80822a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8083022:	4628      	mov	r0, r5
 8083024:	f7fd f84a 	bl	80800bc <__cxa_guard_release>
 8083028:	4804      	ldr	r0, [pc, #16]	; (808303c <_Z19__fetch_global_Wirev+0x44>)
 808302a:	f000 fffd 	bl	8084028 <atexit>
	return wire;
}
 808302e:	4802      	ldr	r0, [pc, #8]	; (8083038 <_Z19__fetch_global_Wirev+0x40>)
 8083030:	b007      	add	sp, #28
 8083032:	bd30      	pop	{r4, r5, pc}
 8083034:	20000608 	.word	0x20000608
 8083038:	20000610 	.word	0x20000610
 808303c:	08082fab 	.word	0x08082fab

08083040 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083040:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8083042:	4c0e      	ldr	r4, [pc, #56]	; (808307c <_Z20__fetch_global_Wire3v+0x3c>)
{
 8083044:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8083046:	7823      	ldrb	r3, [r4, #0]
 8083048:	f3bf 8f5b 	dmb	ish
 808304c:	07db      	lsls	r3, r3, #31
 808304e:	d411      	bmi.n	8083074 <_Z20__fetch_global_Wire3v+0x34>
 8083050:	4620      	mov	r0, r4
 8083052:	f7fd f82e 	bl	80800b2 <__cxa_guard_acquire>
 8083056:	b168      	cbz	r0, 8083074 <_Z20__fetch_global_Wire3v+0x34>
 8083058:	a801      	add	r0, sp, #4
 808305a:	f7ff ffc6 	bl	8082fea <_Z18acquireWire3Bufferv>
 808305e:	2102      	movs	r1, #2
 8083060:	aa01      	add	r2, sp, #4
 8083062:	4807      	ldr	r0, [pc, #28]	; (8083080 <_Z20__fetch_global_Wire3v+0x40>)
 8083064:	f7ff f91e 	bl	80822a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8083068:	4620      	mov	r0, r4
 808306a:	f7fd f827 	bl	80800bc <__cxa_guard_release>
 808306e:	4805      	ldr	r0, [pc, #20]	; (8083084 <_Z20__fetch_global_Wire3v+0x44>)
 8083070:	f000 ffda 	bl	8084028 <atexit>
	return wire;
}
 8083074:	4802      	ldr	r0, [pc, #8]	; (8083080 <_Z20__fetch_global_Wire3v+0x40>)
 8083076:	b006      	add	sp, #24
 8083078:	bd10      	pop	{r4, pc}
 808307a:	bf00      	nop
 808307c:	2000060c 	.word	0x2000060c
 8083080:	20000624 	.word	0x20000624
 8083084:	08082fdd 	.word	0x08082fdd

08083088 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083088:	2300      	movs	r3, #0
 808308a:	b507      	push	{r0, r1, r2, lr}
 808308c:	461a      	mov	r2, r3
 808308e:	4619      	mov	r1, r3
 8083090:	9300      	str	r3, [sp, #0]
 8083092:	4803      	ldr	r0, [pc, #12]	; (80830a0 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 8083094:	f7ff f9f2 	bl	808247c <_ZN9IPAddressC1Ehhhh>
 8083098:	b003      	add	sp, #12
 808309a:	f85d fb04 	ldr.w	pc, [sp], #4
 808309e:	bf00      	nop
 80830a0:	20000638 	.word	0x20000638

080830a4 <_ZdlPvj>:
 80830a4:	f7fd b803 	b.w	80800ae <_ZdlPv>

080830a8 <_ZnajRKSt9nothrow_t>:
 80830a8:	f7fc bfff 	b.w	80800aa <_Znaj>

080830ac <_ZSt25__throw_bad_function_callv>:
 80830ac:	b508      	push	{r3, lr}
 80830ae:	f7fe fbc7 	bl	8081840 <abort>
	...

080830b4 <__aeabi_drsub>:
 80830b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80830b8:	e002      	b.n	80830c0 <__adddf3>
 80830ba:	bf00      	nop

080830bc <__aeabi_dsub>:
 80830bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080830c0 <__adddf3>:
 80830c0:	b530      	push	{r4, r5, lr}
 80830c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80830c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80830ca:	ea94 0f05 	teq	r4, r5
 80830ce:	bf08      	it	eq
 80830d0:	ea90 0f02 	teqeq	r0, r2
 80830d4:	bf1f      	itttt	ne
 80830d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80830da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80830de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80830e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80830e6:	f000 80e2 	beq.w	80832ae <__adddf3+0x1ee>
 80830ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80830ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80830f2:	bfb8      	it	lt
 80830f4:	426d      	neglt	r5, r5
 80830f6:	dd0c      	ble.n	8083112 <__adddf3+0x52>
 80830f8:	442c      	add	r4, r5
 80830fa:	ea80 0202 	eor.w	r2, r0, r2
 80830fe:	ea81 0303 	eor.w	r3, r1, r3
 8083102:	ea82 0000 	eor.w	r0, r2, r0
 8083106:	ea83 0101 	eor.w	r1, r3, r1
 808310a:	ea80 0202 	eor.w	r2, r0, r2
 808310e:	ea81 0303 	eor.w	r3, r1, r3
 8083112:	2d36      	cmp	r5, #54	; 0x36
 8083114:	bf88      	it	hi
 8083116:	bd30      	pophi	{r4, r5, pc}
 8083118:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808311c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083120:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083124:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083128:	d002      	beq.n	8083130 <__adddf3+0x70>
 808312a:	4240      	negs	r0, r0
 808312c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083130:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083134:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083138:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808313c:	d002      	beq.n	8083144 <__adddf3+0x84>
 808313e:	4252      	negs	r2, r2
 8083140:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083144:	ea94 0f05 	teq	r4, r5
 8083148:	f000 80a7 	beq.w	808329a <__adddf3+0x1da>
 808314c:	f1a4 0401 	sub.w	r4, r4, #1
 8083150:	f1d5 0e20 	rsbs	lr, r5, #32
 8083154:	db0d      	blt.n	8083172 <__adddf3+0xb2>
 8083156:	fa02 fc0e 	lsl.w	ip, r2, lr
 808315a:	fa22 f205 	lsr.w	r2, r2, r5
 808315e:	1880      	adds	r0, r0, r2
 8083160:	f141 0100 	adc.w	r1, r1, #0
 8083164:	fa03 f20e 	lsl.w	r2, r3, lr
 8083168:	1880      	adds	r0, r0, r2
 808316a:	fa43 f305 	asr.w	r3, r3, r5
 808316e:	4159      	adcs	r1, r3
 8083170:	e00e      	b.n	8083190 <__adddf3+0xd0>
 8083172:	f1a5 0520 	sub.w	r5, r5, #32
 8083176:	f10e 0e20 	add.w	lr, lr, #32
 808317a:	2a01      	cmp	r2, #1
 808317c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083180:	bf28      	it	cs
 8083182:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083186:	fa43 f305 	asr.w	r3, r3, r5
 808318a:	18c0      	adds	r0, r0, r3
 808318c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083190:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083194:	d507      	bpl.n	80831a6 <__adddf3+0xe6>
 8083196:	f04f 0e00 	mov.w	lr, #0
 808319a:	f1dc 0c00 	rsbs	ip, ip, #0
 808319e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80831a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80831a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80831aa:	d31b      	bcc.n	80831e4 <__adddf3+0x124>
 80831ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80831b0:	d30c      	bcc.n	80831cc <__adddf3+0x10c>
 80831b2:	0849      	lsrs	r1, r1, #1
 80831b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80831b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80831bc:	f104 0401 	add.w	r4, r4, #1
 80831c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80831c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80831c8:	f080 809a 	bcs.w	8083300 <__adddf3+0x240>
 80831cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80831d0:	bf08      	it	eq
 80831d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80831d6:	f150 0000 	adcs.w	r0, r0, #0
 80831da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80831de:	ea41 0105 	orr.w	r1, r1, r5
 80831e2:	bd30      	pop	{r4, r5, pc}
 80831e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80831e8:	4140      	adcs	r0, r0
 80831ea:	eb41 0101 	adc.w	r1, r1, r1
 80831ee:	3c01      	subs	r4, #1
 80831f0:	bf28      	it	cs
 80831f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80831f6:	d2e9      	bcs.n	80831cc <__adddf3+0x10c>
 80831f8:	f091 0f00 	teq	r1, #0
 80831fc:	bf04      	itt	eq
 80831fe:	4601      	moveq	r1, r0
 8083200:	2000      	moveq	r0, #0
 8083202:	fab1 f381 	clz	r3, r1
 8083206:	bf08      	it	eq
 8083208:	3320      	addeq	r3, #32
 808320a:	f1a3 030b 	sub.w	r3, r3, #11
 808320e:	f1b3 0220 	subs.w	r2, r3, #32
 8083212:	da0c      	bge.n	808322e <__adddf3+0x16e>
 8083214:	320c      	adds	r2, #12
 8083216:	dd08      	ble.n	808322a <__adddf3+0x16a>
 8083218:	f102 0c14 	add.w	ip, r2, #20
 808321c:	f1c2 020c 	rsb	r2, r2, #12
 8083220:	fa01 f00c 	lsl.w	r0, r1, ip
 8083224:	fa21 f102 	lsr.w	r1, r1, r2
 8083228:	e00c      	b.n	8083244 <__adddf3+0x184>
 808322a:	f102 0214 	add.w	r2, r2, #20
 808322e:	bfd8      	it	le
 8083230:	f1c2 0c20 	rsble	ip, r2, #32
 8083234:	fa01 f102 	lsl.w	r1, r1, r2
 8083238:	fa20 fc0c 	lsr.w	ip, r0, ip
 808323c:	bfdc      	itt	le
 808323e:	ea41 010c 	orrle.w	r1, r1, ip
 8083242:	4090      	lslle	r0, r2
 8083244:	1ae4      	subs	r4, r4, r3
 8083246:	bfa2      	ittt	ge
 8083248:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808324c:	4329      	orrge	r1, r5
 808324e:	bd30      	popge	{r4, r5, pc}
 8083250:	ea6f 0404 	mvn.w	r4, r4
 8083254:	3c1f      	subs	r4, #31
 8083256:	da1c      	bge.n	8083292 <__adddf3+0x1d2>
 8083258:	340c      	adds	r4, #12
 808325a:	dc0e      	bgt.n	808327a <__adddf3+0x1ba>
 808325c:	f104 0414 	add.w	r4, r4, #20
 8083260:	f1c4 0220 	rsb	r2, r4, #32
 8083264:	fa20 f004 	lsr.w	r0, r0, r4
 8083268:	fa01 f302 	lsl.w	r3, r1, r2
 808326c:	ea40 0003 	orr.w	r0, r0, r3
 8083270:	fa21 f304 	lsr.w	r3, r1, r4
 8083274:	ea45 0103 	orr.w	r1, r5, r3
 8083278:	bd30      	pop	{r4, r5, pc}
 808327a:	f1c4 040c 	rsb	r4, r4, #12
 808327e:	f1c4 0220 	rsb	r2, r4, #32
 8083282:	fa20 f002 	lsr.w	r0, r0, r2
 8083286:	fa01 f304 	lsl.w	r3, r1, r4
 808328a:	ea40 0003 	orr.w	r0, r0, r3
 808328e:	4629      	mov	r1, r5
 8083290:	bd30      	pop	{r4, r5, pc}
 8083292:	fa21 f004 	lsr.w	r0, r1, r4
 8083296:	4629      	mov	r1, r5
 8083298:	bd30      	pop	{r4, r5, pc}
 808329a:	f094 0f00 	teq	r4, #0
 808329e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80832a2:	bf06      	itte	eq
 80832a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80832a8:	3401      	addeq	r4, #1
 80832aa:	3d01      	subne	r5, #1
 80832ac:	e74e      	b.n	808314c <__adddf3+0x8c>
 80832ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80832b2:	bf18      	it	ne
 80832b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80832b8:	d029      	beq.n	808330e <__adddf3+0x24e>
 80832ba:	ea94 0f05 	teq	r4, r5
 80832be:	bf08      	it	eq
 80832c0:	ea90 0f02 	teqeq	r0, r2
 80832c4:	d005      	beq.n	80832d2 <__adddf3+0x212>
 80832c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80832ca:	bf04      	itt	eq
 80832cc:	4619      	moveq	r1, r3
 80832ce:	4610      	moveq	r0, r2
 80832d0:	bd30      	pop	{r4, r5, pc}
 80832d2:	ea91 0f03 	teq	r1, r3
 80832d6:	bf1e      	ittt	ne
 80832d8:	2100      	movne	r1, #0
 80832da:	2000      	movne	r0, #0
 80832dc:	bd30      	popne	{r4, r5, pc}
 80832de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80832e2:	d105      	bne.n	80832f0 <__adddf3+0x230>
 80832e4:	0040      	lsls	r0, r0, #1
 80832e6:	4149      	adcs	r1, r1
 80832e8:	bf28      	it	cs
 80832ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80832ee:	bd30      	pop	{r4, r5, pc}
 80832f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80832f4:	bf3c      	itt	cc
 80832f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80832fa:	bd30      	popcc	{r4, r5, pc}
 80832fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083300:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083304:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083308:	f04f 0000 	mov.w	r0, #0
 808330c:	bd30      	pop	{r4, r5, pc}
 808330e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083312:	bf1a      	itte	ne
 8083314:	4619      	movne	r1, r3
 8083316:	4610      	movne	r0, r2
 8083318:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808331c:	bf1c      	itt	ne
 808331e:	460b      	movne	r3, r1
 8083320:	4602      	movne	r2, r0
 8083322:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083326:	bf06      	itte	eq
 8083328:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808332c:	ea91 0f03 	teqeq	r1, r3
 8083330:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083334:	bd30      	pop	{r4, r5, pc}
 8083336:	bf00      	nop

08083338 <__aeabi_ui2d>:
 8083338:	f090 0f00 	teq	r0, #0
 808333c:	bf04      	itt	eq
 808333e:	2100      	moveq	r1, #0
 8083340:	4770      	bxeq	lr
 8083342:	b530      	push	{r4, r5, lr}
 8083344:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083348:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808334c:	f04f 0500 	mov.w	r5, #0
 8083350:	f04f 0100 	mov.w	r1, #0
 8083354:	e750      	b.n	80831f8 <__adddf3+0x138>
 8083356:	bf00      	nop

08083358 <__aeabi_i2d>:
 8083358:	f090 0f00 	teq	r0, #0
 808335c:	bf04      	itt	eq
 808335e:	2100      	moveq	r1, #0
 8083360:	4770      	bxeq	lr
 8083362:	b530      	push	{r4, r5, lr}
 8083364:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083368:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808336c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083370:	bf48      	it	mi
 8083372:	4240      	negmi	r0, r0
 8083374:	f04f 0100 	mov.w	r1, #0
 8083378:	e73e      	b.n	80831f8 <__adddf3+0x138>
 808337a:	bf00      	nop

0808337c <__aeabi_f2d>:
 808337c:	0042      	lsls	r2, r0, #1
 808337e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083382:	ea4f 0131 	mov.w	r1, r1, rrx
 8083386:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808338a:	bf1f      	itttt	ne
 808338c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083390:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083394:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083398:	4770      	bxne	lr
 808339a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808339e:	bf08      	it	eq
 80833a0:	4770      	bxeq	lr
 80833a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80833a6:	bf04      	itt	eq
 80833a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80833ac:	4770      	bxeq	lr
 80833ae:	b530      	push	{r4, r5, lr}
 80833b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80833b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80833b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80833bc:	e71c      	b.n	80831f8 <__adddf3+0x138>
 80833be:	bf00      	nop

080833c0 <__aeabi_ul2d>:
 80833c0:	ea50 0201 	orrs.w	r2, r0, r1
 80833c4:	bf08      	it	eq
 80833c6:	4770      	bxeq	lr
 80833c8:	b530      	push	{r4, r5, lr}
 80833ca:	f04f 0500 	mov.w	r5, #0
 80833ce:	e00a      	b.n	80833e6 <__aeabi_l2d+0x16>

080833d0 <__aeabi_l2d>:
 80833d0:	ea50 0201 	orrs.w	r2, r0, r1
 80833d4:	bf08      	it	eq
 80833d6:	4770      	bxeq	lr
 80833d8:	b530      	push	{r4, r5, lr}
 80833da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80833de:	d502      	bpl.n	80833e6 <__aeabi_l2d+0x16>
 80833e0:	4240      	negs	r0, r0
 80833e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80833e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80833ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80833ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80833f2:	f43f aed8 	beq.w	80831a6 <__adddf3+0xe6>
 80833f6:	f04f 0203 	mov.w	r2, #3
 80833fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80833fe:	bf18      	it	ne
 8083400:	3203      	addne	r2, #3
 8083402:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083406:	bf18      	it	ne
 8083408:	3203      	addne	r2, #3
 808340a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808340e:	f1c2 0320 	rsb	r3, r2, #32
 8083412:	fa00 fc03 	lsl.w	ip, r0, r3
 8083416:	fa20 f002 	lsr.w	r0, r0, r2
 808341a:	fa01 fe03 	lsl.w	lr, r1, r3
 808341e:	ea40 000e 	orr.w	r0, r0, lr
 8083422:	fa21 f102 	lsr.w	r1, r1, r2
 8083426:	4414      	add	r4, r2
 8083428:	e6bd      	b.n	80831a6 <__adddf3+0xe6>
 808342a:	bf00      	nop

0808342c <__aeabi_dmul>:
 808342c:	b570      	push	{r4, r5, r6, lr}
 808342e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083432:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083436:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808343a:	bf1d      	ittte	ne
 808343c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083440:	ea94 0f0c 	teqne	r4, ip
 8083444:	ea95 0f0c 	teqne	r5, ip
 8083448:	f000 f8de 	bleq	8083608 <__aeabi_dmul+0x1dc>
 808344c:	442c      	add	r4, r5
 808344e:	ea81 0603 	eor.w	r6, r1, r3
 8083452:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083456:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808345a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808345e:	bf18      	it	ne
 8083460:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808346c:	d038      	beq.n	80834e0 <__aeabi_dmul+0xb4>
 808346e:	fba0 ce02 	umull	ip, lr, r0, r2
 8083472:	f04f 0500 	mov.w	r5, #0
 8083476:	fbe1 e502 	umlal	lr, r5, r1, r2
 808347a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808347e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083482:	f04f 0600 	mov.w	r6, #0
 8083486:	fbe1 5603 	umlal	r5, r6, r1, r3
 808348a:	f09c 0f00 	teq	ip, #0
 808348e:	bf18      	it	ne
 8083490:	f04e 0e01 	orrne.w	lr, lr, #1
 8083494:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083498:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808349c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80834a0:	d204      	bcs.n	80834ac <__aeabi_dmul+0x80>
 80834a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80834a6:	416d      	adcs	r5, r5
 80834a8:	eb46 0606 	adc.w	r6, r6, r6
 80834ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80834b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80834b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80834b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80834bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80834c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80834c4:	bf88      	it	hi
 80834c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80834ca:	d81e      	bhi.n	808350a <__aeabi_dmul+0xde>
 80834cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80834d0:	bf08      	it	eq
 80834d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80834d6:	f150 0000 	adcs.w	r0, r0, #0
 80834da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80834de:	bd70      	pop	{r4, r5, r6, pc}
 80834e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80834e4:	ea46 0101 	orr.w	r1, r6, r1
 80834e8:	ea40 0002 	orr.w	r0, r0, r2
 80834ec:	ea81 0103 	eor.w	r1, r1, r3
 80834f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80834f4:	bfc2      	ittt	gt
 80834f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80834fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80834fe:	bd70      	popgt	{r4, r5, r6, pc}
 8083500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083504:	f04f 0e00 	mov.w	lr, #0
 8083508:	3c01      	subs	r4, #1
 808350a:	f300 80ab 	bgt.w	8083664 <__aeabi_dmul+0x238>
 808350e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083512:	bfde      	ittt	le
 8083514:	2000      	movle	r0, #0
 8083516:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808351a:	bd70      	pople	{r4, r5, r6, pc}
 808351c:	f1c4 0400 	rsb	r4, r4, #0
 8083520:	3c20      	subs	r4, #32
 8083522:	da35      	bge.n	8083590 <__aeabi_dmul+0x164>
 8083524:	340c      	adds	r4, #12
 8083526:	dc1b      	bgt.n	8083560 <__aeabi_dmul+0x134>
 8083528:	f104 0414 	add.w	r4, r4, #20
 808352c:	f1c4 0520 	rsb	r5, r4, #32
 8083530:	fa00 f305 	lsl.w	r3, r0, r5
 8083534:	fa20 f004 	lsr.w	r0, r0, r4
 8083538:	fa01 f205 	lsl.w	r2, r1, r5
 808353c:	ea40 0002 	orr.w	r0, r0, r2
 8083540:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083548:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808354c:	fa21 f604 	lsr.w	r6, r1, r4
 8083550:	eb42 0106 	adc.w	r1, r2, r6
 8083554:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083558:	bf08      	it	eq
 808355a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808355e:	bd70      	pop	{r4, r5, r6, pc}
 8083560:	f1c4 040c 	rsb	r4, r4, #12
 8083564:	f1c4 0520 	rsb	r5, r4, #32
 8083568:	fa00 f304 	lsl.w	r3, r0, r4
 808356c:	fa20 f005 	lsr.w	r0, r0, r5
 8083570:	fa01 f204 	lsl.w	r2, r1, r4
 8083574:	ea40 0002 	orr.w	r0, r0, r2
 8083578:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808357c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083580:	f141 0100 	adc.w	r1, r1, #0
 8083584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083588:	bf08      	it	eq
 808358a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808358e:	bd70      	pop	{r4, r5, r6, pc}
 8083590:	f1c4 0520 	rsb	r5, r4, #32
 8083594:	fa00 f205 	lsl.w	r2, r0, r5
 8083598:	ea4e 0e02 	orr.w	lr, lr, r2
 808359c:	fa20 f304 	lsr.w	r3, r0, r4
 80835a0:	fa01 f205 	lsl.w	r2, r1, r5
 80835a4:	ea43 0302 	orr.w	r3, r3, r2
 80835a8:	fa21 f004 	lsr.w	r0, r1, r4
 80835ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80835b0:	fa21 f204 	lsr.w	r2, r1, r4
 80835b4:	ea20 0002 	bic.w	r0, r0, r2
 80835b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80835bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80835c0:	bf08      	it	eq
 80835c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80835c6:	bd70      	pop	{r4, r5, r6, pc}
 80835c8:	f094 0f00 	teq	r4, #0
 80835cc:	d10f      	bne.n	80835ee <__aeabi_dmul+0x1c2>
 80835ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80835d2:	0040      	lsls	r0, r0, #1
 80835d4:	eb41 0101 	adc.w	r1, r1, r1
 80835d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80835dc:	bf08      	it	eq
 80835de:	3c01      	subeq	r4, #1
 80835e0:	d0f7      	beq.n	80835d2 <__aeabi_dmul+0x1a6>
 80835e2:	ea41 0106 	orr.w	r1, r1, r6
 80835e6:	f095 0f00 	teq	r5, #0
 80835ea:	bf18      	it	ne
 80835ec:	4770      	bxne	lr
 80835ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80835f2:	0052      	lsls	r2, r2, #1
 80835f4:	eb43 0303 	adc.w	r3, r3, r3
 80835f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80835fc:	bf08      	it	eq
 80835fe:	3d01      	subeq	r5, #1
 8083600:	d0f7      	beq.n	80835f2 <__aeabi_dmul+0x1c6>
 8083602:	ea43 0306 	orr.w	r3, r3, r6
 8083606:	4770      	bx	lr
 8083608:	ea94 0f0c 	teq	r4, ip
 808360c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083610:	bf18      	it	ne
 8083612:	ea95 0f0c 	teqne	r5, ip
 8083616:	d00c      	beq.n	8083632 <__aeabi_dmul+0x206>
 8083618:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808361c:	bf18      	it	ne
 808361e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083622:	d1d1      	bne.n	80835c8 <__aeabi_dmul+0x19c>
 8083624:	ea81 0103 	eor.w	r1, r1, r3
 8083628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808362c:	f04f 0000 	mov.w	r0, #0
 8083630:	bd70      	pop	{r4, r5, r6, pc}
 8083632:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083636:	bf06      	itte	eq
 8083638:	4610      	moveq	r0, r2
 808363a:	4619      	moveq	r1, r3
 808363c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083640:	d019      	beq.n	8083676 <__aeabi_dmul+0x24a>
 8083642:	ea94 0f0c 	teq	r4, ip
 8083646:	d102      	bne.n	808364e <__aeabi_dmul+0x222>
 8083648:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808364c:	d113      	bne.n	8083676 <__aeabi_dmul+0x24a>
 808364e:	ea95 0f0c 	teq	r5, ip
 8083652:	d105      	bne.n	8083660 <__aeabi_dmul+0x234>
 8083654:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083658:	bf1c      	itt	ne
 808365a:	4610      	movne	r0, r2
 808365c:	4619      	movne	r1, r3
 808365e:	d10a      	bne.n	8083676 <__aeabi_dmul+0x24a>
 8083660:	ea81 0103 	eor.w	r1, r1, r3
 8083664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083668:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808366c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083670:	f04f 0000 	mov.w	r0, #0
 8083674:	bd70      	pop	{r4, r5, r6, pc}
 8083676:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808367a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808367e:	bd70      	pop	{r4, r5, r6, pc}

08083680 <__aeabi_ddiv>:
 8083680:	b570      	push	{r4, r5, r6, lr}
 8083682:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083686:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808368a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808368e:	bf1d      	ittte	ne
 8083690:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083694:	ea94 0f0c 	teqne	r4, ip
 8083698:	ea95 0f0c 	teqne	r5, ip
 808369c:	f000 f8a7 	bleq	80837ee <__aeabi_ddiv+0x16e>
 80836a0:	eba4 0405 	sub.w	r4, r4, r5
 80836a4:	ea81 0e03 	eor.w	lr, r1, r3
 80836a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80836ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80836b0:	f000 8088 	beq.w	80837c4 <__aeabi_ddiv+0x144>
 80836b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80836b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80836bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80836c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80836c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80836c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80836cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80836d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80836d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80836d8:	429d      	cmp	r5, r3
 80836da:	bf08      	it	eq
 80836dc:	4296      	cmpeq	r6, r2
 80836de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80836e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80836e6:	d202      	bcs.n	80836ee <__aeabi_ddiv+0x6e>
 80836e8:	085b      	lsrs	r3, r3, #1
 80836ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80836ee:	1ab6      	subs	r6, r6, r2
 80836f0:	eb65 0503 	sbc.w	r5, r5, r3
 80836f4:	085b      	lsrs	r3, r3, #1
 80836f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80836fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80836fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083702:	ebb6 0e02 	subs.w	lr, r6, r2
 8083706:	eb75 0e03 	sbcs.w	lr, r5, r3
 808370a:	bf22      	ittt	cs
 808370c:	1ab6      	subcs	r6, r6, r2
 808370e:	4675      	movcs	r5, lr
 8083710:	ea40 000c 	orrcs.w	r0, r0, ip
 8083714:	085b      	lsrs	r3, r3, #1
 8083716:	ea4f 0232 	mov.w	r2, r2, rrx
 808371a:	ebb6 0e02 	subs.w	lr, r6, r2
 808371e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083722:	bf22      	ittt	cs
 8083724:	1ab6      	subcs	r6, r6, r2
 8083726:	4675      	movcs	r5, lr
 8083728:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808372c:	085b      	lsrs	r3, r3, #1
 808372e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083732:	ebb6 0e02 	subs.w	lr, r6, r2
 8083736:	eb75 0e03 	sbcs.w	lr, r5, r3
 808373a:	bf22      	ittt	cs
 808373c:	1ab6      	subcs	r6, r6, r2
 808373e:	4675      	movcs	r5, lr
 8083740:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083744:	085b      	lsrs	r3, r3, #1
 8083746:	ea4f 0232 	mov.w	r2, r2, rrx
 808374a:	ebb6 0e02 	subs.w	lr, r6, r2
 808374e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083752:	bf22      	ittt	cs
 8083754:	1ab6      	subcs	r6, r6, r2
 8083756:	4675      	movcs	r5, lr
 8083758:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808375c:	ea55 0e06 	orrs.w	lr, r5, r6
 8083760:	d018      	beq.n	8083794 <__aeabi_ddiv+0x114>
 8083762:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083766:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808376a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808376e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083772:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083776:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808377a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808377e:	d1c0      	bne.n	8083702 <__aeabi_ddiv+0x82>
 8083780:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083784:	d10b      	bne.n	808379e <__aeabi_ddiv+0x11e>
 8083786:	ea41 0100 	orr.w	r1, r1, r0
 808378a:	f04f 0000 	mov.w	r0, #0
 808378e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083792:	e7b6      	b.n	8083702 <__aeabi_ddiv+0x82>
 8083794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083798:	bf04      	itt	eq
 808379a:	4301      	orreq	r1, r0
 808379c:	2000      	moveq	r0, #0
 808379e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80837a2:	bf88      	it	hi
 80837a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80837a8:	f63f aeaf 	bhi.w	808350a <__aeabi_dmul+0xde>
 80837ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80837b0:	bf04      	itt	eq
 80837b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80837b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80837ba:	f150 0000 	adcs.w	r0, r0, #0
 80837be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80837c2:	bd70      	pop	{r4, r5, r6, pc}
 80837c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80837c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80837cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80837d0:	bfc2      	ittt	gt
 80837d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80837d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80837da:	bd70      	popgt	{r4, r5, r6, pc}
 80837dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80837e0:	f04f 0e00 	mov.w	lr, #0
 80837e4:	3c01      	subs	r4, #1
 80837e6:	e690      	b.n	808350a <__aeabi_dmul+0xde>
 80837e8:	ea45 0e06 	orr.w	lr, r5, r6
 80837ec:	e68d      	b.n	808350a <__aeabi_dmul+0xde>
 80837ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80837f2:	ea94 0f0c 	teq	r4, ip
 80837f6:	bf08      	it	eq
 80837f8:	ea95 0f0c 	teqeq	r5, ip
 80837fc:	f43f af3b 	beq.w	8083676 <__aeabi_dmul+0x24a>
 8083800:	ea94 0f0c 	teq	r4, ip
 8083804:	d10a      	bne.n	808381c <__aeabi_ddiv+0x19c>
 8083806:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808380a:	f47f af34 	bne.w	8083676 <__aeabi_dmul+0x24a>
 808380e:	ea95 0f0c 	teq	r5, ip
 8083812:	f47f af25 	bne.w	8083660 <__aeabi_dmul+0x234>
 8083816:	4610      	mov	r0, r2
 8083818:	4619      	mov	r1, r3
 808381a:	e72c      	b.n	8083676 <__aeabi_dmul+0x24a>
 808381c:	ea95 0f0c 	teq	r5, ip
 8083820:	d106      	bne.n	8083830 <__aeabi_ddiv+0x1b0>
 8083822:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083826:	f43f aefd 	beq.w	8083624 <__aeabi_dmul+0x1f8>
 808382a:	4610      	mov	r0, r2
 808382c:	4619      	mov	r1, r3
 808382e:	e722      	b.n	8083676 <__aeabi_dmul+0x24a>
 8083830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083834:	bf18      	it	ne
 8083836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808383a:	f47f aec5 	bne.w	80835c8 <__aeabi_dmul+0x19c>
 808383e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083842:	f47f af0d 	bne.w	8083660 <__aeabi_dmul+0x234>
 8083846:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808384a:	f47f aeeb 	bne.w	8083624 <__aeabi_dmul+0x1f8>
 808384e:	e712      	b.n	8083676 <__aeabi_dmul+0x24a>

08083850 <__aeabi_d2iz>:
 8083850:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083854:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083858:	d215      	bcs.n	8083886 <__aeabi_d2iz+0x36>
 808385a:	d511      	bpl.n	8083880 <__aeabi_d2iz+0x30>
 808385c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083860:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083864:	d912      	bls.n	808388c <__aeabi_d2iz+0x3c>
 8083866:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808386a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808386e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083872:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083876:	fa23 f002 	lsr.w	r0, r3, r2
 808387a:	bf18      	it	ne
 808387c:	4240      	negne	r0, r0
 808387e:	4770      	bx	lr
 8083880:	f04f 0000 	mov.w	r0, #0
 8083884:	4770      	bx	lr
 8083886:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808388a:	d105      	bne.n	8083898 <__aeabi_d2iz+0x48>
 808388c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8083890:	bf08      	it	eq
 8083892:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083896:	4770      	bx	lr
 8083898:	f04f 0000 	mov.w	r0, #0
 808389c:	4770      	bx	lr
 808389e:	bf00      	nop

080838a0 <__aeabi_d2uiz>:
 80838a0:	004a      	lsls	r2, r1, #1
 80838a2:	d211      	bcs.n	80838c8 <__aeabi_d2uiz+0x28>
 80838a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80838a8:	d211      	bcs.n	80838ce <__aeabi_d2uiz+0x2e>
 80838aa:	d50d      	bpl.n	80838c8 <__aeabi_d2uiz+0x28>
 80838ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80838b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80838b4:	d40e      	bmi.n	80838d4 <__aeabi_d2uiz+0x34>
 80838b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80838ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80838be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80838c2:	fa23 f002 	lsr.w	r0, r3, r2
 80838c6:	4770      	bx	lr
 80838c8:	f04f 0000 	mov.w	r0, #0
 80838cc:	4770      	bx	lr
 80838ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80838d2:	d102      	bne.n	80838da <__aeabi_d2uiz+0x3a>
 80838d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80838d8:	4770      	bx	lr
 80838da:	f04f 0000 	mov.w	r0, #0
 80838de:	4770      	bx	lr

080838e0 <__aeabi_d2f>:
 80838e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80838e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80838e8:	bf24      	itt	cs
 80838ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80838ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80838f2:	d90d      	bls.n	8083910 <__aeabi_d2f+0x30>
 80838f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80838f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80838fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083904:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083908:	bf08      	it	eq
 808390a:	f020 0001 	biceq.w	r0, r0, #1
 808390e:	4770      	bx	lr
 8083910:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083914:	d121      	bne.n	808395a <__aeabi_d2f+0x7a>
 8083916:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808391a:	bfbc      	itt	lt
 808391c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083920:	4770      	bxlt	lr
 8083922:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083926:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808392a:	f1c2 0218 	rsb	r2, r2, #24
 808392e:	f1c2 0c20 	rsb	ip, r2, #32
 8083932:	fa10 f30c 	lsls.w	r3, r0, ip
 8083936:	fa20 f002 	lsr.w	r0, r0, r2
 808393a:	bf18      	it	ne
 808393c:	f040 0001 	orrne.w	r0, r0, #1
 8083940:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083944:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083948:	fa03 fc0c 	lsl.w	ip, r3, ip
 808394c:	ea40 000c 	orr.w	r0, r0, ip
 8083950:	fa23 f302 	lsr.w	r3, r3, r2
 8083954:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083958:	e7cc      	b.n	80838f4 <__aeabi_d2f+0x14>
 808395a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808395e:	d107      	bne.n	8083970 <__aeabi_d2f+0x90>
 8083960:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8083964:	bf1e      	ittt	ne
 8083966:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808396a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808396e:	4770      	bxne	lr
 8083970:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8083974:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808397c:	4770      	bx	lr
 808397e:	bf00      	nop

08083980 <__aeabi_frsub>:
 8083980:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083984:	e002      	b.n	808398c <__addsf3>
 8083986:	bf00      	nop

08083988 <__aeabi_fsub>:
 8083988:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808398c <__addsf3>:
 808398c:	0042      	lsls	r2, r0, #1
 808398e:	bf1f      	itttt	ne
 8083990:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083994:	ea92 0f03 	teqne	r2, r3
 8083998:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808399c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80839a0:	d06a      	beq.n	8083a78 <__addsf3+0xec>
 80839a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80839a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80839aa:	bfc1      	itttt	gt
 80839ac:	18d2      	addgt	r2, r2, r3
 80839ae:	4041      	eorgt	r1, r0
 80839b0:	4048      	eorgt	r0, r1
 80839b2:	4041      	eorgt	r1, r0
 80839b4:	bfb8      	it	lt
 80839b6:	425b      	neglt	r3, r3
 80839b8:	2b19      	cmp	r3, #25
 80839ba:	bf88      	it	hi
 80839bc:	4770      	bxhi	lr
 80839be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80839c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80839c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80839ca:	bf18      	it	ne
 80839cc:	4240      	negne	r0, r0
 80839ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80839d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80839d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80839da:	bf18      	it	ne
 80839dc:	4249      	negne	r1, r1
 80839de:	ea92 0f03 	teq	r2, r3
 80839e2:	d03f      	beq.n	8083a64 <__addsf3+0xd8>
 80839e4:	f1a2 0201 	sub.w	r2, r2, #1
 80839e8:	fa41 fc03 	asr.w	ip, r1, r3
 80839ec:	eb10 000c 	adds.w	r0, r0, ip
 80839f0:	f1c3 0320 	rsb	r3, r3, #32
 80839f4:	fa01 f103 	lsl.w	r1, r1, r3
 80839f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80839fc:	d502      	bpl.n	8083a04 <__addsf3+0x78>
 80839fe:	4249      	negs	r1, r1
 8083a00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083a04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083a08:	d313      	bcc.n	8083a32 <__addsf3+0xa6>
 8083a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083a0e:	d306      	bcc.n	8083a1e <__addsf3+0x92>
 8083a10:	0840      	lsrs	r0, r0, #1
 8083a12:	ea4f 0131 	mov.w	r1, r1, rrx
 8083a16:	f102 0201 	add.w	r2, r2, #1
 8083a1a:	2afe      	cmp	r2, #254	; 0xfe
 8083a1c:	d251      	bcs.n	8083ac2 <__addsf3+0x136>
 8083a1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083a22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083a26:	bf08      	it	eq
 8083a28:	f020 0001 	biceq.w	r0, r0, #1
 8083a2c:	ea40 0003 	orr.w	r0, r0, r3
 8083a30:	4770      	bx	lr
 8083a32:	0049      	lsls	r1, r1, #1
 8083a34:	eb40 0000 	adc.w	r0, r0, r0
 8083a38:	3a01      	subs	r2, #1
 8083a3a:	bf28      	it	cs
 8083a3c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8083a40:	d2ed      	bcs.n	8083a1e <__addsf3+0x92>
 8083a42:	fab0 fc80 	clz	ip, r0
 8083a46:	f1ac 0c08 	sub.w	ip, ip, #8
 8083a4a:	ebb2 020c 	subs.w	r2, r2, ip
 8083a4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8083a52:	bfaa      	itet	ge
 8083a54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083a58:	4252      	neglt	r2, r2
 8083a5a:	4318      	orrge	r0, r3
 8083a5c:	bfbc      	itt	lt
 8083a5e:	40d0      	lsrlt	r0, r2
 8083a60:	4318      	orrlt	r0, r3
 8083a62:	4770      	bx	lr
 8083a64:	f092 0f00 	teq	r2, #0
 8083a68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8083a6c:	bf06      	itte	eq
 8083a6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083a72:	3201      	addeq	r2, #1
 8083a74:	3b01      	subne	r3, #1
 8083a76:	e7b5      	b.n	80839e4 <__addsf3+0x58>
 8083a78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083a7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083a80:	bf18      	it	ne
 8083a82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083a86:	d021      	beq.n	8083acc <__addsf3+0x140>
 8083a88:	ea92 0f03 	teq	r2, r3
 8083a8c:	d004      	beq.n	8083a98 <__addsf3+0x10c>
 8083a8e:	f092 0f00 	teq	r2, #0
 8083a92:	bf08      	it	eq
 8083a94:	4608      	moveq	r0, r1
 8083a96:	4770      	bx	lr
 8083a98:	ea90 0f01 	teq	r0, r1
 8083a9c:	bf1c      	itt	ne
 8083a9e:	2000      	movne	r0, #0
 8083aa0:	4770      	bxne	lr
 8083aa2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083aa6:	d104      	bne.n	8083ab2 <__addsf3+0x126>
 8083aa8:	0040      	lsls	r0, r0, #1
 8083aaa:	bf28      	it	cs
 8083aac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083ab0:	4770      	bx	lr
 8083ab2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083ab6:	bf3c      	itt	cc
 8083ab8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083abc:	4770      	bxcc	lr
 8083abe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083ac2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083aca:	4770      	bx	lr
 8083acc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083ad0:	bf16      	itet	ne
 8083ad2:	4608      	movne	r0, r1
 8083ad4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083ad8:	4601      	movne	r1, r0
 8083ada:	0242      	lsls	r2, r0, #9
 8083adc:	bf06      	itte	eq
 8083ade:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083ae2:	ea90 0f01 	teqeq	r0, r1
 8083ae6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083aea:	4770      	bx	lr

08083aec <__aeabi_ui2f>:
 8083aec:	f04f 0300 	mov.w	r3, #0
 8083af0:	e004      	b.n	8083afc <__aeabi_i2f+0x8>
 8083af2:	bf00      	nop

08083af4 <__aeabi_i2f>:
 8083af4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083af8:	bf48      	it	mi
 8083afa:	4240      	negmi	r0, r0
 8083afc:	ea5f 0c00 	movs.w	ip, r0
 8083b00:	bf08      	it	eq
 8083b02:	4770      	bxeq	lr
 8083b04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083b08:	4601      	mov	r1, r0
 8083b0a:	f04f 0000 	mov.w	r0, #0
 8083b0e:	e01c      	b.n	8083b4a <__aeabi_l2f+0x2a>

08083b10 <__aeabi_ul2f>:
 8083b10:	ea50 0201 	orrs.w	r2, r0, r1
 8083b14:	bf08      	it	eq
 8083b16:	4770      	bxeq	lr
 8083b18:	f04f 0300 	mov.w	r3, #0
 8083b1c:	e00a      	b.n	8083b34 <__aeabi_l2f+0x14>
 8083b1e:	bf00      	nop

08083b20 <__aeabi_l2f>:
 8083b20:	ea50 0201 	orrs.w	r2, r0, r1
 8083b24:	bf08      	it	eq
 8083b26:	4770      	bxeq	lr
 8083b28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083b2c:	d502      	bpl.n	8083b34 <__aeabi_l2f+0x14>
 8083b2e:	4240      	negs	r0, r0
 8083b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083b34:	ea5f 0c01 	movs.w	ip, r1
 8083b38:	bf02      	ittt	eq
 8083b3a:	4684      	moveq	ip, r0
 8083b3c:	4601      	moveq	r1, r0
 8083b3e:	2000      	moveq	r0, #0
 8083b40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083b44:	bf08      	it	eq
 8083b46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083b4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083b4e:	fabc f28c 	clz	r2, ip
 8083b52:	3a08      	subs	r2, #8
 8083b54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083b58:	db10      	blt.n	8083b7c <__aeabi_l2f+0x5c>
 8083b5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8083b5e:	4463      	add	r3, ip
 8083b60:	fa00 fc02 	lsl.w	ip, r0, r2
 8083b64:	f1c2 0220 	rsb	r2, r2, #32
 8083b68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083b6c:	fa20 f202 	lsr.w	r2, r0, r2
 8083b70:	eb43 0002 	adc.w	r0, r3, r2
 8083b74:	bf08      	it	eq
 8083b76:	f020 0001 	biceq.w	r0, r0, #1
 8083b7a:	4770      	bx	lr
 8083b7c:	f102 0220 	add.w	r2, r2, #32
 8083b80:	fa01 fc02 	lsl.w	ip, r1, r2
 8083b84:	f1c2 0220 	rsb	r2, r2, #32
 8083b88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8083b8c:	fa21 f202 	lsr.w	r2, r1, r2
 8083b90:	eb43 0002 	adc.w	r0, r3, r2
 8083b94:	bf08      	it	eq
 8083b96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083b9a:	4770      	bx	lr

08083b9c <__aeabi_fmul>:
 8083b9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083ba0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083ba4:	bf1e      	ittt	ne
 8083ba6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083baa:	ea92 0f0c 	teqne	r2, ip
 8083bae:	ea93 0f0c 	teqne	r3, ip
 8083bb2:	d06f      	beq.n	8083c94 <__aeabi_fmul+0xf8>
 8083bb4:	441a      	add	r2, r3
 8083bb6:	ea80 0c01 	eor.w	ip, r0, r1
 8083bba:	0240      	lsls	r0, r0, #9
 8083bbc:	bf18      	it	ne
 8083bbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8083bc2:	d01e      	beq.n	8083c02 <__aeabi_fmul+0x66>
 8083bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083bc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8083bcc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8083bd0:	fba0 3101 	umull	r3, r1, r0, r1
 8083bd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083bd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8083bdc:	bf3e      	ittt	cc
 8083bde:	0049      	lslcc	r1, r1, #1
 8083be0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8083be4:	005b      	lslcc	r3, r3, #1
 8083be6:	ea40 0001 	orr.w	r0, r0, r1
 8083bea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8083bee:	2afd      	cmp	r2, #253	; 0xfd
 8083bf0:	d81d      	bhi.n	8083c2e <__aeabi_fmul+0x92>
 8083bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8083bf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083bfa:	bf08      	it	eq
 8083bfc:	f020 0001 	biceq.w	r0, r0, #1
 8083c00:	4770      	bx	lr
 8083c02:	f090 0f00 	teq	r0, #0
 8083c06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083c0a:	bf08      	it	eq
 8083c0c:	0249      	lsleq	r1, r1, #9
 8083c0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083c12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8083c16:	3a7f      	subs	r2, #127	; 0x7f
 8083c18:	bfc2      	ittt	gt
 8083c1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083c1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083c22:	4770      	bxgt	lr
 8083c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083c28:	f04f 0300 	mov.w	r3, #0
 8083c2c:	3a01      	subs	r2, #1
 8083c2e:	dc5d      	bgt.n	8083cec <__aeabi_fmul+0x150>
 8083c30:	f112 0f19 	cmn.w	r2, #25
 8083c34:	bfdc      	itt	le
 8083c36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8083c3a:	4770      	bxle	lr
 8083c3c:	f1c2 0200 	rsb	r2, r2, #0
 8083c40:	0041      	lsls	r1, r0, #1
 8083c42:	fa21 f102 	lsr.w	r1, r1, r2
 8083c46:	f1c2 0220 	rsb	r2, r2, #32
 8083c4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8083c4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8083c52:	f140 0000 	adc.w	r0, r0, #0
 8083c56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8083c5a:	bf08      	it	eq
 8083c5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083c60:	4770      	bx	lr
 8083c62:	f092 0f00 	teq	r2, #0
 8083c66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083c6a:	bf02      	ittt	eq
 8083c6c:	0040      	lsleq	r0, r0, #1
 8083c6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083c72:	3a01      	subeq	r2, #1
 8083c74:	d0f9      	beq.n	8083c6a <__aeabi_fmul+0xce>
 8083c76:	ea40 000c 	orr.w	r0, r0, ip
 8083c7a:	f093 0f00 	teq	r3, #0
 8083c7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083c82:	bf02      	ittt	eq
 8083c84:	0049      	lsleq	r1, r1, #1
 8083c86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083c8a:	3b01      	subeq	r3, #1
 8083c8c:	d0f9      	beq.n	8083c82 <__aeabi_fmul+0xe6>
 8083c8e:	ea41 010c 	orr.w	r1, r1, ip
 8083c92:	e78f      	b.n	8083bb4 <__aeabi_fmul+0x18>
 8083c94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083c98:	ea92 0f0c 	teq	r2, ip
 8083c9c:	bf18      	it	ne
 8083c9e:	ea93 0f0c 	teqne	r3, ip
 8083ca2:	d00a      	beq.n	8083cba <__aeabi_fmul+0x11e>
 8083ca4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083ca8:	bf18      	it	ne
 8083caa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083cae:	d1d8      	bne.n	8083c62 <__aeabi_fmul+0xc6>
 8083cb0:	ea80 0001 	eor.w	r0, r0, r1
 8083cb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083cb8:	4770      	bx	lr
 8083cba:	f090 0f00 	teq	r0, #0
 8083cbe:	bf17      	itett	ne
 8083cc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8083cc4:	4608      	moveq	r0, r1
 8083cc6:	f091 0f00 	teqne	r1, #0
 8083cca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8083cce:	d014      	beq.n	8083cfa <__aeabi_fmul+0x15e>
 8083cd0:	ea92 0f0c 	teq	r2, ip
 8083cd4:	d101      	bne.n	8083cda <__aeabi_fmul+0x13e>
 8083cd6:	0242      	lsls	r2, r0, #9
 8083cd8:	d10f      	bne.n	8083cfa <__aeabi_fmul+0x15e>
 8083cda:	ea93 0f0c 	teq	r3, ip
 8083cde:	d103      	bne.n	8083ce8 <__aeabi_fmul+0x14c>
 8083ce0:	024b      	lsls	r3, r1, #9
 8083ce2:	bf18      	it	ne
 8083ce4:	4608      	movne	r0, r1
 8083ce6:	d108      	bne.n	8083cfa <__aeabi_fmul+0x15e>
 8083ce8:	ea80 0001 	eor.w	r0, r0, r1
 8083cec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083cf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083cf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083cf8:	4770      	bx	lr
 8083cfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083cfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8083d02:	4770      	bx	lr

08083d04 <__aeabi_fdiv>:
 8083d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083d0c:	bf1e      	ittt	ne
 8083d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083d12:	ea92 0f0c 	teqne	r2, ip
 8083d16:	ea93 0f0c 	teqne	r3, ip
 8083d1a:	d069      	beq.n	8083df0 <__aeabi_fdiv+0xec>
 8083d1c:	eba2 0203 	sub.w	r2, r2, r3
 8083d20:	ea80 0c01 	eor.w	ip, r0, r1
 8083d24:	0249      	lsls	r1, r1, #9
 8083d26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8083d2a:	d037      	beq.n	8083d9c <__aeabi_fdiv+0x98>
 8083d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8083d30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8083d34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083d38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083d3c:	428b      	cmp	r3, r1
 8083d3e:	bf38      	it	cc
 8083d40:	005b      	lslcc	r3, r3, #1
 8083d42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8083d46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8083d4a:	428b      	cmp	r3, r1
 8083d4c:	bf24      	itt	cs
 8083d4e:	1a5b      	subcs	r3, r3, r1
 8083d50:	ea40 000c 	orrcs.w	r0, r0, ip
 8083d54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083d58:	bf24      	itt	cs
 8083d5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8083d5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083d62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8083d66:	bf24      	itt	cs
 8083d68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8083d6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083d70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8083d74:	bf24      	itt	cs
 8083d76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8083d7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083d7e:	011b      	lsls	r3, r3, #4
 8083d80:	bf18      	it	ne
 8083d82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8083d86:	d1e0      	bne.n	8083d4a <__aeabi_fdiv+0x46>
 8083d88:	2afd      	cmp	r2, #253	; 0xfd
 8083d8a:	f63f af50 	bhi.w	8083c2e <__aeabi_fmul+0x92>
 8083d8e:	428b      	cmp	r3, r1
 8083d90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083d94:	bf08      	it	eq
 8083d96:	f020 0001 	biceq.w	r0, r0, #1
 8083d9a:	4770      	bx	lr
 8083d9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083da0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083da4:	327f      	adds	r2, #127	; 0x7f
 8083da6:	bfc2      	ittt	gt
 8083da8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083dac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083db0:	4770      	bxgt	lr
 8083db2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083db6:	f04f 0300 	mov.w	r3, #0
 8083dba:	3a01      	subs	r2, #1
 8083dbc:	e737      	b.n	8083c2e <__aeabi_fmul+0x92>
 8083dbe:	f092 0f00 	teq	r2, #0
 8083dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083dc6:	bf02      	ittt	eq
 8083dc8:	0040      	lsleq	r0, r0, #1
 8083dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083dce:	3a01      	subeq	r2, #1
 8083dd0:	d0f9      	beq.n	8083dc6 <__aeabi_fdiv+0xc2>
 8083dd2:	ea40 000c 	orr.w	r0, r0, ip
 8083dd6:	f093 0f00 	teq	r3, #0
 8083dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083dde:	bf02      	ittt	eq
 8083de0:	0049      	lsleq	r1, r1, #1
 8083de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083de6:	3b01      	subeq	r3, #1
 8083de8:	d0f9      	beq.n	8083dde <__aeabi_fdiv+0xda>
 8083dea:	ea41 010c 	orr.w	r1, r1, ip
 8083dee:	e795      	b.n	8083d1c <__aeabi_fdiv+0x18>
 8083df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083df4:	ea92 0f0c 	teq	r2, ip
 8083df8:	d108      	bne.n	8083e0c <__aeabi_fdiv+0x108>
 8083dfa:	0242      	lsls	r2, r0, #9
 8083dfc:	f47f af7d 	bne.w	8083cfa <__aeabi_fmul+0x15e>
 8083e00:	ea93 0f0c 	teq	r3, ip
 8083e04:	f47f af70 	bne.w	8083ce8 <__aeabi_fmul+0x14c>
 8083e08:	4608      	mov	r0, r1
 8083e0a:	e776      	b.n	8083cfa <__aeabi_fmul+0x15e>
 8083e0c:	ea93 0f0c 	teq	r3, ip
 8083e10:	d104      	bne.n	8083e1c <__aeabi_fdiv+0x118>
 8083e12:	024b      	lsls	r3, r1, #9
 8083e14:	f43f af4c 	beq.w	8083cb0 <__aeabi_fmul+0x114>
 8083e18:	4608      	mov	r0, r1
 8083e1a:	e76e      	b.n	8083cfa <__aeabi_fmul+0x15e>
 8083e1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083e20:	bf18      	it	ne
 8083e22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083e26:	d1ca      	bne.n	8083dbe <__aeabi_fdiv+0xba>
 8083e28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8083e2c:	f47f af5c 	bne.w	8083ce8 <__aeabi_fmul+0x14c>
 8083e30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083e34:	f47f af3c 	bne.w	8083cb0 <__aeabi_fmul+0x114>
 8083e38:	e75f      	b.n	8083cfa <__aeabi_fmul+0x15e>
 8083e3a:	bf00      	nop

08083e3c <__gesf2>:
 8083e3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8083e40:	e006      	b.n	8083e50 <__cmpsf2+0x4>
 8083e42:	bf00      	nop

08083e44 <__lesf2>:
 8083e44:	f04f 0c01 	mov.w	ip, #1
 8083e48:	e002      	b.n	8083e50 <__cmpsf2+0x4>
 8083e4a:	bf00      	nop

08083e4c <__cmpsf2>:
 8083e4c:	f04f 0c01 	mov.w	ip, #1
 8083e50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083e54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083e58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083e60:	bf18      	it	ne
 8083e62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083e66:	d011      	beq.n	8083e8c <__cmpsf2+0x40>
 8083e68:	b001      	add	sp, #4
 8083e6a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8083e6e:	bf18      	it	ne
 8083e70:	ea90 0f01 	teqne	r0, r1
 8083e74:	bf58      	it	pl
 8083e76:	ebb2 0003 	subspl.w	r0, r2, r3
 8083e7a:	bf88      	it	hi
 8083e7c:	17c8      	asrhi	r0, r1, #31
 8083e7e:	bf38      	it	cc
 8083e80:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8083e84:	bf18      	it	ne
 8083e86:	f040 0001 	orrne.w	r0, r0, #1
 8083e8a:	4770      	bx	lr
 8083e8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083e90:	d102      	bne.n	8083e98 <__cmpsf2+0x4c>
 8083e92:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8083e96:	d105      	bne.n	8083ea4 <__cmpsf2+0x58>
 8083e98:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8083e9c:	d1e4      	bne.n	8083e68 <__cmpsf2+0x1c>
 8083e9e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8083ea2:	d0e1      	beq.n	8083e68 <__cmpsf2+0x1c>
 8083ea4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083ea8:	4770      	bx	lr
 8083eaa:	bf00      	nop

08083eac <__aeabi_cfrcmple>:
 8083eac:	4684      	mov	ip, r0
 8083eae:	4608      	mov	r0, r1
 8083eb0:	4661      	mov	r1, ip
 8083eb2:	e7ff      	b.n	8083eb4 <__aeabi_cfcmpeq>

08083eb4 <__aeabi_cfcmpeq>:
 8083eb4:	b50f      	push	{r0, r1, r2, r3, lr}
 8083eb6:	f7ff ffc9 	bl	8083e4c <__cmpsf2>
 8083eba:	2800      	cmp	r0, #0
 8083ebc:	bf48      	it	mi
 8083ebe:	f110 0f00 	cmnmi.w	r0, #0
 8083ec2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08083ec4 <__aeabi_fcmpeq>:
 8083ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083ec8:	f7ff fff4 	bl	8083eb4 <__aeabi_cfcmpeq>
 8083ecc:	bf0c      	ite	eq
 8083ece:	2001      	moveq	r0, #1
 8083ed0:	2000      	movne	r0, #0
 8083ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8083ed6:	bf00      	nop

08083ed8 <__aeabi_fcmplt>:
 8083ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083edc:	f7ff ffea 	bl	8083eb4 <__aeabi_cfcmpeq>
 8083ee0:	bf34      	ite	cc
 8083ee2:	2001      	movcc	r0, #1
 8083ee4:	2000      	movcs	r0, #0
 8083ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8083eea:	bf00      	nop

08083eec <__aeabi_fcmple>:
 8083eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083ef0:	f7ff ffe0 	bl	8083eb4 <__aeabi_cfcmpeq>
 8083ef4:	bf94      	ite	ls
 8083ef6:	2001      	movls	r0, #1
 8083ef8:	2000      	movhi	r0, #0
 8083efa:	f85d fb08 	ldr.w	pc, [sp], #8
 8083efe:	bf00      	nop

08083f00 <__aeabi_fcmpge>:
 8083f00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f04:	f7ff ffd2 	bl	8083eac <__aeabi_cfrcmple>
 8083f08:	bf94      	ite	ls
 8083f0a:	2001      	movls	r0, #1
 8083f0c:	2000      	movhi	r0, #0
 8083f0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f12:	bf00      	nop

08083f14 <__aeabi_fcmpgt>:
 8083f14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f18:	f7ff ffc8 	bl	8083eac <__aeabi_cfrcmple>
 8083f1c:	bf34      	ite	cc
 8083f1e:	2001      	movcc	r0, #1
 8083f20:	2000      	movcs	r0, #0
 8083f22:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f26:	bf00      	nop

08083f28 <__aeabi_f2iz>:
 8083f28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083f2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8083f30:	d30f      	bcc.n	8083f52 <__aeabi_f2iz+0x2a>
 8083f32:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8083f36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8083f3a:	d90d      	bls.n	8083f58 <__aeabi_f2iz+0x30>
 8083f3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8083f40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083f44:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083f48:	fa23 f002 	lsr.w	r0, r3, r2
 8083f4c:	bf18      	it	ne
 8083f4e:	4240      	negne	r0, r0
 8083f50:	4770      	bx	lr
 8083f52:	f04f 0000 	mov.w	r0, #0
 8083f56:	4770      	bx	lr
 8083f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8083f5c:	d101      	bne.n	8083f62 <__aeabi_f2iz+0x3a>
 8083f5e:	0242      	lsls	r2, r0, #9
 8083f60:	d105      	bne.n	8083f6e <__aeabi_f2iz+0x46>
 8083f62:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8083f66:	bf08      	it	eq
 8083f68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083f6c:	4770      	bx	lr
 8083f6e:	f04f 0000 	mov.w	r0, #0
 8083f72:	4770      	bx	lr

08083f74 <__aeabi_f2lz>:
 8083f74:	b510      	push	{r4, lr}
 8083f76:	2100      	movs	r1, #0
 8083f78:	4604      	mov	r4, r0
 8083f7a:	f7ff ffad 	bl	8083ed8 <__aeabi_fcmplt>
 8083f7e:	b920      	cbnz	r0, 8083f8a <__aeabi_f2lz+0x16>
 8083f80:	4620      	mov	r0, r4
 8083f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083f86:	f000 b809 	b.w	8083f9c <__aeabi_f2ulz>
 8083f8a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 8083f8e:	f000 f805 	bl	8083f9c <__aeabi_f2ulz>
 8083f92:	4240      	negs	r0, r0
 8083f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083f98:	bd10      	pop	{r4, pc}
 8083f9a:	bf00      	nop

08083f9c <__aeabi_f2ulz>:
 8083f9c:	b5d0      	push	{r4, r6, r7, lr}
 8083f9e:	f7ff f9ed 	bl	808337c <__aeabi_f2d>
 8083fa2:	2200      	movs	r2, #0
 8083fa4:	4b0b      	ldr	r3, [pc, #44]	; (8083fd4 <__aeabi_f2ulz+0x38>)
 8083fa6:	4606      	mov	r6, r0
 8083fa8:	460f      	mov	r7, r1
 8083faa:	f7ff fa3f 	bl	808342c <__aeabi_dmul>
 8083fae:	f7ff fc77 	bl	80838a0 <__aeabi_d2uiz>
 8083fb2:	4604      	mov	r4, r0
 8083fb4:	f7ff f9c0 	bl	8083338 <__aeabi_ui2d>
 8083fb8:	2200      	movs	r2, #0
 8083fba:	4b07      	ldr	r3, [pc, #28]	; (8083fd8 <__aeabi_f2ulz+0x3c>)
 8083fbc:	f7ff fa36 	bl	808342c <__aeabi_dmul>
 8083fc0:	4602      	mov	r2, r0
 8083fc2:	460b      	mov	r3, r1
 8083fc4:	4630      	mov	r0, r6
 8083fc6:	4639      	mov	r1, r7
 8083fc8:	f7ff f878 	bl	80830bc <__aeabi_dsub>
 8083fcc:	f7ff fc68 	bl	80838a0 <__aeabi_d2uiz>
 8083fd0:	4621      	mov	r1, r4
 8083fd2:	bdd0      	pop	{r4, r6, r7, pc}
 8083fd4:	3df00000 	.word	0x3df00000
 8083fd8:	41f00000 	.word	0x41f00000

08083fdc <asctime_r>:
 8083fdc:	b510      	push	{r4, lr}
 8083fde:	460c      	mov	r4, r1
 8083fe0:	6941      	ldr	r1, [r0, #20]
 8083fe2:	b086      	sub	sp, #24
 8083fe4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8083fe8:	6903      	ldr	r3, [r0, #16]
 8083fea:	6982      	ldr	r2, [r0, #24]
 8083fec:	9104      	str	r1, [sp, #16]
 8083fee:	6801      	ldr	r1, [r0, #0]
 8083ff0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8083ff4:	9103      	str	r1, [sp, #12]
 8083ff6:	6841      	ldr	r1, [r0, #4]
 8083ff8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8083ffc:	9102      	str	r1, [sp, #8]
 8083ffe:	6881      	ldr	r1, [r0, #8]
 8084000:	9101      	str	r1, [sp, #4]
 8084002:	68c1      	ldr	r1, [r0, #12]
 8084004:	4620      	mov	r0, r4
 8084006:	9100      	str	r1, [sp, #0]
 8084008:	4904      	ldr	r1, [pc, #16]	; (808401c <asctime_r+0x40>)
 808400a:	440b      	add	r3, r1
 808400c:	4904      	ldr	r1, [pc, #16]	; (8084020 <asctime_r+0x44>)
 808400e:	440a      	add	r2, r1
 8084010:	4904      	ldr	r1, [pc, #16]	; (8084024 <asctime_r+0x48>)
 8084012:	f7fd fc05 	bl	8081820 <siprintf>
 8084016:	4620      	mov	r0, r4
 8084018:	b006      	add	sp, #24
 808401a:	bd10      	pop	{r4, pc}
 808401c:	080847de 	.word	0x080847de
 8084020:	080847c9 	.word	0x080847c9
 8084024:	080847a9 	.word	0x080847a9

08084028 <atexit>:
 8084028:	2300      	movs	r3, #0
 808402a:	4601      	mov	r1, r0
 808402c:	461a      	mov	r2, r3
 808402e:	4618      	mov	r0, r3
 8084030:	f000 b91a 	b.w	8084268 <__register_exitproc>

08084034 <atoi>:
 8084034:	220a      	movs	r2, #10
 8084036:	2100      	movs	r1, #0
 8084038:	f000 b90c 	b.w	8084254 <strtol>

0808403c <difftime>:
 808403c:	b508      	push	{r3, lr}
 808403e:	1a80      	subs	r0, r0, r2
 8084040:	eb61 0103 	sbc.w	r1, r1, r3
 8084044:	f7ff f9c4 	bl	80833d0 <__aeabi_l2d>
 8084048:	bd08      	pop	{r3, pc}

0808404a <memcpy>:
 808404a:	440a      	add	r2, r1
 808404c:	4291      	cmp	r1, r2
 808404e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8084052:	d100      	bne.n	8084056 <memcpy+0xc>
 8084054:	4770      	bx	lr
 8084056:	b510      	push	{r4, lr}
 8084058:	f811 4b01 	ldrb.w	r4, [r1], #1
 808405c:	4291      	cmp	r1, r2
 808405e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8084062:	d1f9      	bne.n	8084058 <memcpy+0xe>
 8084064:	bd10      	pop	{r4, pc}

08084066 <memset>:
 8084066:	4603      	mov	r3, r0
 8084068:	4402      	add	r2, r0
 808406a:	4293      	cmp	r3, r2
 808406c:	d100      	bne.n	8084070 <memset+0xa>
 808406e:	4770      	bx	lr
 8084070:	f803 1b01 	strb.w	r1, [r3], #1
 8084074:	e7f9      	b.n	808406a <memset+0x4>
	...

08084078 <srand>:
 8084078:	b538      	push	{r3, r4, r5, lr}
 808407a:	4b0d      	ldr	r3, [pc, #52]	; (80840b0 <srand+0x38>)
 808407c:	4604      	mov	r4, r0
 808407e:	681d      	ldr	r5, [r3, #0]
 8084080:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8084082:	b97b      	cbnz	r3, 80840a4 <srand+0x2c>
 8084084:	2018      	movs	r0, #24
 8084086:	f7fd fbb3 	bl	80817f0 <malloc>
 808408a:	4a0a      	ldr	r2, [pc, #40]	; (80840b4 <srand+0x3c>)
 808408c:	4b0a      	ldr	r3, [pc, #40]	; (80840b8 <srand+0x40>)
 808408e:	63a8      	str	r0, [r5, #56]	; 0x38
 8084090:	e9c0 2300 	strd	r2, r3, [r0]
 8084094:	4b09      	ldr	r3, [pc, #36]	; (80840bc <srand+0x44>)
 8084096:	2201      	movs	r2, #1
 8084098:	6083      	str	r3, [r0, #8]
 808409a:	230b      	movs	r3, #11
 808409c:	8183      	strh	r3, [r0, #12]
 808409e:	2300      	movs	r3, #0
 80840a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80840a4:	2200      	movs	r2, #0
 80840a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80840a8:	611c      	str	r4, [r3, #16]
 80840aa:	615a      	str	r2, [r3, #20]
 80840ac:	bd38      	pop	{r3, r4, r5, pc}
 80840ae:	bf00      	nop
 80840b0:	2000001c 	.word	0x2000001c
 80840b4:	abcd330e 	.word	0xabcd330e
 80840b8:	e66d1234 	.word	0xe66d1234
 80840bc:	0005deec 	.word	0x0005deec

080840c0 <strcat>:
 80840c0:	4602      	mov	r2, r0
 80840c2:	b510      	push	{r4, lr}
 80840c4:	7814      	ldrb	r4, [r2, #0]
 80840c6:	4613      	mov	r3, r2
 80840c8:	3201      	adds	r2, #1
 80840ca:	2c00      	cmp	r4, #0
 80840cc:	d1fa      	bne.n	80840c4 <strcat+0x4>
 80840ce:	3b01      	subs	r3, #1
 80840d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80840d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80840d8:	2a00      	cmp	r2, #0
 80840da:	d1f9      	bne.n	80840d0 <strcat+0x10>
 80840dc:	bd10      	pop	{r4, pc}

080840de <strcmp>:
 80840de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80840e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80840e6:	2a01      	cmp	r2, #1
 80840e8:	bf28      	it	cs
 80840ea:	429a      	cmpcs	r2, r3
 80840ec:	d0f7      	beq.n	80840de <strcmp>
 80840ee:	1ad0      	subs	r0, r2, r3
 80840f0:	4770      	bx	lr
	...

080840f4 <strdup>:
 80840f4:	4b02      	ldr	r3, [pc, #8]	; (8084100 <strdup+0xc>)
 80840f6:	4601      	mov	r1, r0
 80840f8:	6818      	ldr	r0, [r3, #0]
 80840fa:	f000 b803 	b.w	8084104 <_strdup_r>
 80840fe:	bf00      	nop
 8084100:	2000001c 	.word	0x2000001c

08084104 <_strdup_r>:
 8084104:	b570      	push	{r4, r5, r6, lr}
 8084106:	4604      	mov	r4, r0
 8084108:	4608      	mov	r0, r1
 808410a:	460d      	mov	r5, r1
 808410c:	f000 f80d 	bl	808412a <strlen>
 8084110:	1c46      	adds	r6, r0, #1
 8084112:	4631      	mov	r1, r6
 8084114:	4620      	mov	r0, r4
 8084116:	f7fd fb9b 	bl	8081850 <_malloc_r>
 808411a:	4604      	mov	r4, r0
 808411c:	b118      	cbz	r0, 8084126 <_strdup_r+0x22>
 808411e:	4632      	mov	r2, r6
 8084120:	4629      	mov	r1, r5
 8084122:	f7ff ff92 	bl	808404a <memcpy>
 8084126:	4620      	mov	r0, r4
 8084128:	bd70      	pop	{r4, r5, r6, pc}

0808412a <strlen>:
 808412a:	4603      	mov	r3, r0
 808412c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084130:	2a00      	cmp	r2, #0
 8084132:	d1fb      	bne.n	808412c <strlen+0x2>
 8084134:	1a18      	subs	r0, r3, r0
 8084136:	3801      	subs	r0, #1
 8084138:	4770      	bx	lr

0808413a <strncpy>:
 808413a:	4603      	mov	r3, r0
 808413c:	b510      	push	{r4, lr}
 808413e:	3901      	subs	r1, #1
 8084140:	b132      	cbz	r2, 8084150 <strncpy+0x16>
 8084142:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084146:	3a01      	subs	r2, #1
 8084148:	f803 4b01 	strb.w	r4, [r3], #1
 808414c:	2c00      	cmp	r4, #0
 808414e:	d1f7      	bne.n	8084140 <strncpy+0x6>
 8084150:	2100      	movs	r1, #0
 8084152:	441a      	add	r2, r3
 8084154:	4293      	cmp	r3, r2
 8084156:	d100      	bne.n	808415a <strncpy+0x20>
 8084158:	bd10      	pop	{r4, pc}
 808415a:	f803 1b01 	strb.w	r1, [r3], #1
 808415e:	e7f9      	b.n	8084154 <strncpy+0x1a>

08084160 <_strtol_l.isra.0>:
 8084160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084164:	468c      	mov	ip, r1
 8084166:	4686      	mov	lr, r0
 8084168:	4e39      	ldr	r6, [pc, #228]	; (8084250 <_strtol_l.isra.0+0xf0>)
 808416a:	4660      	mov	r0, ip
 808416c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8084170:	5da5      	ldrb	r5, [r4, r6]
 8084172:	f015 0508 	ands.w	r5, r5, #8
 8084176:	d1f8      	bne.n	808416a <_strtol_l.isra.0+0xa>
 8084178:	2c2d      	cmp	r4, #45	; 0x2d
 808417a:	d133      	bne.n	80841e4 <_strtol_l.isra.0+0x84>
 808417c:	f04f 0801 	mov.w	r8, #1
 8084180:	f89c 4000 	ldrb.w	r4, [ip]
 8084184:	f100 0c02 	add.w	ip, r0, #2
 8084188:	2b00      	cmp	r3, #0
 808418a:	d05c      	beq.n	8084246 <_strtol_l.isra.0+0xe6>
 808418c:	2b10      	cmp	r3, #16
 808418e:	d10c      	bne.n	80841aa <_strtol_l.isra.0+0x4a>
 8084190:	2c30      	cmp	r4, #48	; 0x30
 8084192:	d10a      	bne.n	80841aa <_strtol_l.isra.0+0x4a>
 8084194:	f89c 0000 	ldrb.w	r0, [ip]
 8084198:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808419c:	2858      	cmp	r0, #88	; 0x58
 808419e:	d14d      	bne.n	808423c <_strtol_l.isra.0+0xdc>
 80841a0:	2310      	movs	r3, #16
 80841a2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80841a6:	f10c 0c02 	add.w	ip, ip, #2
 80841aa:	2600      	movs	r6, #0
 80841ac:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80841b0:	3f01      	subs	r7, #1
 80841b2:	fbb7 f9f3 	udiv	r9, r7, r3
 80841b6:	4630      	mov	r0, r6
 80841b8:	fb03 7a19 	mls	sl, r3, r9, r7
 80841bc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80841c0:	2d09      	cmp	r5, #9
 80841c2:	d818      	bhi.n	80841f6 <_strtol_l.isra.0+0x96>
 80841c4:	462c      	mov	r4, r5
 80841c6:	42a3      	cmp	r3, r4
 80841c8:	dd24      	ble.n	8084214 <_strtol_l.isra.0+0xb4>
 80841ca:	1c75      	adds	r5, r6, #1
 80841cc:	d007      	beq.n	80841de <_strtol_l.isra.0+0x7e>
 80841ce:	4581      	cmp	r9, r0
 80841d0:	d31d      	bcc.n	808420e <_strtol_l.isra.0+0xae>
 80841d2:	d101      	bne.n	80841d8 <_strtol_l.isra.0+0x78>
 80841d4:	45a2      	cmp	sl, r4
 80841d6:	db1a      	blt.n	808420e <_strtol_l.isra.0+0xae>
 80841d8:	2601      	movs	r6, #1
 80841da:	fb00 4003 	mla	r0, r0, r3, r4
 80841de:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80841e2:	e7eb      	b.n	80841bc <_strtol_l.isra.0+0x5c>
 80841e4:	2c2b      	cmp	r4, #43	; 0x2b
 80841e6:	bf08      	it	eq
 80841e8:	f89c 4000 	ldrbeq.w	r4, [ip]
 80841ec:	46a8      	mov	r8, r5
 80841ee:	bf08      	it	eq
 80841f0:	f100 0c02 	addeq.w	ip, r0, #2
 80841f4:	e7c8      	b.n	8084188 <_strtol_l.isra.0+0x28>
 80841f6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80841fa:	2d19      	cmp	r5, #25
 80841fc:	d801      	bhi.n	8084202 <_strtol_l.isra.0+0xa2>
 80841fe:	3c37      	subs	r4, #55	; 0x37
 8084200:	e7e1      	b.n	80841c6 <_strtol_l.isra.0+0x66>
 8084202:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8084206:	2d19      	cmp	r5, #25
 8084208:	d804      	bhi.n	8084214 <_strtol_l.isra.0+0xb4>
 808420a:	3c57      	subs	r4, #87	; 0x57
 808420c:	e7db      	b.n	80841c6 <_strtol_l.isra.0+0x66>
 808420e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084212:	e7e4      	b.n	80841de <_strtol_l.isra.0+0x7e>
 8084214:	1c73      	adds	r3, r6, #1
 8084216:	d106      	bne.n	8084226 <_strtol_l.isra.0+0xc6>
 8084218:	2322      	movs	r3, #34	; 0x22
 808421a:	4638      	mov	r0, r7
 808421c:	f8ce 3000 	str.w	r3, [lr]
 8084220:	b942      	cbnz	r2, 8084234 <_strtol_l.isra.0+0xd4>
 8084222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084226:	f1b8 0f00 	cmp.w	r8, #0
 808422a:	d000      	beq.n	808422e <_strtol_l.isra.0+0xce>
 808422c:	4240      	negs	r0, r0
 808422e:	2a00      	cmp	r2, #0
 8084230:	d0f7      	beq.n	8084222 <_strtol_l.isra.0+0xc2>
 8084232:	b10e      	cbz	r6, 8084238 <_strtol_l.isra.0+0xd8>
 8084234:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8084238:	6011      	str	r1, [r2, #0]
 808423a:	e7f2      	b.n	8084222 <_strtol_l.isra.0+0xc2>
 808423c:	2430      	movs	r4, #48	; 0x30
 808423e:	2b00      	cmp	r3, #0
 8084240:	d1b3      	bne.n	80841aa <_strtol_l.isra.0+0x4a>
 8084242:	2308      	movs	r3, #8
 8084244:	e7b1      	b.n	80841aa <_strtol_l.isra.0+0x4a>
 8084246:	2c30      	cmp	r4, #48	; 0x30
 8084248:	d0a4      	beq.n	8084194 <_strtol_l.isra.0+0x34>
 808424a:	230a      	movs	r3, #10
 808424c:	e7ad      	b.n	80841aa <_strtol_l.isra.0+0x4a>
 808424e:	bf00      	nop
 8084250:	08084803 	.word	0x08084803

08084254 <strtol>:
 8084254:	4613      	mov	r3, r2
 8084256:	460a      	mov	r2, r1
 8084258:	4601      	mov	r1, r0
 808425a:	4802      	ldr	r0, [pc, #8]	; (8084264 <strtol+0x10>)
 808425c:	6800      	ldr	r0, [r0, #0]
 808425e:	f7ff bf7f 	b.w	8084160 <_strtol_l.isra.0>
 8084262:	bf00      	nop
 8084264:	2000001c 	.word	0x2000001c

08084268 <__register_exitproc>:
 8084268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808426c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 808432c <__register_exitproc+0xc4>
 8084270:	4606      	mov	r6, r0
 8084272:	f8d8 0000 	ldr.w	r0, [r8]
 8084276:	461f      	mov	r7, r3
 8084278:	460d      	mov	r5, r1
 808427a:	4691      	mov	r9, r2
 808427c:	f000 f858 	bl	8084330 <__retarget_lock_acquire_recursive>
 8084280:	4b26      	ldr	r3, [pc, #152]	; (808431c <__register_exitproc+0xb4>)
 8084282:	681c      	ldr	r4, [r3, #0]
 8084284:	b934      	cbnz	r4, 8084294 <__register_exitproc+0x2c>
 8084286:	4c26      	ldr	r4, [pc, #152]	; (8084320 <__register_exitproc+0xb8>)
 8084288:	601c      	str	r4, [r3, #0]
 808428a:	4b26      	ldr	r3, [pc, #152]	; (8084324 <__register_exitproc+0xbc>)
 808428c:	b113      	cbz	r3, 8084294 <__register_exitproc+0x2c>
 808428e:	681b      	ldr	r3, [r3, #0]
 8084290:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8084294:	6863      	ldr	r3, [r4, #4]
 8084296:	2b1f      	cmp	r3, #31
 8084298:	dd07      	ble.n	80842aa <__register_exitproc+0x42>
 808429a:	f8d8 0000 	ldr.w	r0, [r8]
 808429e:	f000 f849 	bl	8084334 <__retarget_lock_release_recursive>
 80842a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80842a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80842aa:	b35e      	cbz	r6, 8084304 <__register_exitproc+0x9c>
 80842ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80842b0:	b988      	cbnz	r0, 80842d6 <__register_exitproc+0x6e>
 80842b2:	4b1d      	ldr	r3, [pc, #116]	; (8084328 <__register_exitproc+0xc0>)
 80842b4:	b923      	cbnz	r3, 80842c0 <__register_exitproc+0x58>
 80842b6:	f8d8 0000 	ldr.w	r0, [r8]
 80842ba:	f000 f83a 	bl	8084332 <__retarget_lock_release>
 80842be:	e7f0      	b.n	80842a2 <__register_exitproc+0x3a>
 80842c0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80842c4:	f7fd fa94 	bl	80817f0 <malloc>
 80842c8:	2800      	cmp	r0, #0
 80842ca:	d0f4      	beq.n	80842b6 <__register_exitproc+0x4e>
 80842cc:	2300      	movs	r3, #0
 80842ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80842d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80842d6:	2201      	movs	r2, #1
 80842d8:	6863      	ldr	r3, [r4, #4]
 80842da:	2e02      	cmp	r6, #2
 80842dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80842e0:	fa02 f203 	lsl.w	r2, r2, r3
 80842e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80842e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80842ec:	ea43 0302 	orr.w	r3, r3, r2
 80842f0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80842f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80842f8:	bf02      	ittt	eq
 80842fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80842fe:	431a      	orreq	r2, r3
 8084300:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8084304:	6863      	ldr	r3, [r4, #4]
 8084306:	f8d8 0000 	ldr.w	r0, [r8]
 808430a:	1c5a      	adds	r2, r3, #1
 808430c:	3302      	adds	r3, #2
 808430e:	6062      	str	r2, [r4, #4]
 8084310:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8084314:	f000 f80e 	bl	8084334 <__retarget_lock_release_recursive>
 8084318:	2000      	movs	r0, #0
 808431a:	e7c4      	b.n	80842a6 <__register_exitproc+0x3e>
 808431c:	200006cc 	.word	0x200006cc
 8084320:	20000640 	.word	0x20000640
 8084324:	00000000 	.word	0x00000000
 8084328:	080817f1 	.word	0x080817f1
 808432c:	20000080 	.word	0x20000080

08084330 <__retarget_lock_acquire_recursive>:
 8084330:	4770      	bx	lr

08084332 <__retarget_lock_release>:
 8084332:	4770      	bx	lr

08084334 <__retarget_lock_release_recursive>:
 8084334:	4770      	bx	lr

08084336 <link_code_end>:
	...

08084338 <dynalib_user>:
 8084338:	002d 0808 006d 0808 0095 0808 0099 0808     -...m...........
 8084348:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
 8084358:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
 8084368:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
 8084378:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
 8084388:	5f45 4143 5f54 424e 0031 6f50 726f 4c00     E_CAT_NB1.Poor.L
 8084398:	776f 4d00 6465 7569 006d 6556 7972 4720     ow.Medium.Very G
 80843a8:	6f6f 0064 7247 6165 0074 7325 5320 253a     ood.Great.%s S:%
 80843b8:	2e32 6630 2525 202c 3a51 3225 302e 2566     2.0f%%, Q:%2.0f%
 80843c8:	2025 4100 2b54 4643 4e55 313d 0d36 000a     % .AT+CFUN=16...
 80843d8:	6552 6573 7474 6e69 2067 6e69 7020 6f72     Resetting in pro
 80843e8:	7267 7365 0073 3532 2025 6f64 656e 3500     gress.25% done.5
 80843f8:	2530 6420 6e6f 0065 3537 2025 6f64 656e     0% done.75% done
 8084408:	4400 6e6f 0065 6c41 7265 7374 5300 6769     .Done.Alerts.Sig
 8084418:	616e 006c 6552 6573 4374 756f 746e 5200     nal.ResetCount.R
 8084428:	6c65 6165 6573 7300 6174 6574 664f 6843     elease.stateOfCh
 8084438:	0067 7570 706d 6d41 7370 7000 6d75 4d70     g.pumpAmps.pumpM
 8084448:	6e69 7475 7365 5200 7365 7465 462d 4152     inutes.Reset-FRA
 8084458:	004d 7550 706d 6f43 746e 6f72 006c 6552     M.PumpControl.Re
 8084468:	6573 2d74 6f43 6e75 7374 4800 7261 2d64     set-Counts.Hard-
 8084478:	6552 6573 0074 6553 646e 4e2d 776f 5600     Reset.Send-Now.V
 8084488:	7265 6f62 6573 4d2d 646f 0065 6553 2d74     erbose-Mode.Set-
 8084498:	6954 656d 6f7a 656e 4e00 206f 6144 6174     Timezone.No Data
 80844a8:	5500 6962 6f64 7374 4820 6f6f 006b 6552     .Ubidots Hook.Re
 80844b8:	7073 6e6f 6573 5220 6365 6965 6576 0064     sponse Received.
 80844c8:	7453 7461 0065 6553 2074 6556 6272 736f     State.Set Verbos
 80844d8:	2065 6f4d 6564 3000 4300 656c 7261 6465     e Mode.0.Cleared
 80844e8:	5620 7265 6f62 6573 4d20 646f 0065 6954      Verbose Mode.Ti
 80844f8:	656d 7a20 6e6f 2065 666f 7366 7465 2520     me zone offset %
 8084508:	0069 6954 656d 4300 6e6f 7274 6c6f 5020     i.Time.Control P
 8084518:	776f 7265 2d20 0020 6f4c 2077 654c 6576     ower - .Low Leve
 8084528:	206c 202d 5000 6d75 2070 6e4f 2d20 0020     l - .Pump On - .
 8084538:	6150 7472 6369 656c 5020 776f 7265 7b00     Particle Power.{
 8084548:	6122 656c 7472 6156 756c 2265 253a 2c69     "alertValue":%i,
 8084558:	2220 7570 706d 6d41 7370 3a22 6925 202c      "pumpAmps":%i, 
 8084568:	7022 6d75 4d70 6e69 2273 253a 2c69 2220     "pumpMins":%i, "
 8084578:	6162 7474 7265 2279 253a 2c69 2220 6572     battery":%i, "re
 8084588:	6573 7374 3a22 6925 007d 6f4d 696e 6f74     sets":%i}.Monito
 8084598:	6972 676e 455f 6576 746e 5700 6961 6974     ring_Event.Waiti
 80845a8:	676e 6620 726f 5220 7365 6f70 736e 0065     ng for Response.
 80845b8:	6449 656c 5200 7365 6f70 736e 2065 6954     Idle.Response Ti
 80845c8:	656d 756f 2074 7245 6f72 0072 5245 4f52     meout Error.ERRO
 80845d8:	5f52 5453 5441 2045 202d 6552 6573 7474     R_STATE - Resett
 80845e8:	6e69 0067 434c 0808 4354 0808 4359 0808     ing.LC..TC..YC..
 80845f8:	435e 0808 4362 0808 4367 0808 436c 0808     ^C..bC..gC..lC..
 8084608:	4370 0808 437b 0808 4386 0808               pC..{C...C..

08084614 <_ZL13releaseNumber>:
 8084614:	2e30 3336 0000 0000                         0.63....

0808461c <_ZTVN5spark13CellularClassE>:
	...
 8084624:	1947 0808 193d 0808 1933 0808 02b1 0808     G...=...3.......
 8084634:	1927 0808 191b 0808 24e5 0808 24ed 0808     '........$...$..
 8084644:	190f 0808 1907 0808 18fd 0808 18f3 0808     ................
 8084654:	18b7 0808                                   ....

08084658 <_ZTV14CellularSignal>:
	...
 8084660:	19f5 0808 1a27 0808 19f7 0808 1a35 0808     ....'.......5...
 8084670:	1a65 0808 1a89 0808 1ab9 0808 1b01 0808     e...............
 8084680:	19fb 0808 1a21 0808 fffc ffff 0000 0000     ....!...........
 8084690:	1b27 0808                                   '...

08084694 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808469c:	1b47 0808 1b4d 0808 1b9d 0808 1b5b 0808     G...M.......[...
 80846ac:	1b49 0808                                   I...

080846b0 <_ZTV7TwoWire>:
	...
 80846b8:	224d 0808 2297 0808 226f 0808 224f 0808     M"..."..o"..O"..
 80846c8:	2277 0808 227f 0808 2287 0808 228f 0808     w"..."..."..."..

080846d8 <_ZTV9IPAddress>:
	...
 80846e0:	2405 0808 23f5 0808 23f7 0808 7061 0070     .$...#...#..app.

080846f0 <_ZTVN5spark12NetworkClassE>:
	...
 80846f8:	24a5 0808 24af 0808 24b9 0808 24c3 0808     .$...$...$...$..
 8084708:	24cd 0808 24d9 0808 24e5 0808 24ed 0808     .$...$...$...$..
 8084718:	24f5 0808 2501 0808 2509 0808 2513 0808     .$...%...%...%..
 8084728:	251d 0808 5925 252d 2d6d 6425 2554 3a48     .%..%Y-%m-%dT%H:
 8084738:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

08084748 <_ZTV11USARTSerial>:
	...
 8084750:	2aa5 0808 2b0f 0808 2aeb 0808 2597 0808     .*...+...*...%..
 8084760:	2abb 0808 2ad7 0808 2ac9 0808 2ae5 0808     .*...*...*...*..
 8084770:	2aa7 0808 2aad 0808                         .*...*..

08084778 <_ZTV9USBSerial>:
	...
 8084780:	2b97 0808 2bfd 0808 2bd5 0808 2597 0808     .+...+...+...%..
 8084790:	2bc7 0808 2b99 0808 2ba9 0808 2bf7 0808     .+...+...+...+..
 80847a0:	2bb9 0808 2b91 0808                         .+...+..

080847a8 <_ZSt7nothrow>:
 80847a8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80847b8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080847c9 <day_name.4782>:
 80847c9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80847d9:	6972 6153                                    riSat

080847de <mon_name.4783>:
 80847de:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80847ee:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80847fe:	4476 6365                                   vDec

08084802 <_ctype_>:
 8084802:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8084812:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8084822:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8084832:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8084842:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8084852:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8084862:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8084872:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8084882:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08084903 <link_const_variable_data_end>:
	...

08084904 <link_constructors_location>:
 8084904:	08081201 	.word	0x08081201
 8084908:	080819c5 	.word	0x080819c5
 808490c:	08082495 	.word	0x08082495
 8084910:	08082565 	.word	0x08082565
 8084914:	08082651 	.word	0x08082651
 8084918:	080828ad 	.word	0x080828ad
 808491c:	08082a91 	.word	0x08082a91
 8084920:	08083089 	.word	0x08083089

08084924 <link_constructors_end>:
	...
